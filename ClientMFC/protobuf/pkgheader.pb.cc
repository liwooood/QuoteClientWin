// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pkgheader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace quote {

namespace {

const ::google::protobuf::Descriptor* PkgHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PkgHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PkgHeader_MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pkgheader_2eproto() {
  protobuf_AddDesc_pkgheader_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pkgheader.proto");
  GOOGLE_CHECK(file != NULL);
  PkgHeader_descriptor_ = file->message_type(0);
  static const int PkgHeader_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHeader, bodysize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHeader, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHeader, enc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHeader, zip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHeader, more_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHeader, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHeader, msgtype_),
  };
  PkgHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PkgHeader_descriptor_,
      PkgHeader::default_instance_,
      PkgHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkgHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PkgHeader));
  PkgHeader_MsgType_descriptor_ = PkgHeader_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pkgheader_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PkgHeader_descriptor_, &PkgHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pkgheader_2eproto() {
  delete PkgHeader::default_instance_;
  delete PkgHeader_reflection_;
}

void protobuf_AddDesc_pkgheader_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017pkgheader.proto\022\005quote\"\230\t\n\tPkgHeader\022\020"
    "\n\010bodysize\030\001 \002(\007\022\013\n\003ver\030\002 \002(\007\022\013\n\003enc\030\003 \002"
    "(\010\022\013\n\003zip\030\004 \001(\010\022\014\n\004more\030\005 \001(\010\022\017\n\007errcode"
    "\030\006 \002(\007\022)\n\007msgtype\030\007 \002(\0162\030.quote.PkgHeade"
    "r.MsgType\"\207\010\n\007MsgType\022\020\n\014REQ_REALTIME\020\001\022"
    "\020\n\014RES_REALTIME\020\002\022\014\n\010REQ_GRID\020\003\022\014\n\010RES_G"
    "RID\020\004\022\020\n\014REQ_GRIDSORT\020\005\022\020\n\014RES_GRIDSORT\020"
    "\006\022\016\n\nREQ_DETAIL\020\007\022\016\n\nRES_DETAIL\020\010\022\013\n\007REQ"
    "_MIN\020\t\022\013\n\007RES_MIN\020\n\022\016\n\nREQ_STATUS\020\013\022\016\n\nR"
    "ES_STATUS\020\014\022\014\n\010REQ_ZHPM\020\r\022\014\n\010RES_ZHPM\020\016\022"
    "\016\n\nREQ_CANDLE\020\017\022\016\n\nRES_CANDLE\020\020\022\016\n\nREQ_S"
    "TOCKS\020\021\022\016\n\nRES_STOCKS\020\022\022\017\n\013REQ_FINANCE\020\023"
    "\022\017\n\013RES_FINANCE\020\024\022\016\n\nREQ_WEIGHT\020\025\022\016\n\nRES"
    "_WEIGHT\020\026\022\014\n\010REQ_ZSBX\020\027\022\014\n\010RES_ZSBX\020\030\022\r\n"
    "\tREQ_BLOCK\020\031\022\r\n\tRES_BLOCK\020\032\022\013\n\007REQ_MD5\020\033"
    "\022\013\n\007RES_MD5\020\034\022\r\n\tREQ_LARGE\020\035\022\r\n\tRES_LARG"
    "E\020\036\022\r\n\tREQ_PRICE\020\037\022\r\n\tRES_PRICE\020 \022\r\n\tREQ"
    "_TRADE\020!\022\r\n\tRES_TRADE\020\"\022\020\n\014REQ_ADDSTOCK\020"
    "#\022\020\n\014RES_ADDSTOCK\020$\022\023\n\017REQ_UPDATESTOCK\020%"
    "\022\023\n\017RES_UPDATESTOCK\020&\022\022\n\016REQ_QUERYSTOCK\020"
    "\'\022\022\n\016RES_QUERYSTOCK\020(\022\022\n\016REQ_UPDATEPOOL\020"
    ")\022\022\n\016RES_UPDATEPOOL\020*\022\021\n\rREQ_QUERYPOOL\020+"
    "\022\021\n\rRES_QUERYPOOL\020,\022\026\n\022REQ_UPDATEPOOLTYP"
    "E\020-\022\026\n\022RES_UPDATEPOOLTYPE\020.\022\025\n\021REQ_QUERY"
    "POOLTYPE\020/\022\025\n\021RES_QUERYPOOLTYPE\0200\022\017\n\013REQ"
    "_CAPTCHA\0201\022\017\n\013RES_CAPTCHA\0202\022\022\n\016REQ_ADDWA"
    "RNING\0203\022\022\n\016RES_ADDWARNING\0204\022\025\n\021REQ_UPDAT"
    "EWARNING\0205\022\025\n\021RES_UPDATEWARNING\0206\022\025\n\021REQ"
    "_REMOVEWARNING\0207\022\025\n\021RES_REMOVEWARNING\0208\022"
    "\024\n\020REQ_QUERYWARNING\0209\022\024\n\020RES_QUERYWARNIN"
    "G\020:", 1203);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pkgheader.proto", &protobuf_RegisterTypes);
  PkgHeader::default_instance_ = new PkgHeader();
  PkgHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pkgheader_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pkgheader_2eproto {
  StaticDescriptorInitializer_pkgheader_2eproto() {
    protobuf_AddDesc_pkgheader_2eproto();
  }
} static_descriptor_initializer_pkgheader_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* PkgHeader_MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PkgHeader_MsgType_descriptor_;
}
bool PkgHeader_MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PkgHeader_MsgType PkgHeader::REQ_REALTIME;
const PkgHeader_MsgType PkgHeader::RES_REALTIME;
const PkgHeader_MsgType PkgHeader::REQ_GRID;
const PkgHeader_MsgType PkgHeader::RES_GRID;
const PkgHeader_MsgType PkgHeader::REQ_GRIDSORT;
const PkgHeader_MsgType PkgHeader::RES_GRIDSORT;
const PkgHeader_MsgType PkgHeader::REQ_DETAIL;
const PkgHeader_MsgType PkgHeader::RES_DETAIL;
const PkgHeader_MsgType PkgHeader::REQ_MIN;
const PkgHeader_MsgType PkgHeader::RES_MIN;
const PkgHeader_MsgType PkgHeader::REQ_STATUS;
const PkgHeader_MsgType PkgHeader::RES_STATUS;
const PkgHeader_MsgType PkgHeader::REQ_ZHPM;
const PkgHeader_MsgType PkgHeader::RES_ZHPM;
const PkgHeader_MsgType PkgHeader::REQ_CANDLE;
const PkgHeader_MsgType PkgHeader::RES_CANDLE;
const PkgHeader_MsgType PkgHeader::REQ_STOCKS;
const PkgHeader_MsgType PkgHeader::RES_STOCKS;
const PkgHeader_MsgType PkgHeader::REQ_FINANCE;
const PkgHeader_MsgType PkgHeader::RES_FINANCE;
const PkgHeader_MsgType PkgHeader::REQ_WEIGHT;
const PkgHeader_MsgType PkgHeader::RES_WEIGHT;
const PkgHeader_MsgType PkgHeader::REQ_ZSBX;
const PkgHeader_MsgType PkgHeader::RES_ZSBX;
const PkgHeader_MsgType PkgHeader::REQ_BLOCK;
const PkgHeader_MsgType PkgHeader::RES_BLOCK;
const PkgHeader_MsgType PkgHeader::REQ_MD5;
const PkgHeader_MsgType PkgHeader::RES_MD5;
const PkgHeader_MsgType PkgHeader::REQ_LARGE;
const PkgHeader_MsgType PkgHeader::RES_LARGE;
const PkgHeader_MsgType PkgHeader::REQ_PRICE;
const PkgHeader_MsgType PkgHeader::RES_PRICE;
const PkgHeader_MsgType PkgHeader::REQ_TRADE;
const PkgHeader_MsgType PkgHeader::RES_TRADE;
const PkgHeader_MsgType PkgHeader::REQ_ADDSTOCK;
const PkgHeader_MsgType PkgHeader::RES_ADDSTOCK;
const PkgHeader_MsgType PkgHeader::REQ_UPDATESTOCK;
const PkgHeader_MsgType PkgHeader::RES_UPDATESTOCK;
const PkgHeader_MsgType PkgHeader::REQ_QUERYSTOCK;
const PkgHeader_MsgType PkgHeader::RES_QUERYSTOCK;
const PkgHeader_MsgType PkgHeader::REQ_UPDATEPOOL;
const PkgHeader_MsgType PkgHeader::RES_UPDATEPOOL;
const PkgHeader_MsgType PkgHeader::REQ_QUERYPOOL;
const PkgHeader_MsgType PkgHeader::RES_QUERYPOOL;
const PkgHeader_MsgType PkgHeader::REQ_UPDATEPOOLTYPE;
const PkgHeader_MsgType PkgHeader::RES_UPDATEPOOLTYPE;
const PkgHeader_MsgType PkgHeader::REQ_QUERYPOOLTYPE;
const PkgHeader_MsgType PkgHeader::RES_QUERYPOOLTYPE;
const PkgHeader_MsgType PkgHeader::REQ_CAPTCHA;
const PkgHeader_MsgType PkgHeader::RES_CAPTCHA;
const PkgHeader_MsgType PkgHeader::REQ_ADDWARNING;
const PkgHeader_MsgType PkgHeader::RES_ADDWARNING;
const PkgHeader_MsgType PkgHeader::REQ_UPDATEWARNING;
const PkgHeader_MsgType PkgHeader::RES_UPDATEWARNING;
const PkgHeader_MsgType PkgHeader::REQ_REMOVEWARNING;
const PkgHeader_MsgType PkgHeader::RES_REMOVEWARNING;
const PkgHeader_MsgType PkgHeader::REQ_QUERYWARNING;
const PkgHeader_MsgType PkgHeader::RES_QUERYWARNING;
const PkgHeader_MsgType PkgHeader::MsgType_MIN;
const PkgHeader_MsgType PkgHeader::MsgType_MAX;
const int PkgHeader::MsgType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PkgHeader::kBodysizeFieldNumber;
const int PkgHeader::kVerFieldNumber;
const int PkgHeader::kEncFieldNumber;
const int PkgHeader::kZipFieldNumber;
const int PkgHeader::kMoreFieldNumber;
const int PkgHeader::kErrcodeFieldNumber;
const int PkgHeader::kMsgtypeFieldNumber;
#endif  // !_MSC_VER

PkgHeader::PkgHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PkgHeader::InitAsDefaultInstance() {
}

PkgHeader::PkgHeader(const PkgHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PkgHeader::SharedCtor() {
  _cached_size_ = 0;
  bodysize_ = 0u;
  ver_ = 0u;
  enc_ = false;
  zip_ = false;
  more_ = false;
  errcode_ = 0u;
  msgtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PkgHeader::~PkgHeader() {
  SharedDtor();
}

void PkgHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PkgHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PkgHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PkgHeader_descriptor_;
}

const PkgHeader& PkgHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pkgheader_2eproto();  return *default_instance_;
}

PkgHeader* PkgHeader::default_instance_ = NULL;

PkgHeader* PkgHeader::New() const {
  return new PkgHeader;
}

void PkgHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bodysize_ = 0u;
    ver_ = 0u;
    enc_ = false;
    zip_ = false;
    more_ = false;
    errcode_ = 0u;
    msgtype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PkgHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 bodysize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &bodysize_)));
          set_has_bodysize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ver;
        break;
      }
      
      // required fixed32 ver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enc;
        break;
      }
      
      // required bool enc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enc_)));
          set_has_enc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zip;
        break;
      }
      
      // optional bool zip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &zip_)));
          set_has_zip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_more;
        break;
      }
      
      // optional bool more = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &more_)));
          set_has_more();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_errcode;
        break;
      }
      
      // required fixed32 errcode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_msgtype;
        break;
      }
      
      // required .quote.PkgHeader.MsgType msgtype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quote::PkgHeader_MsgType_IsValid(value)) {
            set_msgtype(static_cast< ::quote::PkgHeader_MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PkgHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 bodysize = 1;
  if (has_bodysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->bodysize(), output);
  }
  
  // required fixed32 ver = 2;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ver(), output);
  }
  
  // required bool enc = 3;
  if (has_enc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enc(), output);
  }
  
  // optional bool zip = 4;
  if (has_zip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->zip(), output);
  }
  
  // optional bool more = 5;
  if (has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->more(), output);
  }
  
  // required fixed32 errcode = 6;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->errcode(), output);
  }
  
  // required .quote.PkgHeader.MsgType msgtype = 7;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->msgtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PkgHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 bodysize = 1;
  if (has_bodysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->bodysize(), target);
  }
  
  // required fixed32 ver = 2;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ver(), target);
  }
  
  // required bool enc = 3;
  if (has_enc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enc(), target);
  }
  
  // optional bool zip = 4;
  if (has_zip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->zip(), target);
  }
  
  // optional bool more = 5;
  if (has_more()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->more(), target);
  }
  
  // required fixed32 errcode = 6;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->errcode(), target);
  }
  
  // required .quote.PkgHeader.MsgType msgtype = 7;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->msgtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PkgHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 bodysize = 1;
    if (has_bodysize()) {
      total_size += 1 + 4;
    }
    
    // required fixed32 ver = 2;
    if (has_ver()) {
      total_size += 1 + 4;
    }
    
    // required bool enc = 3;
    if (has_enc()) {
      total_size += 1 + 1;
    }
    
    // optional bool zip = 4;
    if (has_zip()) {
      total_size += 1 + 1;
    }
    
    // optional bool more = 5;
    if (has_more()) {
      total_size += 1 + 1;
    }
    
    // required fixed32 errcode = 6;
    if (has_errcode()) {
      total_size += 1 + 4;
    }
    
    // required .quote.PkgHeader.MsgType msgtype = 7;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PkgHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PkgHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PkgHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PkgHeader::MergeFrom(const PkgHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bodysize()) {
      set_bodysize(from.bodysize());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_enc()) {
      set_enc(from.enc());
    }
    if (from.has_zip()) {
      set_zip(from.zip());
    }
    if (from.has_more()) {
      set_more(from.more());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PkgHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PkgHeader::CopyFrom(const PkgHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PkgHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000067) != 0x00000067) return false;
  
  return true;
}

void PkgHeader::Swap(PkgHeader* other) {
  if (other != this) {
    std::swap(bodysize_, other->bodysize_);
    std::swap(ver_, other->ver_);
    std::swap(enc_, other->enc_);
    std::swap(zip_, other->zip_);
    std::swap(more_, other->more_);
    std::swap(errcode_, other->errcode_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PkgHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PkgHeader_descriptor_;
  metadata.reflection = PkgHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace quote

// @@protoc_insertion_point(global_scope)
