// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idxtemp.proto

#ifndef PROTOBUF_idxtemp_2eproto__INCLUDED
#define PROTOBUF_idxtemp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace cssweb {
namespace kline {
namespace mid {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_idxtemp_2eproto();
void protobuf_AssignDesc_idxtemp_2eproto();
void protobuf_ShutdownFile_idxtemp_2eproto();

class MA;
class MACD;
class CCI;
class BIAS;
class KDJ;
class RSI;
class OBV;
class BOLL;
class PSY;
class ROC;
class WR;
class VR;
class EXPMA;
class ARBR;
class CR;
class CDP;
class DMA;
class MTM;
class BBI;
class TRIX;
class ZLJC;
class ASI;
class DMI;
class PVT;
class PBX;
class SKDJ;
class MIDVAL;
class KLINEIDX;
class TEMP;

// ===================================================================

class MA : public ::google::protobuf::Message {
 public:
  MA();
  virtual ~MA();
  
  MA(const MA& from);
  
  inline MA& operator=(const MA& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MA& default_instance();
  
  void Swap(MA* other);
  
  // implements Message ----------------------------------------------
  
  MA* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MA& from);
  void MergeFrom(const MA& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double sumMa4 = 1;
  inline bool has_summa4() const;
  inline void clear_summa4();
  static const int kSumMa4FieldNumber = 1;
  inline double summa4() const;
  inline void set_summa4(double value);
  
  // required double sumMa9 = 2;
  inline bool has_summa9() const;
  inline void clear_summa9();
  static const int kSumMa9FieldNumber = 2;
  inline double summa9() const;
  inline void set_summa9(double value);
  
  // required double sumMa19 = 3;
  inline bool has_summa19() const;
  inline void clear_summa19();
  static const int kSumMa19FieldNumber = 3;
  inline double summa19() const;
  inline void set_summa19(double value);
  
  // required double sumMa59 = 4;
  inline bool has_summa59() const;
  inline void clear_summa59();
  static const int kSumMa59FieldNumber = 4;
  inline double summa59() const;
  inline void set_summa59(double value);
  
  // required double sumMavol4 = 5;
  inline bool has_summavol4() const;
  inline void clear_summavol4();
  static const int kSumMavol4FieldNumber = 5;
  inline double summavol4() const;
  inline void set_summavol4(double value);
  
  // required double sumMavol9 = 6;
  inline bool has_summavol9() const;
  inline void clear_summavol9();
  static const int kSumMavol9FieldNumber = 6;
  inline double summavol9() const;
  inline void set_summavol9(double value);
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.MA)
 private:
  inline void set_has_summa4();
  inline void clear_has_summa4();
  inline void set_has_summa9();
  inline void clear_has_summa9();
  inline void set_has_summa19();
  inline void clear_has_summa19();
  inline void set_has_summa59();
  inline void clear_has_summa59();
  inline void set_has_summavol4();
  inline void clear_has_summavol4();
  inline void set_has_summavol9();
  inline void clear_has_summavol9();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double summa4_;
  double summa9_;
  double summa19_;
  double summa59_;
  double summavol4_;
  double summavol9_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static MA* default_instance_;
};
// -------------------------------------------------------------------

class MACD : public ::google::protobuf::Message {
 public:
  MACD();
  virtual ~MACD();
  
  MACD(const MACD& from);
  
  inline MACD& operator=(const MACD& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MACD& default_instance();
  
  void Swap(MACD* other);
  
  // implements Message ----------------------------------------------
  
  MACD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MACD& from);
  void MergeFrom(const MACD& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float emaShort = 1;
  inline bool has_emashort() const;
  inline void clear_emashort();
  static const int kEmaShortFieldNumber = 1;
  inline float emashort() const;
  inline void set_emashort(float value);
  
  // required float emaLong = 2;
  inline bool has_emalong() const;
  inline void clear_emalong();
  static const int kEmaLongFieldNumber = 2;
  inline float emalong() const;
  inline void set_emalong(float value);
  
  // required float dea = 3;
  inline bool has_dea() const;
  inline void clear_dea();
  static const int kDeaFieldNumber = 3;
  inline float dea() const;
  inline void set_dea(float value);
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.MACD)
 private:
  inline void set_has_emashort();
  inline void clear_has_emashort();
  inline void set_has_emalong();
  inline void clear_has_emalong();
  inline void set_has_dea();
  inline void clear_has_dea();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float emashort_;
  float emalong_;
  float dea_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static MACD* default_instance_;
};
// -------------------------------------------------------------------

class CCI : public ::google::protobuf::Message {
 public:
  CCI();
  virtual ~CCI();
  
  CCI(const CCI& from);
  
  inline CCI& operator=(const CCI& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CCI& default_instance();
  
  void Swap(CCI* other);
  
  // implements Message ----------------------------------------------
  
  CCI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCI& from);
  void MergeFrom(const CCI& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated float typ = 1;
  inline int typ_size() const;
  inline void clear_typ();
  static const int kTypFieldNumber = 1;
  inline float typ(int index) const;
  inline void set_typ(int index, float value);
  inline void add_typ(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      typ() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_typ();
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.CCI)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< float > typ_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static CCI* default_instance_;
};
// -------------------------------------------------------------------

class BIAS : public ::google::protobuf::Message {
 public:
  BIAS();
  virtual ~BIAS();
  
  BIAS(const BIAS& from);
  
  inline BIAS& operator=(const BIAS& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BIAS& default_instance();
  
  void Swap(BIAS* other);
  
  // implements Message ----------------------------------------------
  
  BIAS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BIAS& from);
  void MergeFrom(const BIAS& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float sum5 = 1;
  inline bool has_sum5() const;
  inline void clear_sum5();
  static const int kSum5FieldNumber = 1;
  inline float sum5() const;
  inline void set_sum5(float value);
  
  // required float sum11 = 2;
  inline bool has_sum11() const;
  inline void clear_sum11();
  static const int kSum11FieldNumber = 2;
  inline float sum11() const;
  inline void set_sum11(float value);
  
  // required float sum23 = 3;
  inline bool has_sum23() const;
  inline void clear_sum23();
  static const int kSum23FieldNumber = 3;
  inline float sum23() const;
  inline void set_sum23(float value);
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.BIAS)
 private:
  inline void set_has_sum5();
  inline void clear_has_sum5();
  inline void set_has_sum11();
  inline void clear_has_sum11();
  inline void set_has_sum23();
  inline void clear_has_sum23();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float sum5_;
  float sum11_;
  float sum23_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static BIAS* default_instance_;
};
// -------------------------------------------------------------------

class KDJ : public ::google::protobuf::Message {
 public:
  KDJ();
  virtual ~KDJ();
  
  KDJ(const KDJ& from);
  
  inline KDJ& operator=(const KDJ& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KDJ& default_instance();
  
  void Swap(KDJ* other);
  
  // implements Message ----------------------------------------------
  
  KDJ* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KDJ& from);
  void MergeFrom(const KDJ& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float hhv = 1;
  inline bool has_hhv() const;
  inline void clear_hhv();
  static const int kHhvFieldNumber = 1;
  inline float hhv() const;
  inline void set_hhv(float value);
  
  // required float llv = 2;
  inline bool has_llv() const;
  inline void clear_llv();
  static const int kLlvFieldNumber = 2;
  inline float llv() const;
  inline void set_llv(float value);
  
  // repeated float hhvs = 3;
  inline int hhvs_size() const;
  inline void clear_hhvs();
  static const int kHhvsFieldNumber = 3;
  inline float hhvs(int index) const;
  inline void set_hhvs(int index, float value);
  inline void add_hhvs(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      hhvs() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_hhvs();
  
  // repeated float llvs = 4;
  inline int llvs_size() const;
  inline void clear_llvs();
  static const int kLlvsFieldNumber = 4;
  inline float llvs(int index) const;
  inline void set_llvs(int index, float value);
  inline void add_llvs(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      llvs() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_llvs();
  
  // required float k = 5;
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 5;
  inline float k() const;
  inline void set_k(float value);
  
  // required float d = 6;
  inline bool has_d() const;
  inline void clear_d();
  static const int kDFieldNumber = 6;
  inline float d() const;
  inline void set_d(float value);
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.KDJ)
 private:
  inline void set_has_hhv();
  inline void clear_has_hhv();
  inline void set_has_llv();
  inline void clear_has_llv();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_d();
  inline void clear_has_d();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float hhv_;
  float llv_;
  ::google::protobuf::RepeatedField< float > hhvs_;
  ::google::protobuf::RepeatedField< float > llvs_;
  float k_;
  float d_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static KDJ* default_instance_;
};
// -------------------------------------------------------------------

class RSI : public ::google::protobuf::Message {
 public:
  RSI();
  virtual ~RSI();
  
  RSI(const RSI& from);
  
  inline RSI& operator=(const RSI& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RSI& default_instance();
  
  void Swap(RSI* other);
  
  // implements Message ----------------------------------------------
  
  RSI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RSI& from);
  void MergeFrom(const RSI& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float smaMax1 = 1;
  inline bool has_smamax1() const;
  inline void clear_smamax1();
  static const int kSmaMax1FieldNumber = 1;
  inline float smamax1() const;
  inline void set_smamax1(float value);
  
  // required float smaMax2 = 2;
  inline bool has_smamax2() const;
  inline void clear_smamax2();
  static const int kSmaMax2FieldNumber = 2;
  inline float smamax2() const;
  inline void set_smamax2(float value);
  
  // required float smaMax3 = 3;
  inline bool has_smamax3() const;
  inline void clear_smamax3();
  static const int kSmaMax3FieldNumber = 3;
  inline float smamax3() const;
  inline void set_smamax3(float value);
  
  // required float smaAbs1 = 4;
  inline bool has_smaabs1() const;
  inline void clear_smaabs1();
  static const int kSmaAbs1FieldNumber = 4;
  inline float smaabs1() const;
  inline void set_smaabs1(float value);
  
  // required float smaAbs2 = 5;
  inline bool has_smaabs2() const;
  inline void clear_smaabs2();
  static const int kSmaAbs2FieldNumber = 5;
  inline float smaabs2() const;
  inline void set_smaabs2(float value);
  
  // required float smaAbs3 = 6;
  inline bool has_smaabs3() const;
  inline void clear_smaabs3();
  static const int kSmaAbs3FieldNumber = 6;
  inline float smaabs3() const;
  inline void set_smaabs3(float value);
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.RSI)
 private:
  inline void set_has_smamax1();
  inline void clear_has_smamax1();
  inline void set_has_smamax2();
  inline void clear_has_smamax2();
  inline void set_has_smamax3();
  inline void clear_has_smamax3();
  inline void set_has_smaabs1();
  inline void clear_has_smaabs1();
  inline void set_has_smaabs2();
  inline void clear_has_smaabs2();
  inline void set_has_smaabs3();
  inline void clear_has_smaabs3();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float smamax1_;
  float smamax2_;
  float smamax3_;
  float smaabs1_;
  float smaabs2_;
  float smaabs3_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static RSI* default_instance_;
};
// -------------------------------------------------------------------

class OBV : public ::google::protobuf::Message {
 public:
  OBV();
  virtual ~OBV();
  
  OBV(const OBV& from);
  
  inline OBV& operator=(const OBV& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OBV& default_instance();
  
  void Swap(OBV* other);
  
  // implements Message ----------------------------------------------
  
  OBV* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OBV& from);
  void MergeFrom(const OBV& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double obv = 1;
  inline bool has_obv() const;
  inline void clear_obv();
  static const int kObvFieldNumber = 1;
  inline double obv() const;
  inline void set_obv(double value);
  
  // required double sumObv29 = 2;
  inline bool has_sumobv29() const;
  inline void clear_sumobv29();
  static const int kSumObv29FieldNumber = 2;
  inline double sumobv29() const;
  inline void set_sumobv29(double value);
  
  // repeated double obvs = 3;
  inline int obvs_size() const;
  inline void clear_obvs();
  static const int kObvsFieldNumber = 3;
  inline double obvs(int index) const;
  inline void set_obvs(int index, double value);
  inline void add_obvs(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      obvs() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_obvs();
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.OBV)
 private:
  inline void set_has_obv();
  inline void clear_has_obv();
  inline void set_has_sumobv29();
  inline void clear_has_sumobv29();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double obv_;
  double sumobv29_;
  ::google::protobuf::RepeatedField< double > obvs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static OBV* default_instance_;
};
// -------------------------------------------------------------------

class BOLL : public ::google::protobuf::Message {
 public:
  BOLL();
  virtual ~BOLL();
  
  BOLL(const BOLL& from);
  
  inline BOLL& operator=(const BOLL& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BOLL& default_instance();
  
  void Swap(BOLL* other);
  
  // implements Message ----------------------------------------------
  
  BOLL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BOLL& from);
  void MergeFrom(const BOLL& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double sumClose = 1;
  inline bool has_sumclose() const;
  inline void clear_sumclose();
  static const int kSumCloseFieldNumber = 1;
  inline double sumclose() const;
  inline void set_sumclose(double value);
  
  // required double sumPowClose = 2;
  inline bool has_sumpowclose() const;
  inline void clear_sumpowclose();
  static const int kSumPowCloseFieldNumber = 2;
  inline double sumpowclose() const;
  inline void set_sumpowclose(double value);
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.BOLL)
 private:
  inline void set_has_sumclose();
  inline void clear_has_sumclose();
  inline void set_has_sumpowclose();
  inline void clear_has_sumpowclose();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double sumclose_;
  double sumpowclose_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static BOLL* default_instance_;
};
// -------------------------------------------------------------------

class PSY : public ::google::protobuf::Message {
 public:
  PSY();
  virtual ~PSY();
  
  PSY(const PSY& from);
  
  inline PSY& operator=(const PSY& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSY& default_instance();
  
  void Swap(PSY* other);
  
  // implements Message ----------------------------------------------
  
  PSY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PSY& from);
  void MergeFrom(const PSY& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 psyCount11 = 1;
  inline bool has_psycount11() const;
  inline void clear_psycount11();
  static const int kPsyCount11FieldNumber = 1;
  inline ::google::protobuf::int32 psycount11() const;
  inline void set_psycount11(::google::protobuf::int32 value);
  
  // repeated int32 psyCounts = 2;
  inline int psycounts_size() const;
  inline void clear_psycounts();
  static const int kPsyCountsFieldNumber = 2;
  inline ::google::protobuf::int32 psycounts(int index) const;
  inline void set_psycounts(int index, ::google::protobuf::int32 value);
  inline void add_psycounts(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      psycounts() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_psycounts();
  
  // required float sumPsy = 3;
  inline bool has_sumpsy() const;
  inline void clear_sumpsy();
  static const int kSumPsyFieldNumber = 3;
  inline float sumpsy() const;
  inline void set_sumpsy(float value);
  
  // repeated float psys = 4;
  inline int psys_size() const;
  inline void clear_psys();
  static const int kPsysFieldNumber = 4;
  inline float psys(int index) const;
  inline void set_psys(int index, float value);
  inline void add_psys(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      psys() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_psys();
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.PSY)
 private:
  inline void set_has_psycount11();
  inline void clear_has_psycount11();
  inline void set_has_sumpsy();
  inline void clear_has_sumpsy();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > psycounts_;
  ::google::protobuf::int32 psycount11_;
  float sumpsy_;
  ::google::protobuf::RepeatedField< float > psys_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static PSY* default_instance_;
};
// -------------------------------------------------------------------

class ROC : public ::google::protobuf::Message {
 public:
  ROC();
  virtual ~ROC();
  
  ROC(const ROC& from);
  
  inline ROC& operator=(const ROC& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ROC& default_instance();
  
  void Swap(ROC* other);
  
  // implements Message ----------------------------------------------
  
  ROC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ROC& from);
  void MergeFrom(const ROC& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float refClose12 = 1;
  inline bool has_refclose12() const;
  inline void clear_refclose12();
  static const int kRefClose12FieldNumber = 1;
  inline float refclose12() const;
  inline void set_refclose12(float value);
  
  // required float sumRoc = 2;
  inline bool has_sumroc() const;
  inline void clear_sumroc();
  static const int kSumRocFieldNumber = 2;
  inline float sumroc() const;
  inline void set_sumroc(float value);
  
  // repeated float rocs = 3;
  inline int rocs_size() const;
  inline void clear_rocs();
  static const int kRocsFieldNumber = 3;
  inline float rocs(int index) const;
  inline void set_rocs(int index, float value);
  inline void add_rocs(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      rocs() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_rocs();
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.ROC)
 private:
  inline void set_has_refclose12();
  inline void clear_has_refclose12();
  inline void set_has_sumroc();
  inline void clear_has_sumroc();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float refclose12_;
  float sumroc_;
  ::google::protobuf::RepeatedField< float > rocs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static ROC* default_instance_;
};
// -------------------------------------------------------------------

class WR : public ::google::protobuf::Message {
 public:
  WR();
  virtual ~WR();
  
  WR(const WR& from);
  
  inline WR& operator=(const WR& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WR& default_instance();
  
  void Swap(WR* other);
  
  // implements Message ----------------------------------------------
  
  WR* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WR& from);
  void MergeFrom(const WR& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float llv = 1;
  inline bool has_llv() const;
  inline void clear_llv();
  static const int kLlvFieldNumber = 1;
  inline float llv() const;
  inline void set_llv(float value);
  
  // required float hhv = 2;
  inline bool has_hhv() const;
  inline void clear_hhv();
  static const int kHhvFieldNumber = 2;
  inline float hhv() const;
  inline void set_hhv(float value);
  
  // required float llv2 = 3;
  inline bool has_llv2() const;
  inline void clear_llv2();
  static const int kLlv2FieldNumber = 3;
  inline float llv2() const;
  inline void set_llv2(float value);
  
  // required float hhv2 = 4;
  inline bool has_hhv2() const;
  inline void clear_hhv2();
  static const int kHhv2FieldNumber = 4;
  inline float hhv2() const;
  inline void set_hhv2(float value);
  
  // repeated float hhvs = 5;
  inline int hhvs_size() const;
  inline void clear_hhvs();
  static const int kHhvsFieldNumber = 5;
  inline float hhvs(int index) const;
  inline void set_hhvs(int index, float value);
  inline void add_hhvs(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      hhvs() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_hhvs();
  
  // repeated float llvs = 6;
  inline int llvs_size() const;
  inline void clear_llvs();
  static const int kLlvsFieldNumber = 6;
  inline float llvs(int index) const;
  inline void set_llvs(int index, float value);
  inline void add_llvs(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      llvs() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_llvs();
  
  // repeated float hhvs2 = 7;
  inline int hhvs2_size() const;
  inline void clear_hhvs2();
  static const int kHhvs2FieldNumber = 7;
  inline float hhvs2(int index) const;
  inline void set_hhvs2(int index, float value);
  inline void add_hhvs2(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      hhvs2() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_hhvs2();
  
  // repeated float llvs2 = 8;
  inline int llvs2_size() const;
  inline void clear_llvs2();
  static const int kLlvs2FieldNumber = 8;
  inline float llvs2(int index) const;
  inline void set_llvs2(int index, float value);
  inline void add_llvs2(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      llvs2() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_llvs2();
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.WR)
 private:
  inline void set_has_llv();
  inline void clear_has_llv();
  inline void set_has_hhv();
  inline void clear_has_hhv();
  inline void set_has_llv2();
  inline void clear_has_llv2();
  inline void set_has_hhv2();
  inline void clear_has_hhv2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float llv_;
  float hhv_;
  float llv2_;
  float hhv2_;
  ::google::protobuf::RepeatedField< float > hhvs_;
  ::google::protobuf::RepeatedField< float > llvs_;
  ::google::protobuf::RepeatedField< float > hhvs2_;
  ::google::protobuf::RepeatedField< float > llvs2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static WR* default_instance_;
};
// -------------------------------------------------------------------

class VR : public ::google::protobuf::Message {
 public:
  VR();
  virtual ~VR();
  
  VR(const VR& from);
  
  inline VR& operator=(const VR& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VR& default_instance();
  
  void Swap(VR* other);
  
  // implements Message ----------------------------------------------
  
  VR* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VR& from);
  void MergeFrom(const VR& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double sum1 = 1;
  inline bool has_sum1() const;
  inline void clear_sum1();
  static const int kSum1FieldNumber = 1;
  inline double sum1() const;
  inline void set_sum1(double value);
  
  // required double sum2 = 2;
  inline bool has_sum2() const;
  inline void clear_sum2();
  static const int kSum2FieldNumber = 2;
  inline double sum2() const;
  inline void set_sum2(double value);
  
  // required double sumVr = 3;
  inline bool has_sumvr() const;
  inline void clear_sumvr();
  static const int kSumVrFieldNumber = 3;
  inline double sumvr() const;
  inline void set_sumvr(double value);
  
  // repeated double vrs = 4;
  inline int vrs_size() const;
  inline void clear_vrs();
  static const int kVrsFieldNumber = 4;
  inline double vrs(int index) const;
  inline void set_vrs(int index, double value);
  inline void add_vrs(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      vrs() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_vrs();
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.VR)
 private:
  inline void set_has_sum1();
  inline void clear_has_sum1();
  inline void set_has_sum2();
  inline void clear_has_sum2();
  inline void set_has_sumvr();
  inline void clear_has_sumvr();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double sum1_;
  double sum2_;
  double sumvr_;
  ::google::protobuf::RepeatedField< double > vrs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static VR* default_instance_;
};
// -------------------------------------------------------------------

class EXPMA : public ::google::protobuf::Message {
 public:
  EXPMA();
  virtual ~EXPMA();
  
  EXPMA(const EXPMA& from);
  
  inline EXPMA& operator=(const EXPMA& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EXPMA& default_instance();
  
  void Swap(EXPMA* other);
  
  // implements Message ----------------------------------------------
  
  EXPMA* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EXPMA& from);
  void MergeFrom(const EXPMA& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float prevEma = 1;
  inline bool has_prevema() const;
  inline void clear_prevema();
  static const int kPrevEmaFieldNumber = 1;
  inline float prevema() const;
  inline void set_prevema(float value);
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.EXPMA)
 private:
  inline void set_has_prevema();
  inline void clear_has_prevema();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float prevema_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static EXPMA* default_instance_;
};
// -------------------------------------------------------------------

class ARBR : public ::google::protobuf::Message {
 public:
  ARBR();
  virtual ~ARBR();
  
  ARBR(const ARBR& from);
  
  inline ARBR& operator=(const ARBR& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ARBR& default_instance();
  
  void Swap(ARBR* other);
  
  // implements Message ----------------------------------------------
  
  ARBR* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ARBR& from);
  void MergeFrom(const ARBR& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float sum1 = 1;
  inline bool has_sum1() const;
  inline void clear_sum1();
  static const int kSum1FieldNumber = 1;
  inline float sum1() const;
  inline void set_sum1(float value);
  
  // required float sum2 = 2;
  inline bool has_sum2() const;
  inline void clear_sum2();
  static const int kSum2FieldNumber = 2;
  inline float sum2() const;
  inline void set_sum2(float value);
  
  // required float sum3 = 3;
  inline bool has_sum3() const;
  inline void clear_sum3();
  static const int kSum3FieldNumber = 3;
  inline float sum3() const;
  inline void set_sum3(float value);
  
  // required float sum4 = 4;
  inline bool has_sum4() const;
  inline void clear_sum4();
  static const int kSum4FieldNumber = 4;
  inline float sum4() const;
  inline void set_sum4(float value);
  
  // required float top1 = 5;
  inline bool has_top1() const;
  inline void clear_top1();
  static const int kTop1FieldNumber = 5;
  inline float top1() const;
  inline void set_top1(float value);
  
  // required float top2 = 6;
  inline bool has_top2() const;
  inline void clear_top2();
  static const int kTop2FieldNumber = 6;
  inline float top2() const;
  inline void set_top2(float value);
  
  // required float top3 = 7;
  inline bool has_top3() const;
  inline void clear_top3();
  static const int kTop3FieldNumber = 7;
  inline float top3() const;
  inline void set_top3(float value);
  
  // required float top4 = 8;
  inline bool has_top4() const;
  inline void clear_top4();
  static const int kTop4FieldNumber = 8;
  inline float top4() const;
  inline void set_top4(float value);
  
  // required float prevClose = 9;
  inline bool has_prevclose() const;
  inline void clear_prevclose();
  static const int kPrevCloseFieldNumber = 9;
  inline float prevclose() const;
  inline void set_prevclose(float value);
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.ARBR)
 private:
  inline void set_has_sum1();
  inline void clear_has_sum1();
  inline void set_has_sum2();
  inline void clear_has_sum2();
  inline void set_has_sum3();
  inline void clear_has_sum3();
  inline void set_has_sum4();
  inline void clear_has_sum4();
  inline void set_has_top1();
  inline void clear_has_top1();
  inline void set_has_top2();
  inline void clear_has_top2();
  inline void set_has_top3();
  inline void clear_has_top3();
  inline void set_has_top4();
  inline void clear_has_top4();
  inline void set_has_prevclose();
  inline void clear_has_prevclose();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float sum1_;
  float sum2_;
  float sum3_;
  float sum4_;
  float top1_;
  float top2_;
  float top3_;
  float top4_;
  float prevclose_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static ARBR* default_instance_;
};
// -------------------------------------------------------------------

class CR : public ::google::protobuf::Message {
 public:
  CR();
  virtual ~CR();
  
  CR(const CR& from);
  
  inline CR& operator=(const CR& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CR& default_instance();
  
  void Swap(CR* other);
  
  // implements Message ----------------------------------------------
  
  CR* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CR& from);
  void MergeFrom(const CR& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float prevMid = 1;
  inline bool has_prevmid() const;
  inline void clear_prevmid();
  static const int kPrevMidFieldNumber = 1;
  inline float prevmid() const;
  inline void set_prevmid(float value);
  
  // required float sum1 = 2;
  inline bool has_sum1() const;
  inline void clear_sum1();
  static const int kSum1FieldNumber = 2;
  inline float sum1() const;
  inline void set_sum1(float value);
  
  // required float sum2 = 3;
  inline bool has_sum2() const;
  inline void clear_sum2();
  static const int kSum2FieldNumber = 3;
  inline float sum2() const;
  inline void set_sum2(float value);
  
  // required float top1 = 4;
  inline bool has_top1() const;
  inline void clear_top1();
  static const int kTop1FieldNumber = 4;
  inline float top1() const;
  inline void set_top1(float value);
  
  // required float top2 = 5;
  inline bool has_top2() const;
  inline void clear_top2();
  static const int kTop2FieldNumber = 5;
  inline float top2() const;
  inline void set_top2(float value);
  
  // required float nextMa1 = 6;
  inline bool has_nextma1() const;
  inline void clear_nextma1();
  static const int kNextMa1FieldNumber = 6;
  inline float nextma1() const;
  inline void set_nextma1(float value);
  
  // required float nextMa2 = 7;
  inline bool has_nextma2() const;
  inline void clear_nextma2();
  static const int kNextMa2FieldNumber = 7;
  inline float nextma2() const;
  inline void set_nextma2(float value);
  
  // required float nextMa3 = 8;
  inline bool has_nextma3() const;
  inline void clear_nextma3();
  static const int kNextMa3FieldNumber = 8;
  inline float nextma3() const;
  inline void set_nextma3(float value);
  
  // repeated float crs = 9;
  inline int crs_size() const;
  inline void clear_crs();
  static const int kCrsFieldNumber = 9;
  inline float crs(int index) const;
  inline void set_crs(int index, float value);
  inline void add_crs(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      crs() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_crs();
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.CR)
 private:
  inline void set_has_prevmid();
  inline void clear_has_prevmid();
  inline void set_has_sum1();
  inline void clear_has_sum1();
  inline void set_has_sum2();
  inline void clear_has_sum2();
  inline void set_has_top1();
  inline void clear_has_top1();
  inline void set_has_top2();
  inline void clear_has_top2();
  inline void set_has_nextma1();
  inline void clear_has_nextma1();
  inline void set_has_nextma2();
  inline void clear_has_nextma2();
  inline void set_has_nextma3();
  inline void clear_has_nextma3();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float prevmid_;
  float sum1_;
  float sum2_;
  float top1_;
  float top2_;
  float nextma1_;
  float nextma2_;
  float nextma3_;
  ::google::protobuf::RepeatedField< float > crs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static CR* default_instance_;
};
// -------------------------------------------------------------------

class CDP : public ::google::protobuf::Message {
 public:
  CDP();
  virtual ~CDP();
  
  CDP(const CDP& from);
  
  inline CDP& operator=(const CDP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDP& default_instance();
  
  void Swap(CDP* other);
  
  // implements Message ----------------------------------------------
  
  CDP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDP& from);
  void MergeFrom(const CDP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float prevHigh = 1;
  inline bool has_prevhigh() const;
  inline void clear_prevhigh();
  static const int kPrevHighFieldNumber = 1;
  inline float prevhigh() const;
  inline void set_prevhigh(float value);
  
  // required float prevLow = 2;
  inline bool has_prevlow() const;
  inline void clear_prevlow();
  static const int kPrevLowFieldNumber = 2;
  inline float prevlow() const;
  inline void set_prevlow(float value);
  
  // required float prevClose = 3;
  inline bool has_prevclose() const;
  inline void clear_prevclose();
  static const int kPrevCloseFieldNumber = 3;
  inline float prevclose() const;
  inline void set_prevclose(float value);
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.CDP)
 private:
  inline void set_has_prevhigh();
  inline void clear_has_prevhigh();
  inline void set_has_prevlow();
  inline void clear_has_prevlow();
  inline void set_has_prevclose();
  inline void clear_has_prevclose();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float prevhigh_;
  float prevlow_;
  float prevclose_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static CDP* default_instance_;
};
// -------------------------------------------------------------------

class DMA : public ::google::protobuf::Message {
 public:
  DMA();
  virtual ~DMA();
  
  DMA(const DMA& from);
  
  inline DMA& operator=(const DMA& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DMA& default_instance();
  
  void Swap(DMA* other);
  
  // implements Message ----------------------------------------------
  
  DMA* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DMA& from);
  void MergeFrom(const DMA& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float sumMa9 = 1;
  inline bool has_summa9() const;
  inline void clear_summa9();
  static const int kSumMa9FieldNumber = 1;
  inline float summa9() const;
  inline void set_summa9(float value);
  
  // required float sumMa49 = 2;
  inline bool has_summa49() const;
  inline void clear_summa49();
  static const int kSumMa49FieldNumber = 2;
  inline float summa49() const;
  inline void set_summa49(float value);
  
  // required float sumDdd = 3;
  inline bool has_sumddd() const;
  inline void clear_sumddd();
  static const int kSumDddFieldNumber = 3;
  inline float sumddd() const;
  inline void set_sumddd(float value);
  
  // repeated float ddds = 4;
  inline int ddds_size() const;
  inline void clear_ddds();
  static const int kDddsFieldNumber = 4;
  inline float ddds(int index) const;
  inline void set_ddds(int index, float value);
  inline void add_ddds(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      ddds() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_ddds();
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.DMA)
 private:
  inline void set_has_summa9();
  inline void clear_has_summa9();
  inline void set_has_summa49();
  inline void clear_has_summa49();
  inline void set_has_sumddd();
  inline void clear_has_sumddd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float summa9_;
  float summa49_;
  ::google::protobuf::RepeatedField< float > ddds_;
  float sumddd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static DMA* default_instance_;
};
// -------------------------------------------------------------------

class MTM : public ::google::protobuf::Message {
 public:
  MTM();
  virtual ~MTM();
  
  MTM(const MTM& from);
  
  inline MTM& operator=(const MTM& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MTM& default_instance();
  
  void Swap(MTM* other);
  
  // implements Message ----------------------------------------------
  
  MTM* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MTM& from);
  void MergeFrom(const MTM& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float close4 = 1;
  inline bool has_close4() const;
  inline void clear_close4();
  static const int kClose4FieldNumber = 1;
  inline float close4() const;
  inline void set_close4(float value);
  
  // required float sumMtm = 2;
  inline bool has_summtm() const;
  inline void clear_summtm();
  static const int kSumMtmFieldNumber = 2;
  inline float summtm() const;
  inline void set_summtm(float value);
  
  // repeated float mtms = 3;
  inline int mtms_size() const;
  inline void clear_mtms();
  static const int kMtmsFieldNumber = 3;
  inline float mtms(int index) const;
  inline void set_mtms(int index, float value);
  inline void add_mtms(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mtms() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mtms();
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.MTM)
 private:
  inline void set_has_close4();
  inline void clear_has_close4();
  inline void set_has_summtm();
  inline void clear_has_summtm();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float close4_;
  float summtm_;
  ::google::protobuf::RepeatedField< float > mtms_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static MTM* default_instance_;
};
// -------------------------------------------------------------------

class BBI : public ::google::protobuf::Message {
 public:
  BBI();
  virtual ~BBI();
  
  BBI(const BBI& from);
  
  inline BBI& operator=(const BBI& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BBI& default_instance();
  
  void Swap(BBI* other);
  
  // implements Message ----------------------------------------------
  
  BBI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BBI& from);
  void MergeFrom(const BBI& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float sum1 = 1;
  inline bool has_sum1() const;
  inline void clear_sum1();
  static const int kSum1FieldNumber = 1;
  inline float sum1() const;
  inline void set_sum1(float value);
  
  // required float sum2 = 2;
  inline bool has_sum2() const;
  inline void clear_sum2();
  static const int kSum2FieldNumber = 2;
  inline float sum2() const;
  inline void set_sum2(float value);
  
  // required float sum3 = 3;
  inline bool has_sum3() const;
  inline void clear_sum3();
  static const int kSum3FieldNumber = 3;
  inline float sum3() const;
  inline void set_sum3(float value);
  
  // required float sum4 = 4;
  inline bool has_sum4() const;
  inline void clear_sum4();
  static const int kSum4FieldNumber = 4;
  inline float sum4() const;
  inline void set_sum4(float value);
  
  // required float top1 = 5;
  inline bool has_top1() const;
  inline void clear_top1();
  static const int kTop1FieldNumber = 5;
  inline float top1() const;
  inline void set_top1(float value);
  
  // required float top2 = 6;
  inline bool has_top2() const;
  inline void clear_top2();
  static const int kTop2FieldNumber = 6;
  inline float top2() const;
  inline void set_top2(float value);
  
  // required float top3 = 7;
  inline bool has_top3() const;
  inline void clear_top3();
  static const int kTop3FieldNumber = 7;
  inline float top3() const;
  inline void set_top3(float value);
  
  // required float top4 = 8;
  inline bool has_top4() const;
  inline void clear_top4();
  static const int kTop4FieldNumber = 8;
  inline float top4() const;
  inline void set_top4(float value);
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.BBI)
 private:
  inline void set_has_sum1();
  inline void clear_has_sum1();
  inline void set_has_sum2();
  inline void clear_has_sum2();
  inline void set_has_sum3();
  inline void clear_has_sum3();
  inline void set_has_sum4();
  inline void clear_has_sum4();
  inline void set_has_top1();
  inline void clear_has_top1();
  inline void set_has_top2();
  inline void clear_has_top2();
  inline void set_has_top3();
  inline void clear_has_top3();
  inline void set_has_top4();
  inline void clear_has_top4();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float sum1_;
  float sum2_;
  float sum3_;
  float sum4_;
  float top1_;
  float top2_;
  float top3_;
  float top4_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static BBI* default_instance_;
};
// -------------------------------------------------------------------

class TRIX : public ::google::protobuf::Message {
 public:
  TRIX();
  virtual ~TRIX();
  
  TRIX(const TRIX& from);
  
  inline TRIX& operator=(const TRIX& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TRIX& default_instance();
  
  void Swap(TRIX* other);
  
  // implements Message ----------------------------------------------
  
  TRIX* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRIX& from);
  void MergeFrom(const TRIX& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float prevEma1 = 1;
  inline bool has_prevema1() const;
  inline void clear_prevema1();
  static const int kPrevEma1FieldNumber = 1;
  inline float prevema1() const;
  inline void set_prevema1(float value);
  
  // required float prevEma2 = 2;
  inline bool has_prevema2() const;
  inline void clear_prevema2();
  static const int kPrevEma2FieldNumber = 2;
  inline float prevema2() const;
  inline void set_prevema2(float value);
  
  // required float prevTr = 3;
  inline bool has_prevtr() const;
  inline void clear_prevtr();
  static const int kPrevTrFieldNumber = 3;
  inline float prevtr() const;
  inline void set_prevtr(float value);
  
  // required float sumTr = 4;
  inline bool has_sumtr() const;
  inline void clear_sumtr();
  static const int kSumTrFieldNumber = 4;
  inline float sumtr() const;
  inline void set_sumtr(float value);
  
  // repeated float trs = 5;
  inline int trs_size() const;
  inline void clear_trs();
  static const int kTrsFieldNumber = 5;
  inline float trs(int index) const;
  inline void set_trs(int index, float value);
  inline void add_trs(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      trs() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_trs();
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.TRIX)
 private:
  inline void set_has_prevema1();
  inline void clear_has_prevema1();
  inline void set_has_prevema2();
  inline void clear_has_prevema2();
  inline void set_has_prevtr();
  inline void clear_has_prevtr();
  inline void set_has_sumtr();
  inline void clear_has_sumtr();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float prevema1_;
  float prevema2_;
  float prevtr_;
  float sumtr_;
  ::google::protobuf::RepeatedField< float > trs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static TRIX* default_instance_;
};
// -------------------------------------------------------------------

class ZLJC : public ::google::protobuf::Message {
 public:
  ZLJC();
  virtual ~ZLJC();
  
  ZLJC(const ZLJC& from);
  
  inline ZLJC& operator=(const ZLJC& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZLJC& default_instance();
  
  void Swap(ZLJC* other);
  
  // implements Message ----------------------------------------------
  
  ZLJC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZLJC& from);
  void MergeFrom(const ZLJC& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float prevLow = 1;
  inline bool has_prevlow() const;
  inline void clear_prevlow();
  static const int kPrevLowFieldNumber = 1;
  inline float prevlow() const;
  inline void set_prevlow(float value);
  
  // required float prevJcs = 2;
  inline bool has_prevjcs() const;
  inline void clear_prevjcs();
  static const int kPrevJcsFieldNumber = 2;
  inline float prevjcs() const;
  inline void set_prevjcs(float value);
  
  // required float sumJcm = 3;
  inline bool has_sumjcm() const;
  inline void clear_sumjcm();
  static const int kSumJcmFieldNumber = 3;
  inline float sumjcm() const;
  inline void set_sumjcm(float value);
  
  // required float sumJcl = 4;
  inline bool has_sumjcl() const;
  inline void clear_sumjcl();
  static const int kSumJclFieldNumber = 4;
  inline float sumjcl() const;
  inline void set_sumjcl(float value);
  
  // repeated float jcms = 5;
  inline int jcms_size() const;
  inline void clear_jcms();
  static const int kJcmsFieldNumber = 5;
  inline float jcms(int index) const;
  inline void set_jcms(int index, float value);
  inline void add_jcms(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      jcms() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_jcms();
  
  // repeated float jcls = 6;
  inline int jcls_size() const;
  inline void clear_jcls();
  static const int kJclsFieldNumber = 6;
  inline float jcls(int index) const;
  inline void set_jcls(int index, float value);
  inline void add_jcls(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      jcls() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_jcls();
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.ZLJC)
 private:
  inline void set_has_prevlow();
  inline void clear_has_prevlow();
  inline void set_has_prevjcs();
  inline void clear_has_prevjcs();
  inline void set_has_sumjcm();
  inline void clear_has_sumjcm();
  inline void set_has_sumjcl();
  inline void clear_has_sumjcl();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float prevlow_;
  float prevjcs_;
  float sumjcm_;
  float sumjcl_;
  ::google::protobuf::RepeatedField< float > jcms_;
  ::google::protobuf::RepeatedField< float > jcls_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static ZLJC* default_instance_;
};
// -------------------------------------------------------------------

class ASI : public ::google::protobuf::Message {
 public:
  ASI();
  virtual ~ASI();
  
  ASI(const ASI& from);
  
  inline ASI& operator=(const ASI& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ASI& default_instance();
  
  void Swap(ASI* other);
  
  // implements Message ----------------------------------------------
  
  ASI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ASI& from);
  void MergeFrom(const ASI& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float prevClose = 1;
  inline bool has_prevclose() const;
  inline void clear_prevclose();
  static const int kPrevCloseFieldNumber = 1;
  inline float prevclose() const;
  inline void set_prevclose(float value);
  
  // required float prevLow = 2;
  inline bool has_prevlow() const;
  inline void clear_prevlow();
  static const int kPrevLowFieldNumber = 2;
  inline float prevlow() const;
  inline void set_prevlow(float value);
  
  // required float prevOpen = 3;
  inline bool has_prevopen() const;
  inline void clear_prevopen();
  static const int kPrevOpenFieldNumber = 3;
  inline float prevopen() const;
  inline void set_prevopen(float value);
  
  // required float sumSi = 4;
  inline bool has_sumsi() const;
  inline void clear_sumsi();
  static const int kSumSiFieldNumber = 4;
  inline float sumsi() const;
  inline void set_sumsi(float value);
  
  // required float sumAsi = 5;
  inline bool has_sumasi() const;
  inline void clear_sumasi();
  static const int kSumAsiFieldNumber = 5;
  inline float sumasi() const;
  inline void set_sumasi(float value);
  
  // repeated float sis = 6;
  inline int sis_size() const;
  inline void clear_sis();
  static const int kSisFieldNumber = 6;
  inline float sis(int index) const;
  inline void set_sis(int index, float value);
  inline void add_sis(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      sis() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_sis();
  
  // repeated float asis = 7;
  inline int asis_size() const;
  inline void clear_asis();
  static const int kAsisFieldNumber = 7;
  inline float asis(int index) const;
  inline void set_asis(int index, float value);
  inline void add_asis(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      asis() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_asis();
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.ASI)
 private:
  inline void set_has_prevclose();
  inline void clear_has_prevclose();
  inline void set_has_prevlow();
  inline void clear_has_prevlow();
  inline void set_has_prevopen();
  inline void clear_has_prevopen();
  inline void set_has_sumsi();
  inline void clear_has_sumsi();
  inline void set_has_sumasi();
  inline void clear_has_sumasi();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float prevclose_;
  float prevlow_;
  float prevopen_;
  float sumsi_;
  ::google::protobuf::RepeatedField< float > sis_;
  ::google::protobuf::RepeatedField< float > asis_;
  float sumasi_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static ASI* default_instance_;
};
// -------------------------------------------------------------------

class DMI : public ::google::protobuf::Message {
 public:
  DMI();
  virtual ~DMI();
  
  DMI(const DMI& from);
  
  inline DMI& operator=(const DMI& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DMI& default_instance();
  
  void Swap(DMI* other);
  
  // implements Message ----------------------------------------------
  
  DMI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DMI& from);
  void MergeFrom(const DMI& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float prevClose = 1;
  inline bool has_prevclose() const;
  inline void clear_prevclose();
  static const int kPrevCloseFieldNumber = 1;
  inline float prevclose() const;
  inline void set_prevclose(float value);
  
  // required float prevLow = 2;
  inline bool has_prevlow() const;
  inline void clear_prevlow();
  static const int kPrevLowFieldNumber = 2;
  inline float prevlow() const;
  inline void set_prevlow(float value);
  
  // required float prevHigh = 3;
  inline bool has_prevhigh() const;
  inline void clear_prevhigh();
  static const int kPrevHighFieldNumber = 3;
  inline float prevhigh() const;
  inline void set_prevhigh(float value);
  
  // required float sumTr = 4;
  inline bool has_sumtr() const;
  inline void clear_sumtr();
  static const int kSumTrFieldNumber = 4;
  inline float sumtr() const;
  inline void set_sumtr(float value);
  
  // repeated float midtrs = 5;
  inline int midtrs_size() const;
  inline void clear_midtrs();
  static const int kMidtrsFieldNumber = 5;
  inline float midtrs(int index) const;
  inline void set_midtrs(int index, float value);
  inline void add_midtrs(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      midtrs() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_midtrs();
  
  // required float sumDmp = 6;
  inline bool has_sumdmp() const;
  inline void clear_sumdmp();
  static const int kSumDmpFieldNumber = 6;
  inline float sumdmp() const;
  inline void set_sumdmp(float value);
  
  // repeated float middmps = 7;
  inline int middmps_size() const;
  inline void clear_middmps();
  static const int kMiddmpsFieldNumber = 7;
  inline float middmps(int index) const;
  inline void set_middmps(int index, float value);
  inline void add_middmps(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      middmps() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_middmps();
  
  // required float sumDmm = 8;
  inline bool has_sumdmm() const;
  inline void clear_sumdmm();
  static const int kSumDmmFieldNumber = 8;
  inline float sumdmm() const;
  inline void set_sumdmm(float value);
  
  // repeated float middmms = 9;
  inline int middmms_size() const;
  inline void clear_middmms();
  static const int kMiddmmsFieldNumber = 9;
  inline float middmms(int index) const;
  inline void set_middmms(int index, float value);
  inline void add_middmms(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      middmms() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_middmms();
  
  // required float sumAdx = 10;
  inline bool has_sumadx() const;
  inline void clear_sumadx();
  static const int kSumAdxFieldNumber = 10;
  inline float sumadx() const;
  inline void set_sumadx(float value);
  
  // repeated float midadxs = 11;
  inline int midadxs_size() const;
  inline void clear_midadxs();
  static const int kMidadxsFieldNumber = 11;
  inline float midadxs(int index) const;
  inline void set_midadxs(int index, float value);
  inline void add_midadxs(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      midadxs() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_midadxs();
  
  // repeated float adxs = 12;
  inline int adxs_size() const;
  inline void clear_adxs();
  static const int kAdxsFieldNumber = 12;
  inline float adxs(int index) const;
  inline void set_adxs(int index, float value);
  inline void add_adxs(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      adxs() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_adxs();
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.DMI)
 private:
  inline void set_has_prevclose();
  inline void clear_has_prevclose();
  inline void set_has_prevlow();
  inline void clear_has_prevlow();
  inline void set_has_prevhigh();
  inline void clear_has_prevhigh();
  inline void set_has_sumtr();
  inline void clear_has_sumtr();
  inline void set_has_sumdmp();
  inline void clear_has_sumdmp();
  inline void set_has_sumdmm();
  inline void clear_has_sumdmm();
  inline void set_has_sumadx();
  inline void clear_has_sumadx();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float prevclose_;
  float prevlow_;
  float prevhigh_;
  float sumtr_;
  ::google::protobuf::RepeatedField< float > midtrs_;
  ::google::protobuf::RepeatedField< float > middmps_;
  float sumdmp_;
  float sumdmm_;
  ::google::protobuf::RepeatedField< float > middmms_;
  ::google::protobuf::RepeatedField< float > midadxs_;
  ::google::protobuf::RepeatedField< float > adxs_;
  float sumadx_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static DMI* default_instance_;
};
// -------------------------------------------------------------------

class PVT : public ::google::protobuf::Message {
 public:
  PVT();
  virtual ~PVT();
  
  PVT(const PVT& from);
  
  inline PVT& operator=(const PVT& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PVT& default_instance();
  
  void Swap(PVT* other);
  
  // implements Message ----------------------------------------------
  
  PVT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVT& from);
  void MergeFrom(const PVT& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float prevClose = 1;
  inline bool has_prevclose() const;
  inline void clear_prevclose();
  static const int kPrevCloseFieldNumber = 1;
  inline float prevclose() const;
  inline void set_prevclose(float value);
  
  // required double prevPvt = 2;
  inline bool has_prevpvt() const;
  inline void clear_prevpvt();
  static const int kPrevPvtFieldNumber = 2;
  inline double prevpvt() const;
  inline void set_prevpvt(double value);
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.PVT)
 private:
  inline void set_has_prevclose();
  inline void clear_has_prevclose();
  inline void set_has_prevpvt();
  inline void clear_has_prevpvt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double prevpvt_;
  float prevclose_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static PVT* default_instance_;
};
// -------------------------------------------------------------------

class PBX : public ::google::protobuf::Message {
 public:
  PBX();
  virtual ~PBX();
  
  PBX(const PBX& from);
  
  inline PBX& operator=(const PBX& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBX& default_instance();
  
  void Swap(PBX* other);
  
  // implements Message ----------------------------------------------
  
  PBX* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBX& from);
  void MergeFrom(const PBX& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float prevEma1 = 1;
  inline bool has_prevema1() const;
  inline void clear_prevema1();
  static const int kPrevEma1FieldNumber = 1;
  inline float prevema1() const;
  inline void set_prevema1(float value);
  
  // required float prevEma2 = 2;
  inline bool has_prevema2() const;
  inline void clear_prevema2();
  static const int kPrevEma2FieldNumber = 2;
  inline float prevema2() const;
  inline void set_prevema2(float value);
  
  // required float prevEma3 = 3;
  inline bool has_prevema3() const;
  inline void clear_prevema3();
  static const int kPrevEma3FieldNumber = 3;
  inline float prevema3() const;
  inline void set_prevema3(float value);
  
  // required float prevEma4 = 4;
  inline bool has_prevema4() const;
  inline void clear_prevema4();
  static const int kPrevEma4FieldNumber = 4;
  inline float prevema4() const;
  inline void set_prevema4(float value);
  
  // required float prevEma5 = 5;
  inline bool has_prevema5() const;
  inline void clear_prevema5();
  static const int kPrevEma5FieldNumber = 5;
  inline float prevema5() const;
  inline void set_prevema5(float value);
  
  // required float prevEma6 = 6;
  inline bool has_prevema6() const;
  inline void clear_prevema6();
  static const int kPrevEma6FieldNumber = 6;
  inline float prevema6() const;
  inline void set_prevema6(float value);
  
  // required float sumShort1 = 7;
  inline bool has_sumshort1() const;
  inline void clear_sumshort1();
  static const int kSumShort1FieldNumber = 7;
  inline float sumshort1() const;
  inline void set_sumshort1(float value);
  
  // required float sumShort2 = 8;
  inline bool has_sumshort2() const;
  inline void clear_sumshort2();
  static const int kSumShort2FieldNumber = 8;
  inline float sumshort2() const;
  inline void set_sumshort2(float value);
  
  // required float sumShort3 = 9;
  inline bool has_sumshort3() const;
  inline void clear_sumshort3();
  static const int kSumShort3FieldNumber = 9;
  inline float sumshort3() const;
  inline void set_sumshort3(float value);
  
  // required float sumShort4 = 10;
  inline bool has_sumshort4() const;
  inline void clear_sumshort4();
  static const int kSumShort4FieldNumber = 10;
  inline float sumshort4() const;
  inline void set_sumshort4(float value);
  
  // required float sumShort5 = 11;
  inline bool has_sumshort5() const;
  inline void clear_sumshort5();
  static const int kSumShort5FieldNumber = 11;
  inline float sumshort5() const;
  inline void set_sumshort5(float value);
  
  // required float sumShort6 = 12;
  inline bool has_sumshort6() const;
  inline void clear_sumshort6();
  static const int kSumShort6FieldNumber = 12;
  inline float sumshort6() const;
  inline void set_sumshort6(float value);
  
  // required float sumLong1 = 13;
  inline bool has_sumlong1() const;
  inline void clear_sumlong1();
  static const int kSumLong1FieldNumber = 13;
  inline float sumlong1() const;
  inline void set_sumlong1(float value);
  
  // required float sumLong2 = 14;
  inline bool has_sumlong2() const;
  inline void clear_sumlong2();
  static const int kSumLong2FieldNumber = 14;
  inline float sumlong2() const;
  inline void set_sumlong2(float value);
  
  // required float sumLong3 = 15;
  inline bool has_sumlong3() const;
  inline void clear_sumlong3();
  static const int kSumLong3FieldNumber = 15;
  inline float sumlong3() const;
  inline void set_sumlong3(float value);
  
  // required float sumLong4 = 16;
  inline bool has_sumlong4() const;
  inline void clear_sumlong4();
  static const int kSumLong4FieldNumber = 16;
  inline float sumlong4() const;
  inline void set_sumlong4(float value);
  
  // required float sumLong5 = 17;
  inline bool has_sumlong5() const;
  inline void clear_sumlong5();
  static const int kSumLong5FieldNumber = 17;
  inline float sumlong5() const;
  inline void set_sumlong5(float value);
  
  // required float sumLong6 = 18;
  inline bool has_sumlong6() const;
  inline void clear_sumlong6();
  static const int kSumLong6FieldNumber = 18;
  inline float sumlong6() const;
  inline void set_sumlong6(float value);
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.PBX)
 private:
  inline void set_has_prevema1();
  inline void clear_has_prevema1();
  inline void set_has_prevema2();
  inline void clear_has_prevema2();
  inline void set_has_prevema3();
  inline void clear_has_prevema3();
  inline void set_has_prevema4();
  inline void clear_has_prevema4();
  inline void set_has_prevema5();
  inline void clear_has_prevema5();
  inline void set_has_prevema6();
  inline void clear_has_prevema6();
  inline void set_has_sumshort1();
  inline void clear_has_sumshort1();
  inline void set_has_sumshort2();
  inline void clear_has_sumshort2();
  inline void set_has_sumshort3();
  inline void clear_has_sumshort3();
  inline void set_has_sumshort4();
  inline void clear_has_sumshort4();
  inline void set_has_sumshort5();
  inline void clear_has_sumshort5();
  inline void set_has_sumshort6();
  inline void clear_has_sumshort6();
  inline void set_has_sumlong1();
  inline void clear_has_sumlong1();
  inline void set_has_sumlong2();
  inline void clear_has_sumlong2();
  inline void set_has_sumlong3();
  inline void clear_has_sumlong3();
  inline void set_has_sumlong4();
  inline void clear_has_sumlong4();
  inline void set_has_sumlong5();
  inline void clear_has_sumlong5();
  inline void set_has_sumlong6();
  inline void clear_has_sumlong6();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float prevema1_;
  float prevema2_;
  float prevema3_;
  float prevema4_;
  float prevema5_;
  float prevema6_;
  float sumshort1_;
  float sumshort2_;
  float sumshort3_;
  float sumshort4_;
  float sumshort5_;
  float sumshort6_;
  float sumlong1_;
  float sumlong2_;
  float sumlong3_;
  float sumlong4_;
  float sumlong5_;
  float sumlong6_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static PBX* default_instance_;
};
// -------------------------------------------------------------------

class SKDJ : public ::google::protobuf::Message {
 public:
  SKDJ();
  virtual ~SKDJ();
  
  SKDJ(const SKDJ& from);
  
  inline SKDJ& operator=(const SKDJ& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SKDJ& default_instance();
  
  void Swap(SKDJ* other);
  
  // implements Message ----------------------------------------------
  
  SKDJ* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SKDJ& from);
  void MergeFrom(const SKDJ& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float hhv = 1;
  inline bool has_hhv() const;
  inline void clear_hhv();
  static const int kHhvFieldNumber = 1;
  inline float hhv() const;
  inline void set_hhv(float value);
  
  // required float llv = 2;
  inline bool has_llv() const;
  inline void clear_llv();
  static const int kLlvFieldNumber = 2;
  inline float llv() const;
  inline void set_llv(float value);
  
  // repeated float hhvs = 3;
  inline int hhvs_size() const;
  inline void clear_hhvs();
  static const int kHhvsFieldNumber = 3;
  inline float hhvs(int index) const;
  inline void set_hhvs(int index, float value);
  inline void add_hhvs(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      hhvs() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_hhvs();
  
  // repeated float llvs = 4;
  inline int llvs_size() const;
  inline void clear_llvs();
  static const int kLlvsFieldNumber = 4;
  inline float llvs(int index) const;
  inline void set_llvs(int index, float value);
  inline void add_llvs(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      llvs() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_llvs();
  
  // required float k = 5;
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 5;
  inline float k() const;
  inline void set_k(float value);
  
  // required float d = 6;
  inline bool has_d() const;
  inline void clear_d();
  static const int kDFieldNumber = 6;
  inline float d() const;
  inline void set_d(float value);
  
  // required float fastk = 7;
  inline bool has_fastk() const;
  inline void clear_fastk();
  static const int kFastkFieldNumber = 7;
  inline float fastk() const;
  inline void set_fastk(float value);
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.SKDJ)
 private:
  inline void set_has_hhv();
  inline void clear_has_hhv();
  inline void set_has_llv();
  inline void clear_has_llv();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_d();
  inline void clear_has_d();
  inline void set_has_fastk();
  inline void clear_has_fastk();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float hhv_;
  float llv_;
  ::google::protobuf::RepeatedField< float > hhvs_;
  ::google::protobuf::RepeatedField< float > llvs_;
  float k_;
  float d_;
  float fastk_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static SKDJ* default_instance_;
};
// -------------------------------------------------------------------

class MIDVAL : public ::google::protobuf::Message {
 public:
  MIDVAL();
  virtual ~MIDVAL();
  
  MIDVAL(const MIDVAL& from);
  
  inline MIDVAL& operator=(const MIDVAL& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MIDVAL& default_instance();
  
  void Swap(MIDVAL* other);
  
  // implements Message ----------------------------------------------
  
  MIDVAL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MIDVAL& from);
  void MergeFrom(const MIDVAL& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string date = 1;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 1;
  inline const ::std::string& date() const;
  inline void set_date(const ::std::string& value);
  inline void set_date(const char* value);
  inline void set_date(const char* value, size_t size);
  inline ::std::string* mutable_date();
  inline ::std::string* release_date();
  
  // required float open = 2;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 2;
  inline float open() const;
  inline void set_open(float value);
  
  // required float high = 3;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 3;
  inline float high() const;
  inline void set_high(float value);
  
  // required float low = 4;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 4;
  inline float low() const;
  inline void set_low(float value);
  
  // required float close = 5;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 5;
  inline float close() const;
  inline void set_close(float value);
  
  // required float zjcj = 6;
  inline bool has_zjcj() const;
  inline void clear_zjcj();
  static const int kZjcjFieldNumber = 6;
  inline float zjcj() const;
  inline void set_zjcj(float value);
  
  // required double cjsl = 7;
  inline bool has_cjsl() const;
  inline void clear_cjsl();
  static const int kCjslFieldNumber = 7;
  inline double cjsl() const;
  inline void set_cjsl(double value);
  
  // required double cjje = 8;
  inline bool has_cjje() const;
  inline void clear_cjje();
  static const int kCjjeFieldNumber = 8;
  inline double cjje() const;
  inline void set_cjje(double value);
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.MIDVAL)
 private:
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_zjcj();
  inline void clear_has_zjcj();
  inline void set_has_cjsl();
  inline void clear_has_cjsl();
  inline void set_has_cjje();
  inline void clear_has_cjje();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* date_;
  float open_;
  float high_;
  float low_;
  float close_;
  double cjsl_;
  double cjje_;
  float zjcj_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static MIDVAL* default_instance_;
};
// -------------------------------------------------------------------

class KLINEIDX : public ::google::protobuf::Message {
 public:
  KLINEIDX();
  virtual ~KLINEIDX();
  
  KLINEIDX(const KLINEIDX& from);
  
  inline KLINEIDX& operator=(const KLINEIDX& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KLINEIDX& default_instance();
  
  void Swap(KLINEIDX* other);
  
  // implements Message ----------------------------------------------
  
  KLINEIDX* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KLINEIDX& from);
  void MergeFrom(const KLINEIDX& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 date = 1;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 1;
  inline ::google::protobuf::int32 date() const;
  inline void set_date(::google::protobuf::int32 value);
  
  // required int32 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.KLINEIDX)
 private:
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_offset();
  inline void clear_has_offset();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 date_;
  ::google::protobuf::int32 offset_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static KLINEIDX* default_instance_;
};
// -------------------------------------------------------------------

class TEMP : public ::google::protobuf::Message {
 public:
  TEMP();
  virtual ~TEMP();
  
  TEMP(const TEMP& from);
  
  inline TEMP& operator=(const TEMP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TEMP& default_instance();
  
  void Swap(TEMP* other);
  
  // implements Message ----------------------------------------------
  
  TEMP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEMP& from);
  void MergeFrom(const TEMP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .cssweb.kline.mid.MA ma = 1;
  inline bool has_ma() const;
  inline void clear_ma();
  static const int kMaFieldNumber = 1;
  inline const ::cssweb::kline::mid::MA& ma() const;
  inline ::cssweb::kline::mid::MA* mutable_ma();
  inline ::cssweb::kline::mid::MA* release_ma();
  
  // optional .cssweb.kline.mid.MACD macd = 2;
  inline bool has_macd() const;
  inline void clear_macd();
  static const int kMacdFieldNumber = 2;
  inline const ::cssweb::kline::mid::MACD& macd() const;
  inline ::cssweb::kline::mid::MACD* mutable_macd();
  inline ::cssweb::kline::mid::MACD* release_macd();
  
  // optional .cssweb.kline.mid.CCI cci = 3;
  inline bool has_cci() const;
  inline void clear_cci();
  static const int kCciFieldNumber = 3;
  inline const ::cssweb::kline::mid::CCI& cci() const;
  inline ::cssweb::kline::mid::CCI* mutable_cci();
  inline ::cssweb::kline::mid::CCI* release_cci();
  
  // optional .cssweb.kline.mid.BIAS bias = 4;
  inline bool has_bias() const;
  inline void clear_bias();
  static const int kBiasFieldNumber = 4;
  inline const ::cssweb::kline::mid::BIAS& bias() const;
  inline ::cssweb::kline::mid::BIAS* mutable_bias();
  inline ::cssweb::kline::mid::BIAS* release_bias();
  
  // optional .cssweb.kline.mid.KDJ kdj = 5;
  inline bool has_kdj() const;
  inline void clear_kdj();
  static const int kKdjFieldNumber = 5;
  inline const ::cssweb::kline::mid::KDJ& kdj() const;
  inline ::cssweb::kline::mid::KDJ* mutable_kdj();
  inline ::cssweb::kline::mid::KDJ* release_kdj();
  
  // optional .cssweb.kline.mid.RSI rsi = 6;
  inline bool has_rsi() const;
  inline void clear_rsi();
  static const int kRsiFieldNumber = 6;
  inline const ::cssweb::kline::mid::RSI& rsi() const;
  inline ::cssweb::kline::mid::RSI* mutable_rsi();
  inline ::cssweb::kline::mid::RSI* release_rsi();
  
  // optional .cssweb.kline.mid.OBV obv = 7;
  inline bool has_obv() const;
  inline void clear_obv();
  static const int kObvFieldNumber = 7;
  inline const ::cssweb::kline::mid::OBV& obv() const;
  inline ::cssweb::kline::mid::OBV* mutable_obv();
  inline ::cssweb::kline::mid::OBV* release_obv();
  
  // optional .cssweb.kline.mid.BOLL boll = 8;
  inline bool has_boll() const;
  inline void clear_boll();
  static const int kBollFieldNumber = 8;
  inline const ::cssweb::kline::mid::BOLL& boll() const;
  inline ::cssweb::kline::mid::BOLL* mutable_boll();
  inline ::cssweb::kline::mid::BOLL* release_boll();
  
  // optional .cssweb.kline.mid.PSY psy = 9;
  inline bool has_psy() const;
  inline void clear_psy();
  static const int kPsyFieldNumber = 9;
  inline const ::cssweb::kline::mid::PSY& psy() const;
  inline ::cssweb::kline::mid::PSY* mutable_psy();
  inline ::cssweb::kline::mid::PSY* release_psy();
  
  // optional .cssweb.kline.mid.ROC roc = 10;
  inline bool has_roc() const;
  inline void clear_roc();
  static const int kRocFieldNumber = 10;
  inline const ::cssweb::kline::mid::ROC& roc() const;
  inline ::cssweb::kline::mid::ROC* mutable_roc();
  inline ::cssweb::kline::mid::ROC* release_roc();
  
  // optional .cssweb.kline.mid.WR wr = 11;
  inline bool has_wr() const;
  inline void clear_wr();
  static const int kWrFieldNumber = 11;
  inline const ::cssweb::kline::mid::WR& wr() const;
  inline ::cssweb::kline::mid::WR* mutable_wr();
  inline ::cssweb::kline::mid::WR* release_wr();
  
  // optional .cssweb.kline.mid.VR vr = 12;
  inline bool has_vr() const;
  inline void clear_vr();
  static const int kVrFieldNumber = 12;
  inline const ::cssweb::kline::mid::VR& vr() const;
  inline ::cssweb::kline::mid::VR* mutable_vr();
  inline ::cssweb::kline::mid::VR* release_vr();
  
  // optional .cssweb.kline.mid.ARBR arbr = 13;
  inline bool has_arbr() const;
  inline void clear_arbr();
  static const int kArbrFieldNumber = 13;
  inline const ::cssweb::kline::mid::ARBR& arbr() const;
  inline ::cssweb::kline::mid::ARBR* mutable_arbr();
  inline ::cssweb::kline::mid::ARBR* release_arbr();
  
  // optional .cssweb.kline.mid.CR cr = 14;
  inline bool has_cr() const;
  inline void clear_cr();
  static const int kCrFieldNumber = 14;
  inline const ::cssweb::kline::mid::CR& cr() const;
  inline ::cssweb::kline::mid::CR* mutable_cr();
  inline ::cssweb::kline::mid::CR* release_cr();
  
  // optional .cssweb.kline.mid.CDP cdp = 15;
  inline bool has_cdp() const;
  inline void clear_cdp();
  static const int kCdpFieldNumber = 15;
  inline const ::cssweb::kline::mid::CDP& cdp() const;
  inline ::cssweb::kline::mid::CDP* mutable_cdp();
  inline ::cssweb::kline::mid::CDP* release_cdp();
  
  // optional .cssweb.kline.mid.DMA dma = 16;
  inline bool has_dma() const;
  inline void clear_dma();
  static const int kDmaFieldNumber = 16;
  inline const ::cssweb::kline::mid::DMA& dma() const;
  inline ::cssweb::kline::mid::DMA* mutable_dma();
  inline ::cssweb::kline::mid::DMA* release_dma();
  
  // optional .cssweb.kline.mid.MTM mtm = 17;
  inline bool has_mtm() const;
  inline void clear_mtm();
  static const int kMtmFieldNumber = 17;
  inline const ::cssweb::kline::mid::MTM& mtm() const;
  inline ::cssweb::kline::mid::MTM* mutable_mtm();
  inline ::cssweb::kline::mid::MTM* release_mtm();
  
  // optional .cssweb.kline.mid.BBI bbi = 18;
  inline bool has_bbi() const;
  inline void clear_bbi();
  static const int kBbiFieldNumber = 18;
  inline const ::cssweb::kline::mid::BBI& bbi() const;
  inline ::cssweb::kline::mid::BBI* mutable_bbi();
  inline ::cssweb::kline::mid::BBI* release_bbi();
  
  // optional .cssweb.kline.mid.TRIX trix = 19;
  inline bool has_trix() const;
  inline void clear_trix();
  static const int kTrixFieldNumber = 19;
  inline const ::cssweb::kline::mid::TRIX& trix() const;
  inline ::cssweb::kline::mid::TRIX* mutable_trix();
  inline ::cssweb::kline::mid::TRIX* release_trix();
  
  // optional .cssweb.kline.mid.ZLJC zljc = 20;
  inline bool has_zljc() const;
  inline void clear_zljc();
  static const int kZljcFieldNumber = 20;
  inline const ::cssweb::kline::mid::ZLJC& zljc() const;
  inline ::cssweb::kline::mid::ZLJC* mutable_zljc();
  inline ::cssweb::kline::mid::ZLJC* release_zljc();
  
  // optional .cssweb.kline.mid.ASI asi = 21;
  inline bool has_asi() const;
  inline void clear_asi();
  static const int kAsiFieldNumber = 21;
  inline const ::cssweb::kline::mid::ASI& asi() const;
  inline ::cssweb::kline::mid::ASI* mutable_asi();
  inline ::cssweb::kline::mid::ASI* release_asi();
  
  // optional .cssweb.kline.mid.EXPMA ema = 22;
  inline bool has_ema() const;
  inline void clear_ema();
  static const int kEmaFieldNumber = 22;
  inline const ::cssweb::kline::mid::EXPMA& ema() const;
  inline ::cssweb::kline::mid::EXPMA* mutable_ema();
  inline ::cssweb::kline::mid::EXPMA* release_ema();
  
  // optional .cssweb.kline.mid.DMI dmi = 23;
  inline bool has_dmi() const;
  inline void clear_dmi();
  static const int kDmiFieldNumber = 23;
  inline const ::cssweb::kline::mid::DMI& dmi() const;
  inline ::cssweb::kline::mid::DMI* mutable_dmi();
  inline ::cssweb::kline::mid::DMI* release_dmi();
  
  // optional .cssweb.kline.mid.PVT pvt = 24;
  inline bool has_pvt() const;
  inline void clear_pvt();
  static const int kPvtFieldNumber = 24;
  inline const ::cssweb::kline::mid::PVT& pvt() const;
  inline ::cssweb::kline::mid::PVT* mutable_pvt();
  inline ::cssweb::kline::mid::PVT* release_pvt();
  
  // optional .cssweb.kline.mid.PBX pbx = 25;
  inline bool has_pbx() const;
  inline void clear_pbx();
  static const int kPbxFieldNumber = 25;
  inline const ::cssweb::kline::mid::PBX& pbx() const;
  inline ::cssweb::kline::mid::PBX* mutable_pbx();
  inline ::cssweb::kline::mid::PBX* release_pbx();
  
  // optional .cssweb.kline.mid.SKDJ skdj = 26;
  inline bool has_skdj() const;
  inline void clear_skdj();
  static const int kSkdjFieldNumber = 26;
  inline const ::cssweb::kline::mid::SKDJ& skdj() const;
  inline ::cssweb::kline::mid::SKDJ* mutable_skdj();
  inline ::cssweb::kline::mid::SKDJ* release_skdj();
  
  // optional int32 file = 27;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 27;
  inline ::google::protobuf::int32 file() const;
  inline void set_file(::google::protobuf::int32 value);
  
  // optional string quotetime = 28;
  inline bool has_quotetime() const;
  inline void clear_quotetime();
  static const int kQuotetimeFieldNumber = 28;
  inline const ::std::string& quotetime() const;
  inline void set_quotetime(const ::std::string& value);
  inline void set_quotetime(const char* value);
  inline void set_quotetime(const char* value, size_t size);
  inline ::std::string* mutable_quotetime();
  inline ::std::string* release_quotetime();
  
  // optional .cssweb.kline.mid.MIDVAL midval = 29;
  inline bool has_midval() const;
  inline void clear_midval();
  static const int kMidvalFieldNumber = 29;
  inline const ::cssweb::kline::mid::MIDVAL& midval() const;
  inline ::cssweb::kline::mid::MIDVAL* mutable_midval();
  inline ::cssweb::kline::mid::MIDVAL* release_midval();
  
  // optional int32 linenum = 30;
  inline bool has_linenum() const;
  inline void clear_linenum();
  static const int kLinenumFieldNumber = 30;
  inline ::google::protobuf::int32 linenum() const;
  inline void set_linenum(::google::protobuf::int32 value);
  
  // repeated .cssweb.kline.mid.KLINEIDX klineIdx = 31;
  inline int klineidx_size() const;
  inline void clear_klineidx();
  static const int kKlineIdxFieldNumber = 31;
  inline const ::cssweb::kline::mid::KLINEIDX& klineidx(int index) const;
  inline ::cssweb::kline::mid::KLINEIDX* mutable_klineidx(int index);
  inline ::cssweb::kline::mid::KLINEIDX* add_klineidx();
  inline const ::google::protobuf::RepeatedPtrField< ::cssweb::kline::mid::KLINEIDX >&
      klineidx() const;
  inline ::google::protobuf::RepeatedPtrField< ::cssweb::kline::mid::KLINEIDX >*
      mutable_klineidx();
  
  // @@protoc_insertion_point(class_scope:cssweb.kline.mid.TEMP)
 private:
  inline void set_has_ma();
  inline void clear_has_ma();
  inline void set_has_macd();
  inline void clear_has_macd();
  inline void set_has_cci();
  inline void clear_has_cci();
  inline void set_has_bias();
  inline void clear_has_bias();
  inline void set_has_kdj();
  inline void clear_has_kdj();
  inline void set_has_rsi();
  inline void clear_has_rsi();
  inline void set_has_obv();
  inline void clear_has_obv();
  inline void set_has_boll();
  inline void clear_has_boll();
  inline void set_has_psy();
  inline void clear_has_psy();
  inline void set_has_roc();
  inline void clear_has_roc();
  inline void set_has_wr();
  inline void clear_has_wr();
  inline void set_has_vr();
  inline void clear_has_vr();
  inline void set_has_arbr();
  inline void clear_has_arbr();
  inline void set_has_cr();
  inline void clear_has_cr();
  inline void set_has_cdp();
  inline void clear_has_cdp();
  inline void set_has_dma();
  inline void clear_has_dma();
  inline void set_has_mtm();
  inline void clear_has_mtm();
  inline void set_has_bbi();
  inline void clear_has_bbi();
  inline void set_has_trix();
  inline void clear_has_trix();
  inline void set_has_zljc();
  inline void clear_has_zljc();
  inline void set_has_asi();
  inline void clear_has_asi();
  inline void set_has_ema();
  inline void clear_has_ema();
  inline void set_has_dmi();
  inline void clear_has_dmi();
  inline void set_has_pvt();
  inline void clear_has_pvt();
  inline void set_has_pbx();
  inline void clear_has_pbx();
  inline void set_has_skdj();
  inline void clear_has_skdj();
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_quotetime();
  inline void clear_has_quotetime();
  inline void set_has_midval();
  inline void clear_has_midval();
  inline void set_has_linenum();
  inline void clear_has_linenum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::cssweb::kline::mid::MA* ma_;
  ::cssweb::kline::mid::MACD* macd_;
  ::cssweb::kline::mid::CCI* cci_;
  ::cssweb::kline::mid::BIAS* bias_;
  ::cssweb::kline::mid::KDJ* kdj_;
  ::cssweb::kline::mid::RSI* rsi_;
  ::cssweb::kline::mid::OBV* obv_;
  ::cssweb::kline::mid::BOLL* boll_;
  ::cssweb::kline::mid::PSY* psy_;
  ::cssweb::kline::mid::ROC* roc_;
  ::cssweb::kline::mid::WR* wr_;
  ::cssweb::kline::mid::VR* vr_;
  ::cssweb::kline::mid::ARBR* arbr_;
  ::cssweb::kline::mid::CR* cr_;
  ::cssweb::kline::mid::CDP* cdp_;
  ::cssweb::kline::mid::DMA* dma_;
  ::cssweb::kline::mid::MTM* mtm_;
  ::cssweb::kline::mid::BBI* bbi_;
  ::cssweb::kline::mid::TRIX* trix_;
  ::cssweb::kline::mid::ZLJC* zljc_;
  ::cssweb::kline::mid::ASI* asi_;
  ::cssweb::kline::mid::EXPMA* ema_;
  ::cssweb::kline::mid::DMI* dmi_;
  ::cssweb::kline::mid::PVT* pvt_;
  ::cssweb::kline::mid::PBX* pbx_;
  ::cssweb::kline::mid::SKDJ* skdj_;
  ::std::string* quotetime_;
  ::google::protobuf::int32 file_;
  ::google::protobuf::int32 linenum_;
  ::cssweb::kline::mid::MIDVAL* midval_;
  ::google::protobuf::RepeatedPtrField< ::cssweb::kline::mid::KLINEIDX > klineidx_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(31 + 31) / 32];
  
  friend void  protobuf_AddDesc_idxtemp_2eproto();
  friend void protobuf_AssignDesc_idxtemp_2eproto();
  friend void protobuf_ShutdownFile_idxtemp_2eproto();
  
  void InitAsDefaultInstance();
  static TEMP* default_instance_;
};
// ===================================================================


// ===================================================================

// MA

// required double sumMa4 = 1;
inline bool MA::has_summa4() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MA::set_has_summa4() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MA::clear_has_summa4() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MA::clear_summa4() {
  summa4_ = 0;
  clear_has_summa4();
}
inline double MA::summa4() const {
  return summa4_;
}
inline void MA::set_summa4(double value) {
  set_has_summa4();
  summa4_ = value;
}

// required double sumMa9 = 2;
inline bool MA::has_summa9() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MA::set_has_summa9() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MA::clear_has_summa9() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MA::clear_summa9() {
  summa9_ = 0;
  clear_has_summa9();
}
inline double MA::summa9() const {
  return summa9_;
}
inline void MA::set_summa9(double value) {
  set_has_summa9();
  summa9_ = value;
}

// required double sumMa19 = 3;
inline bool MA::has_summa19() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MA::set_has_summa19() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MA::clear_has_summa19() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MA::clear_summa19() {
  summa19_ = 0;
  clear_has_summa19();
}
inline double MA::summa19() const {
  return summa19_;
}
inline void MA::set_summa19(double value) {
  set_has_summa19();
  summa19_ = value;
}

// required double sumMa59 = 4;
inline bool MA::has_summa59() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MA::set_has_summa59() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MA::clear_has_summa59() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MA::clear_summa59() {
  summa59_ = 0;
  clear_has_summa59();
}
inline double MA::summa59() const {
  return summa59_;
}
inline void MA::set_summa59(double value) {
  set_has_summa59();
  summa59_ = value;
}

// required double sumMavol4 = 5;
inline bool MA::has_summavol4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MA::set_has_summavol4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MA::clear_has_summavol4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MA::clear_summavol4() {
  summavol4_ = 0;
  clear_has_summavol4();
}
inline double MA::summavol4() const {
  return summavol4_;
}
inline void MA::set_summavol4(double value) {
  set_has_summavol4();
  summavol4_ = value;
}

// required double sumMavol9 = 6;
inline bool MA::has_summavol9() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MA::set_has_summavol9() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MA::clear_has_summavol9() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MA::clear_summavol9() {
  summavol9_ = 0;
  clear_has_summavol9();
}
inline double MA::summavol9() const {
  return summavol9_;
}
inline void MA::set_summavol9(double value) {
  set_has_summavol9();
  summavol9_ = value;
}

// -------------------------------------------------------------------

// MACD

// required float emaShort = 1;
inline bool MACD::has_emashort() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MACD::set_has_emashort() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MACD::clear_has_emashort() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MACD::clear_emashort() {
  emashort_ = 0;
  clear_has_emashort();
}
inline float MACD::emashort() const {
  return emashort_;
}
inline void MACD::set_emashort(float value) {
  set_has_emashort();
  emashort_ = value;
}

// required float emaLong = 2;
inline bool MACD::has_emalong() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MACD::set_has_emalong() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MACD::clear_has_emalong() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MACD::clear_emalong() {
  emalong_ = 0;
  clear_has_emalong();
}
inline float MACD::emalong() const {
  return emalong_;
}
inline void MACD::set_emalong(float value) {
  set_has_emalong();
  emalong_ = value;
}

// required float dea = 3;
inline bool MACD::has_dea() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MACD::set_has_dea() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MACD::clear_has_dea() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MACD::clear_dea() {
  dea_ = 0;
  clear_has_dea();
}
inline float MACD::dea() const {
  return dea_;
}
inline void MACD::set_dea(float value) {
  set_has_dea();
  dea_ = value;
}

// -------------------------------------------------------------------

// CCI

// repeated float typ = 1;
inline int CCI::typ_size() const {
  return typ_.size();
}
inline void CCI::clear_typ() {
  typ_.Clear();
}
inline float CCI::typ(int index) const {
  return typ_.Get(index);
}
inline void CCI::set_typ(int index, float value) {
  typ_.Set(index, value);
}
inline void CCI::add_typ(float value) {
  typ_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
CCI::typ() const {
  return typ_;
}
inline ::google::protobuf::RepeatedField< float >*
CCI::mutable_typ() {
  return &typ_;
}

// -------------------------------------------------------------------

// BIAS

// required float sum5 = 1;
inline bool BIAS::has_sum5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BIAS::set_has_sum5() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BIAS::clear_has_sum5() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BIAS::clear_sum5() {
  sum5_ = 0;
  clear_has_sum5();
}
inline float BIAS::sum5() const {
  return sum5_;
}
inline void BIAS::set_sum5(float value) {
  set_has_sum5();
  sum5_ = value;
}

// required float sum11 = 2;
inline bool BIAS::has_sum11() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BIAS::set_has_sum11() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BIAS::clear_has_sum11() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BIAS::clear_sum11() {
  sum11_ = 0;
  clear_has_sum11();
}
inline float BIAS::sum11() const {
  return sum11_;
}
inline void BIAS::set_sum11(float value) {
  set_has_sum11();
  sum11_ = value;
}

// required float sum23 = 3;
inline bool BIAS::has_sum23() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BIAS::set_has_sum23() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BIAS::clear_has_sum23() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BIAS::clear_sum23() {
  sum23_ = 0;
  clear_has_sum23();
}
inline float BIAS::sum23() const {
  return sum23_;
}
inline void BIAS::set_sum23(float value) {
  set_has_sum23();
  sum23_ = value;
}

// -------------------------------------------------------------------

// KDJ

// required float hhv = 1;
inline bool KDJ::has_hhv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KDJ::set_has_hhv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KDJ::clear_has_hhv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KDJ::clear_hhv() {
  hhv_ = 0;
  clear_has_hhv();
}
inline float KDJ::hhv() const {
  return hhv_;
}
inline void KDJ::set_hhv(float value) {
  set_has_hhv();
  hhv_ = value;
}

// required float llv = 2;
inline bool KDJ::has_llv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KDJ::set_has_llv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KDJ::clear_has_llv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KDJ::clear_llv() {
  llv_ = 0;
  clear_has_llv();
}
inline float KDJ::llv() const {
  return llv_;
}
inline void KDJ::set_llv(float value) {
  set_has_llv();
  llv_ = value;
}

// repeated float hhvs = 3;
inline int KDJ::hhvs_size() const {
  return hhvs_.size();
}
inline void KDJ::clear_hhvs() {
  hhvs_.Clear();
}
inline float KDJ::hhvs(int index) const {
  return hhvs_.Get(index);
}
inline void KDJ::set_hhvs(int index, float value) {
  hhvs_.Set(index, value);
}
inline void KDJ::add_hhvs(float value) {
  hhvs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
KDJ::hhvs() const {
  return hhvs_;
}
inline ::google::protobuf::RepeatedField< float >*
KDJ::mutable_hhvs() {
  return &hhvs_;
}

// repeated float llvs = 4;
inline int KDJ::llvs_size() const {
  return llvs_.size();
}
inline void KDJ::clear_llvs() {
  llvs_.Clear();
}
inline float KDJ::llvs(int index) const {
  return llvs_.Get(index);
}
inline void KDJ::set_llvs(int index, float value) {
  llvs_.Set(index, value);
}
inline void KDJ::add_llvs(float value) {
  llvs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
KDJ::llvs() const {
  return llvs_;
}
inline ::google::protobuf::RepeatedField< float >*
KDJ::mutable_llvs() {
  return &llvs_;
}

// required float k = 5;
inline bool KDJ::has_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KDJ::set_has_k() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KDJ::clear_has_k() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KDJ::clear_k() {
  k_ = 0;
  clear_has_k();
}
inline float KDJ::k() const {
  return k_;
}
inline void KDJ::set_k(float value) {
  set_has_k();
  k_ = value;
}

// required float d = 6;
inline bool KDJ::has_d() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KDJ::set_has_d() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KDJ::clear_has_d() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KDJ::clear_d() {
  d_ = 0;
  clear_has_d();
}
inline float KDJ::d() const {
  return d_;
}
inline void KDJ::set_d(float value) {
  set_has_d();
  d_ = value;
}

// -------------------------------------------------------------------

// RSI

// required float smaMax1 = 1;
inline bool RSI::has_smamax1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RSI::set_has_smamax1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RSI::clear_has_smamax1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RSI::clear_smamax1() {
  smamax1_ = 0;
  clear_has_smamax1();
}
inline float RSI::smamax1() const {
  return smamax1_;
}
inline void RSI::set_smamax1(float value) {
  set_has_smamax1();
  smamax1_ = value;
}

// required float smaMax2 = 2;
inline bool RSI::has_smamax2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RSI::set_has_smamax2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RSI::clear_has_smamax2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RSI::clear_smamax2() {
  smamax2_ = 0;
  clear_has_smamax2();
}
inline float RSI::smamax2() const {
  return smamax2_;
}
inline void RSI::set_smamax2(float value) {
  set_has_smamax2();
  smamax2_ = value;
}

// required float smaMax3 = 3;
inline bool RSI::has_smamax3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RSI::set_has_smamax3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RSI::clear_has_smamax3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RSI::clear_smamax3() {
  smamax3_ = 0;
  clear_has_smamax3();
}
inline float RSI::smamax3() const {
  return smamax3_;
}
inline void RSI::set_smamax3(float value) {
  set_has_smamax3();
  smamax3_ = value;
}

// required float smaAbs1 = 4;
inline bool RSI::has_smaabs1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RSI::set_has_smaabs1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RSI::clear_has_smaabs1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RSI::clear_smaabs1() {
  smaabs1_ = 0;
  clear_has_smaabs1();
}
inline float RSI::smaabs1() const {
  return smaabs1_;
}
inline void RSI::set_smaabs1(float value) {
  set_has_smaabs1();
  smaabs1_ = value;
}

// required float smaAbs2 = 5;
inline bool RSI::has_smaabs2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RSI::set_has_smaabs2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RSI::clear_has_smaabs2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RSI::clear_smaabs2() {
  smaabs2_ = 0;
  clear_has_smaabs2();
}
inline float RSI::smaabs2() const {
  return smaabs2_;
}
inline void RSI::set_smaabs2(float value) {
  set_has_smaabs2();
  smaabs2_ = value;
}

// required float smaAbs3 = 6;
inline bool RSI::has_smaabs3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RSI::set_has_smaabs3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RSI::clear_has_smaabs3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RSI::clear_smaabs3() {
  smaabs3_ = 0;
  clear_has_smaabs3();
}
inline float RSI::smaabs3() const {
  return smaabs3_;
}
inline void RSI::set_smaabs3(float value) {
  set_has_smaabs3();
  smaabs3_ = value;
}

// -------------------------------------------------------------------

// OBV

// required double obv = 1;
inline bool OBV::has_obv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OBV::set_has_obv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OBV::clear_has_obv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OBV::clear_obv() {
  obv_ = 0;
  clear_has_obv();
}
inline double OBV::obv() const {
  return obv_;
}
inline void OBV::set_obv(double value) {
  set_has_obv();
  obv_ = value;
}

// required double sumObv29 = 2;
inline bool OBV::has_sumobv29() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OBV::set_has_sumobv29() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OBV::clear_has_sumobv29() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OBV::clear_sumobv29() {
  sumobv29_ = 0;
  clear_has_sumobv29();
}
inline double OBV::sumobv29() const {
  return sumobv29_;
}
inline void OBV::set_sumobv29(double value) {
  set_has_sumobv29();
  sumobv29_ = value;
}

// repeated double obvs = 3;
inline int OBV::obvs_size() const {
  return obvs_.size();
}
inline void OBV::clear_obvs() {
  obvs_.Clear();
}
inline double OBV::obvs(int index) const {
  return obvs_.Get(index);
}
inline void OBV::set_obvs(int index, double value) {
  obvs_.Set(index, value);
}
inline void OBV::add_obvs(double value) {
  obvs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
OBV::obvs() const {
  return obvs_;
}
inline ::google::protobuf::RepeatedField< double >*
OBV::mutable_obvs() {
  return &obvs_;
}

// -------------------------------------------------------------------

// BOLL

// required double sumClose = 1;
inline bool BOLL::has_sumclose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BOLL::set_has_sumclose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BOLL::clear_has_sumclose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BOLL::clear_sumclose() {
  sumclose_ = 0;
  clear_has_sumclose();
}
inline double BOLL::sumclose() const {
  return sumclose_;
}
inline void BOLL::set_sumclose(double value) {
  set_has_sumclose();
  sumclose_ = value;
}

// required double sumPowClose = 2;
inline bool BOLL::has_sumpowclose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BOLL::set_has_sumpowclose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BOLL::clear_has_sumpowclose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BOLL::clear_sumpowclose() {
  sumpowclose_ = 0;
  clear_has_sumpowclose();
}
inline double BOLL::sumpowclose() const {
  return sumpowclose_;
}
inline void BOLL::set_sumpowclose(double value) {
  set_has_sumpowclose();
  sumpowclose_ = value;
}

// -------------------------------------------------------------------

// PSY

// required int32 psyCount11 = 1;
inline bool PSY::has_psycount11() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PSY::set_has_psycount11() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PSY::clear_has_psycount11() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PSY::clear_psycount11() {
  psycount11_ = 0;
  clear_has_psycount11();
}
inline ::google::protobuf::int32 PSY::psycount11() const {
  return psycount11_;
}
inline void PSY::set_psycount11(::google::protobuf::int32 value) {
  set_has_psycount11();
  psycount11_ = value;
}

// repeated int32 psyCounts = 2;
inline int PSY::psycounts_size() const {
  return psycounts_.size();
}
inline void PSY::clear_psycounts() {
  psycounts_.Clear();
}
inline ::google::protobuf::int32 PSY::psycounts(int index) const {
  return psycounts_.Get(index);
}
inline void PSY::set_psycounts(int index, ::google::protobuf::int32 value) {
  psycounts_.Set(index, value);
}
inline void PSY::add_psycounts(::google::protobuf::int32 value) {
  psycounts_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSY::psycounts() const {
  return psycounts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSY::mutable_psycounts() {
  return &psycounts_;
}

// required float sumPsy = 3;
inline bool PSY::has_sumpsy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PSY::set_has_sumpsy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PSY::clear_has_sumpsy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PSY::clear_sumpsy() {
  sumpsy_ = 0;
  clear_has_sumpsy();
}
inline float PSY::sumpsy() const {
  return sumpsy_;
}
inline void PSY::set_sumpsy(float value) {
  set_has_sumpsy();
  sumpsy_ = value;
}

// repeated float psys = 4;
inline int PSY::psys_size() const {
  return psys_.size();
}
inline void PSY::clear_psys() {
  psys_.Clear();
}
inline float PSY::psys(int index) const {
  return psys_.Get(index);
}
inline void PSY::set_psys(int index, float value) {
  psys_.Set(index, value);
}
inline void PSY::add_psys(float value) {
  psys_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
PSY::psys() const {
  return psys_;
}
inline ::google::protobuf::RepeatedField< float >*
PSY::mutable_psys() {
  return &psys_;
}

// -------------------------------------------------------------------

// ROC

// required float refClose12 = 1;
inline bool ROC::has_refclose12() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROC::set_has_refclose12() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROC::clear_has_refclose12() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROC::clear_refclose12() {
  refclose12_ = 0;
  clear_has_refclose12();
}
inline float ROC::refclose12() const {
  return refclose12_;
}
inline void ROC::set_refclose12(float value) {
  set_has_refclose12();
  refclose12_ = value;
}

// required float sumRoc = 2;
inline bool ROC::has_sumroc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ROC::set_has_sumroc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ROC::clear_has_sumroc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ROC::clear_sumroc() {
  sumroc_ = 0;
  clear_has_sumroc();
}
inline float ROC::sumroc() const {
  return sumroc_;
}
inline void ROC::set_sumroc(float value) {
  set_has_sumroc();
  sumroc_ = value;
}

// repeated float rocs = 3;
inline int ROC::rocs_size() const {
  return rocs_.size();
}
inline void ROC::clear_rocs() {
  rocs_.Clear();
}
inline float ROC::rocs(int index) const {
  return rocs_.Get(index);
}
inline void ROC::set_rocs(int index, float value) {
  rocs_.Set(index, value);
}
inline void ROC::add_rocs(float value) {
  rocs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ROC::rocs() const {
  return rocs_;
}
inline ::google::protobuf::RepeatedField< float >*
ROC::mutable_rocs() {
  return &rocs_;
}

// -------------------------------------------------------------------

// WR

// required float llv = 1;
inline bool WR::has_llv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WR::set_has_llv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WR::clear_has_llv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WR::clear_llv() {
  llv_ = 0;
  clear_has_llv();
}
inline float WR::llv() const {
  return llv_;
}
inline void WR::set_llv(float value) {
  set_has_llv();
  llv_ = value;
}

// required float hhv = 2;
inline bool WR::has_hhv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WR::set_has_hhv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WR::clear_has_hhv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WR::clear_hhv() {
  hhv_ = 0;
  clear_has_hhv();
}
inline float WR::hhv() const {
  return hhv_;
}
inline void WR::set_hhv(float value) {
  set_has_hhv();
  hhv_ = value;
}

// required float llv2 = 3;
inline bool WR::has_llv2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WR::set_has_llv2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WR::clear_has_llv2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WR::clear_llv2() {
  llv2_ = 0;
  clear_has_llv2();
}
inline float WR::llv2() const {
  return llv2_;
}
inline void WR::set_llv2(float value) {
  set_has_llv2();
  llv2_ = value;
}

// required float hhv2 = 4;
inline bool WR::has_hhv2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WR::set_has_hhv2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WR::clear_has_hhv2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WR::clear_hhv2() {
  hhv2_ = 0;
  clear_has_hhv2();
}
inline float WR::hhv2() const {
  return hhv2_;
}
inline void WR::set_hhv2(float value) {
  set_has_hhv2();
  hhv2_ = value;
}

// repeated float hhvs = 5;
inline int WR::hhvs_size() const {
  return hhvs_.size();
}
inline void WR::clear_hhvs() {
  hhvs_.Clear();
}
inline float WR::hhvs(int index) const {
  return hhvs_.Get(index);
}
inline void WR::set_hhvs(int index, float value) {
  hhvs_.Set(index, value);
}
inline void WR::add_hhvs(float value) {
  hhvs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
WR::hhvs() const {
  return hhvs_;
}
inline ::google::protobuf::RepeatedField< float >*
WR::mutable_hhvs() {
  return &hhvs_;
}

// repeated float llvs = 6;
inline int WR::llvs_size() const {
  return llvs_.size();
}
inline void WR::clear_llvs() {
  llvs_.Clear();
}
inline float WR::llvs(int index) const {
  return llvs_.Get(index);
}
inline void WR::set_llvs(int index, float value) {
  llvs_.Set(index, value);
}
inline void WR::add_llvs(float value) {
  llvs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
WR::llvs() const {
  return llvs_;
}
inline ::google::protobuf::RepeatedField< float >*
WR::mutable_llvs() {
  return &llvs_;
}

// repeated float hhvs2 = 7;
inline int WR::hhvs2_size() const {
  return hhvs2_.size();
}
inline void WR::clear_hhvs2() {
  hhvs2_.Clear();
}
inline float WR::hhvs2(int index) const {
  return hhvs2_.Get(index);
}
inline void WR::set_hhvs2(int index, float value) {
  hhvs2_.Set(index, value);
}
inline void WR::add_hhvs2(float value) {
  hhvs2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
WR::hhvs2() const {
  return hhvs2_;
}
inline ::google::protobuf::RepeatedField< float >*
WR::mutable_hhvs2() {
  return &hhvs2_;
}

// repeated float llvs2 = 8;
inline int WR::llvs2_size() const {
  return llvs2_.size();
}
inline void WR::clear_llvs2() {
  llvs2_.Clear();
}
inline float WR::llvs2(int index) const {
  return llvs2_.Get(index);
}
inline void WR::set_llvs2(int index, float value) {
  llvs2_.Set(index, value);
}
inline void WR::add_llvs2(float value) {
  llvs2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
WR::llvs2() const {
  return llvs2_;
}
inline ::google::protobuf::RepeatedField< float >*
WR::mutable_llvs2() {
  return &llvs2_;
}

// -------------------------------------------------------------------

// VR

// required double sum1 = 1;
inline bool VR::has_sum1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VR::set_has_sum1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VR::clear_has_sum1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VR::clear_sum1() {
  sum1_ = 0;
  clear_has_sum1();
}
inline double VR::sum1() const {
  return sum1_;
}
inline void VR::set_sum1(double value) {
  set_has_sum1();
  sum1_ = value;
}

// required double sum2 = 2;
inline bool VR::has_sum2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VR::set_has_sum2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VR::clear_has_sum2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VR::clear_sum2() {
  sum2_ = 0;
  clear_has_sum2();
}
inline double VR::sum2() const {
  return sum2_;
}
inline void VR::set_sum2(double value) {
  set_has_sum2();
  sum2_ = value;
}

// required double sumVr = 3;
inline bool VR::has_sumvr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VR::set_has_sumvr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VR::clear_has_sumvr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VR::clear_sumvr() {
  sumvr_ = 0;
  clear_has_sumvr();
}
inline double VR::sumvr() const {
  return sumvr_;
}
inline void VR::set_sumvr(double value) {
  set_has_sumvr();
  sumvr_ = value;
}

// repeated double vrs = 4;
inline int VR::vrs_size() const {
  return vrs_.size();
}
inline void VR::clear_vrs() {
  vrs_.Clear();
}
inline double VR::vrs(int index) const {
  return vrs_.Get(index);
}
inline void VR::set_vrs(int index, double value) {
  vrs_.Set(index, value);
}
inline void VR::add_vrs(double value) {
  vrs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
VR::vrs() const {
  return vrs_;
}
inline ::google::protobuf::RepeatedField< double >*
VR::mutable_vrs() {
  return &vrs_;
}

// -------------------------------------------------------------------

// EXPMA

// required float prevEma = 1;
inline bool EXPMA::has_prevema() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EXPMA::set_has_prevema() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EXPMA::clear_has_prevema() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EXPMA::clear_prevema() {
  prevema_ = 0;
  clear_has_prevema();
}
inline float EXPMA::prevema() const {
  return prevema_;
}
inline void EXPMA::set_prevema(float value) {
  set_has_prevema();
  prevema_ = value;
}

// -------------------------------------------------------------------

// ARBR

// required float sum1 = 1;
inline bool ARBR::has_sum1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ARBR::set_has_sum1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ARBR::clear_has_sum1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ARBR::clear_sum1() {
  sum1_ = 0;
  clear_has_sum1();
}
inline float ARBR::sum1() const {
  return sum1_;
}
inline void ARBR::set_sum1(float value) {
  set_has_sum1();
  sum1_ = value;
}

// required float sum2 = 2;
inline bool ARBR::has_sum2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ARBR::set_has_sum2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ARBR::clear_has_sum2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ARBR::clear_sum2() {
  sum2_ = 0;
  clear_has_sum2();
}
inline float ARBR::sum2() const {
  return sum2_;
}
inline void ARBR::set_sum2(float value) {
  set_has_sum2();
  sum2_ = value;
}

// required float sum3 = 3;
inline bool ARBR::has_sum3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ARBR::set_has_sum3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ARBR::clear_has_sum3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ARBR::clear_sum3() {
  sum3_ = 0;
  clear_has_sum3();
}
inline float ARBR::sum3() const {
  return sum3_;
}
inline void ARBR::set_sum3(float value) {
  set_has_sum3();
  sum3_ = value;
}

// required float sum4 = 4;
inline bool ARBR::has_sum4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ARBR::set_has_sum4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ARBR::clear_has_sum4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ARBR::clear_sum4() {
  sum4_ = 0;
  clear_has_sum4();
}
inline float ARBR::sum4() const {
  return sum4_;
}
inline void ARBR::set_sum4(float value) {
  set_has_sum4();
  sum4_ = value;
}

// required float top1 = 5;
inline bool ARBR::has_top1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ARBR::set_has_top1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ARBR::clear_has_top1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ARBR::clear_top1() {
  top1_ = 0;
  clear_has_top1();
}
inline float ARBR::top1() const {
  return top1_;
}
inline void ARBR::set_top1(float value) {
  set_has_top1();
  top1_ = value;
}

// required float top2 = 6;
inline bool ARBR::has_top2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ARBR::set_has_top2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ARBR::clear_has_top2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ARBR::clear_top2() {
  top2_ = 0;
  clear_has_top2();
}
inline float ARBR::top2() const {
  return top2_;
}
inline void ARBR::set_top2(float value) {
  set_has_top2();
  top2_ = value;
}

// required float top3 = 7;
inline bool ARBR::has_top3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ARBR::set_has_top3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ARBR::clear_has_top3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ARBR::clear_top3() {
  top3_ = 0;
  clear_has_top3();
}
inline float ARBR::top3() const {
  return top3_;
}
inline void ARBR::set_top3(float value) {
  set_has_top3();
  top3_ = value;
}

// required float top4 = 8;
inline bool ARBR::has_top4() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ARBR::set_has_top4() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ARBR::clear_has_top4() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ARBR::clear_top4() {
  top4_ = 0;
  clear_has_top4();
}
inline float ARBR::top4() const {
  return top4_;
}
inline void ARBR::set_top4(float value) {
  set_has_top4();
  top4_ = value;
}

// required float prevClose = 9;
inline bool ARBR::has_prevclose() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ARBR::set_has_prevclose() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ARBR::clear_has_prevclose() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ARBR::clear_prevclose() {
  prevclose_ = 0;
  clear_has_prevclose();
}
inline float ARBR::prevclose() const {
  return prevclose_;
}
inline void ARBR::set_prevclose(float value) {
  set_has_prevclose();
  prevclose_ = value;
}

// -------------------------------------------------------------------

// CR

// required float prevMid = 1;
inline bool CR::has_prevmid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CR::set_has_prevmid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CR::clear_has_prevmid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CR::clear_prevmid() {
  prevmid_ = 0;
  clear_has_prevmid();
}
inline float CR::prevmid() const {
  return prevmid_;
}
inline void CR::set_prevmid(float value) {
  set_has_prevmid();
  prevmid_ = value;
}

// required float sum1 = 2;
inline bool CR::has_sum1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CR::set_has_sum1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CR::clear_has_sum1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CR::clear_sum1() {
  sum1_ = 0;
  clear_has_sum1();
}
inline float CR::sum1() const {
  return sum1_;
}
inline void CR::set_sum1(float value) {
  set_has_sum1();
  sum1_ = value;
}

// required float sum2 = 3;
inline bool CR::has_sum2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CR::set_has_sum2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CR::clear_has_sum2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CR::clear_sum2() {
  sum2_ = 0;
  clear_has_sum2();
}
inline float CR::sum2() const {
  return sum2_;
}
inline void CR::set_sum2(float value) {
  set_has_sum2();
  sum2_ = value;
}

// required float top1 = 4;
inline bool CR::has_top1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CR::set_has_top1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CR::clear_has_top1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CR::clear_top1() {
  top1_ = 0;
  clear_has_top1();
}
inline float CR::top1() const {
  return top1_;
}
inline void CR::set_top1(float value) {
  set_has_top1();
  top1_ = value;
}

// required float top2 = 5;
inline bool CR::has_top2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CR::set_has_top2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CR::clear_has_top2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CR::clear_top2() {
  top2_ = 0;
  clear_has_top2();
}
inline float CR::top2() const {
  return top2_;
}
inline void CR::set_top2(float value) {
  set_has_top2();
  top2_ = value;
}

// required float nextMa1 = 6;
inline bool CR::has_nextma1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CR::set_has_nextma1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CR::clear_has_nextma1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CR::clear_nextma1() {
  nextma1_ = 0;
  clear_has_nextma1();
}
inline float CR::nextma1() const {
  return nextma1_;
}
inline void CR::set_nextma1(float value) {
  set_has_nextma1();
  nextma1_ = value;
}

// required float nextMa2 = 7;
inline bool CR::has_nextma2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CR::set_has_nextma2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CR::clear_has_nextma2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CR::clear_nextma2() {
  nextma2_ = 0;
  clear_has_nextma2();
}
inline float CR::nextma2() const {
  return nextma2_;
}
inline void CR::set_nextma2(float value) {
  set_has_nextma2();
  nextma2_ = value;
}

// required float nextMa3 = 8;
inline bool CR::has_nextma3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CR::set_has_nextma3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CR::clear_has_nextma3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CR::clear_nextma3() {
  nextma3_ = 0;
  clear_has_nextma3();
}
inline float CR::nextma3() const {
  return nextma3_;
}
inline void CR::set_nextma3(float value) {
  set_has_nextma3();
  nextma3_ = value;
}

// repeated float crs = 9;
inline int CR::crs_size() const {
  return crs_.size();
}
inline void CR::clear_crs() {
  crs_.Clear();
}
inline float CR::crs(int index) const {
  return crs_.Get(index);
}
inline void CR::set_crs(int index, float value) {
  crs_.Set(index, value);
}
inline void CR::add_crs(float value) {
  crs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
CR::crs() const {
  return crs_;
}
inline ::google::protobuf::RepeatedField< float >*
CR::mutable_crs() {
  return &crs_;
}

// -------------------------------------------------------------------

// CDP

// required float prevHigh = 1;
inline bool CDP::has_prevhigh() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDP::set_has_prevhigh() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDP::clear_has_prevhigh() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDP::clear_prevhigh() {
  prevhigh_ = 0;
  clear_has_prevhigh();
}
inline float CDP::prevhigh() const {
  return prevhigh_;
}
inline void CDP::set_prevhigh(float value) {
  set_has_prevhigh();
  prevhigh_ = value;
}

// required float prevLow = 2;
inline bool CDP::has_prevlow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDP::set_has_prevlow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDP::clear_has_prevlow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDP::clear_prevlow() {
  prevlow_ = 0;
  clear_has_prevlow();
}
inline float CDP::prevlow() const {
  return prevlow_;
}
inline void CDP::set_prevlow(float value) {
  set_has_prevlow();
  prevlow_ = value;
}

// required float prevClose = 3;
inline bool CDP::has_prevclose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDP::set_has_prevclose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDP::clear_has_prevclose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDP::clear_prevclose() {
  prevclose_ = 0;
  clear_has_prevclose();
}
inline float CDP::prevclose() const {
  return prevclose_;
}
inline void CDP::set_prevclose(float value) {
  set_has_prevclose();
  prevclose_ = value;
}

// -------------------------------------------------------------------

// DMA

// required float sumMa9 = 1;
inline bool DMA::has_summa9() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DMA::set_has_summa9() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DMA::clear_has_summa9() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DMA::clear_summa9() {
  summa9_ = 0;
  clear_has_summa9();
}
inline float DMA::summa9() const {
  return summa9_;
}
inline void DMA::set_summa9(float value) {
  set_has_summa9();
  summa9_ = value;
}

// required float sumMa49 = 2;
inline bool DMA::has_summa49() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DMA::set_has_summa49() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DMA::clear_has_summa49() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DMA::clear_summa49() {
  summa49_ = 0;
  clear_has_summa49();
}
inline float DMA::summa49() const {
  return summa49_;
}
inline void DMA::set_summa49(float value) {
  set_has_summa49();
  summa49_ = value;
}

// required float sumDdd = 3;
inline bool DMA::has_sumddd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DMA::set_has_sumddd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DMA::clear_has_sumddd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DMA::clear_sumddd() {
  sumddd_ = 0;
  clear_has_sumddd();
}
inline float DMA::sumddd() const {
  return sumddd_;
}
inline void DMA::set_sumddd(float value) {
  set_has_sumddd();
  sumddd_ = value;
}

// repeated float ddds = 4;
inline int DMA::ddds_size() const {
  return ddds_.size();
}
inline void DMA::clear_ddds() {
  ddds_.Clear();
}
inline float DMA::ddds(int index) const {
  return ddds_.Get(index);
}
inline void DMA::set_ddds(int index, float value) {
  ddds_.Set(index, value);
}
inline void DMA::add_ddds(float value) {
  ddds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DMA::ddds() const {
  return ddds_;
}
inline ::google::protobuf::RepeatedField< float >*
DMA::mutable_ddds() {
  return &ddds_;
}

// -------------------------------------------------------------------

// MTM

// required float close4 = 1;
inline bool MTM::has_close4() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MTM::set_has_close4() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MTM::clear_has_close4() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MTM::clear_close4() {
  close4_ = 0;
  clear_has_close4();
}
inline float MTM::close4() const {
  return close4_;
}
inline void MTM::set_close4(float value) {
  set_has_close4();
  close4_ = value;
}

// required float sumMtm = 2;
inline bool MTM::has_summtm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MTM::set_has_summtm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MTM::clear_has_summtm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MTM::clear_summtm() {
  summtm_ = 0;
  clear_has_summtm();
}
inline float MTM::summtm() const {
  return summtm_;
}
inline void MTM::set_summtm(float value) {
  set_has_summtm();
  summtm_ = value;
}

// repeated float mtms = 3;
inline int MTM::mtms_size() const {
  return mtms_.size();
}
inline void MTM::clear_mtms() {
  mtms_.Clear();
}
inline float MTM::mtms(int index) const {
  return mtms_.Get(index);
}
inline void MTM::set_mtms(int index, float value) {
  mtms_.Set(index, value);
}
inline void MTM::add_mtms(float value) {
  mtms_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
MTM::mtms() const {
  return mtms_;
}
inline ::google::protobuf::RepeatedField< float >*
MTM::mutable_mtms() {
  return &mtms_;
}

// -------------------------------------------------------------------

// BBI

// required float sum1 = 1;
inline bool BBI::has_sum1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBI::set_has_sum1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBI::clear_has_sum1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBI::clear_sum1() {
  sum1_ = 0;
  clear_has_sum1();
}
inline float BBI::sum1() const {
  return sum1_;
}
inline void BBI::set_sum1(float value) {
  set_has_sum1();
  sum1_ = value;
}

// required float sum2 = 2;
inline bool BBI::has_sum2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BBI::set_has_sum2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BBI::clear_has_sum2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BBI::clear_sum2() {
  sum2_ = 0;
  clear_has_sum2();
}
inline float BBI::sum2() const {
  return sum2_;
}
inline void BBI::set_sum2(float value) {
  set_has_sum2();
  sum2_ = value;
}

// required float sum3 = 3;
inline bool BBI::has_sum3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BBI::set_has_sum3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BBI::clear_has_sum3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BBI::clear_sum3() {
  sum3_ = 0;
  clear_has_sum3();
}
inline float BBI::sum3() const {
  return sum3_;
}
inline void BBI::set_sum3(float value) {
  set_has_sum3();
  sum3_ = value;
}

// required float sum4 = 4;
inline bool BBI::has_sum4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BBI::set_has_sum4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BBI::clear_has_sum4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BBI::clear_sum4() {
  sum4_ = 0;
  clear_has_sum4();
}
inline float BBI::sum4() const {
  return sum4_;
}
inline void BBI::set_sum4(float value) {
  set_has_sum4();
  sum4_ = value;
}

// required float top1 = 5;
inline bool BBI::has_top1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BBI::set_has_top1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BBI::clear_has_top1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BBI::clear_top1() {
  top1_ = 0;
  clear_has_top1();
}
inline float BBI::top1() const {
  return top1_;
}
inline void BBI::set_top1(float value) {
  set_has_top1();
  top1_ = value;
}

// required float top2 = 6;
inline bool BBI::has_top2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BBI::set_has_top2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BBI::clear_has_top2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BBI::clear_top2() {
  top2_ = 0;
  clear_has_top2();
}
inline float BBI::top2() const {
  return top2_;
}
inline void BBI::set_top2(float value) {
  set_has_top2();
  top2_ = value;
}

// required float top3 = 7;
inline bool BBI::has_top3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BBI::set_has_top3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BBI::clear_has_top3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BBI::clear_top3() {
  top3_ = 0;
  clear_has_top3();
}
inline float BBI::top3() const {
  return top3_;
}
inline void BBI::set_top3(float value) {
  set_has_top3();
  top3_ = value;
}

// required float top4 = 8;
inline bool BBI::has_top4() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BBI::set_has_top4() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BBI::clear_has_top4() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BBI::clear_top4() {
  top4_ = 0;
  clear_has_top4();
}
inline float BBI::top4() const {
  return top4_;
}
inline void BBI::set_top4(float value) {
  set_has_top4();
  top4_ = value;
}

// -------------------------------------------------------------------

// TRIX

// required float prevEma1 = 1;
inline bool TRIX::has_prevema1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRIX::set_has_prevema1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRIX::clear_has_prevema1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRIX::clear_prevema1() {
  prevema1_ = 0;
  clear_has_prevema1();
}
inline float TRIX::prevema1() const {
  return prevema1_;
}
inline void TRIX::set_prevema1(float value) {
  set_has_prevema1();
  prevema1_ = value;
}

// required float prevEma2 = 2;
inline bool TRIX::has_prevema2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRIX::set_has_prevema2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRIX::clear_has_prevema2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRIX::clear_prevema2() {
  prevema2_ = 0;
  clear_has_prevema2();
}
inline float TRIX::prevema2() const {
  return prevema2_;
}
inline void TRIX::set_prevema2(float value) {
  set_has_prevema2();
  prevema2_ = value;
}

// required float prevTr = 3;
inline bool TRIX::has_prevtr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRIX::set_has_prevtr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRIX::clear_has_prevtr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRIX::clear_prevtr() {
  prevtr_ = 0;
  clear_has_prevtr();
}
inline float TRIX::prevtr() const {
  return prevtr_;
}
inline void TRIX::set_prevtr(float value) {
  set_has_prevtr();
  prevtr_ = value;
}

// required float sumTr = 4;
inline bool TRIX::has_sumtr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TRIX::set_has_sumtr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TRIX::clear_has_sumtr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TRIX::clear_sumtr() {
  sumtr_ = 0;
  clear_has_sumtr();
}
inline float TRIX::sumtr() const {
  return sumtr_;
}
inline void TRIX::set_sumtr(float value) {
  set_has_sumtr();
  sumtr_ = value;
}

// repeated float trs = 5;
inline int TRIX::trs_size() const {
  return trs_.size();
}
inline void TRIX::clear_trs() {
  trs_.Clear();
}
inline float TRIX::trs(int index) const {
  return trs_.Get(index);
}
inline void TRIX::set_trs(int index, float value) {
  trs_.Set(index, value);
}
inline void TRIX::add_trs(float value) {
  trs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
TRIX::trs() const {
  return trs_;
}
inline ::google::protobuf::RepeatedField< float >*
TRIX::mutable_trs() {
  return &trs_;
}

// -------------------------------------------------------------------

// ZLJC

// required float prevLow = 1;
inline bool ZLJC::has_prevlow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZLJC::set_has_prevlow() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZLJC::clear_has_prevlow() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZLJC::clear_prevlow() {
  prevlow_ = 0;
  clear_has_prevlow();
}
inline float ZLJC::prevlow() const {
  return prevlow_;
}
inline void ZLJC::set_prevlow(float value) {
  set_has_prevlow();
  prevlow_ = value;
}

// required float prevJcs = 2;
inline bool ZLJC::has_prevjcs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZLJC::set_has_prevjcs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZLJC::clear_has_prevjcs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZLJC::clear_prevjcs() {
  prevjcs_ = 0;
  clear_has_prevjcs();
}
inline float ZLJC::prevjcs() const {
  return prevjcs_;
}
inline void ZLJC::set_prevjcs(float value) {
  set_has_prevjcs();
  prevjcs_ = value;
}

// required float sumJcm = 3;
inline bool ZLJC::has_sumjcm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZLJC::set_has_sumjcm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZLJC::clear_has_sumjcm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZLJC::clear_sumjcm() {
  sumjcm_ = 0;
  clear_has_sumjcm();
}
inline float ZLJC::sumjcm() const {
  return sumjcm_;
}
inline void ZLJC::set_sumjcm(float value) {
  set_has_sumjcm();
  sumjcm_ = value;
}

// required float sumJcl = 4;
inline bool ZLJC::has_sumjcl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZLJC::set_has_sumjcl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZLJC::clear_has_sumjcl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZLJC::clear_sumjcl() {
  sumjcl_ = 0;
  clear_has_sumjcl();
}
inline float ZLJC::sumjcl() const {
  return sumjcl_;
}
inline void ZLJC::set_sumjcl(float value) {
  set_has_sumjcl();
  sumjcl_ = value;
}

// repeated float jcms = 5;
inline int ZLJC::jcms_size() const {
  return jcms_.size();
}
inline void ZLJC::clear_jcms() {
  jcms_.Clear();
}
inline float ZLJC::jcms(int index) const {
  return jcms_.Get(index);
}
inline void ZLJC::set_jcms(int index, float value) {
  jcms_.Set(index, value);
}
inline void ZLJC::add_jcms(float value) {
  jcms_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ZLJC::jcms() const {
  return jcms_;
}
inline ::google::protobuf::RepeatedField< float >*
ZLJC::mutable_jcms() {
  return &jcms_;
}

// repeated float jcls = 6;
inline int ZLJC::jcls_size() const {
  return jcls_.size();
}
inline void ZLJC::clear_jcls() {
  jcls_.Clear();
}
inline float ZLJC::jcls(int index) const {
  return jcls_.Get(index);
}
inline void ZLJC::set_jcls(int index, float value) {
  jcls_.Set(index, value);
}
inline void ZLJC::add_jcls(float value) {
  jcls_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ZLJC::jcls() const {
  return jcls_;
}
inline ::google::protobuf::RepeatedField< float >*
ZLJC::mutable_jcls() {
  return &jcls_;
}

// -------------------------------------------------------------------

// ASI

// required float prevClose = 1;
inline bool ASI::has_prevclose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ASI::set_has_prevclose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ASI::clear_has_prevclose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ASI::clear_prevclose() {
  prevclose_ = 0;
  clear_has_prevclose();
}
inline float ASI::prevclose() const {
  return prevclose_;
}
inline void ASI::set_prevclose(float value) {
  set_has_prevclose();
  prevclose_ = value;
}

// required float prevLow = 2;
inline bool ASI::has_prevlow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ASI::set_has_prevlow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ASI::clear_has_prevlow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ASI::clear_prevlow() {
  prevlow_ = 0;
  clear_has_prevlow();
}
inline float ASI::prevlow() const {
  return prevlow_;
}
inline void ASI::set_prevlow(float value) {
  set_has_prevlow();
  prevlow_ = value;
}

// required float prevOpen = 3;
inline bool ASI::has_prevopen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ASI::set_has_prevopen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ASI::clear_has_prevopen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ASI::clear_prevopen() {
  prevopen_ = 0;
  clear_has_prevopen();
}
inline float ASI::prevopen() const {
  return prevopen_;
}
inline void ASI::set_prevopen(float value) {
  set_has_prevopen();
  prevopen_ = value;
}

// required float sumSi = 4;
inline bool ASI::has_sumsi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ASI::set_has_sumsi() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ASI::clear_has_sumsi() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ASI::clear_sumsi() {
  sumsi_ = 0;
  clear_has_sumsi();
}
inline float ASI::sumsi() const {
  return sumsi_;
}
inline void ASI::set_sumsi(float value) {
  set_has_sumsi();
  sumsi_ = value;
}

// required float sumAsi = 5;
inline bool ASI::has_sumasi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ASI::set_has_sumasi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ASI::clear_has_sumasi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ASI::clear_sumasi() {
  sumasi_ = 0;
  clear_has_sumasi();
}
inline float ASI::sumasi() const {
  return sumasi_;
}
inline void ASI::set_sumasi(float value) {
  set_has_sumasi();
  sumasi_ = value;
}

// repeated float sis = 6;
inline int ASI::sis_size() const {
  return sis_.size();
}
inline void ASI::clear_sis() {
  sis_.Clear();
}
inline float ASI::sis(int index) const {
  return sis_.Get(index);
}
inline void ASI::set_sis(int index, float value) {
  sis_.Set(index, value);
}
inline void ASI::add_sis(float value) {
  sis_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ASI::sis() const {
  return sis_;
}
inline ::google::protobuf::RepeatedField< float >*
ASI::mutable_sis() {
  return &sis_;
}

// repeated float asis = 7;
inline int ASI::asis_size() const {
  return asis_.size();
}
inline void ASI::clear_asis() {
  asis_.Clear();
}
inline float ASI::asis(int index) const {
  return asis_.Get(index);
}
inline void ASI::set_asis(int index, float value) {
  asis_.Set(index, value);
}
inline void ASI::add_asis(float value) {
  asis_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ASI::asis() const {
  return asis_;
}
inline ::google::protobuf::RepeatedField< float >*
ASI::mutable_asis() {
  return &asis_;
}

// -------------------------------------------------------------------

// DMI

// required float prevClose = 1;
inline bool DMI::has_prevclose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DMI::set_has_prevclose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DMI::clear_has_prevclose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DMI::clear_prevclose() {
  prevclose_ = 0;
  clear_has_prevclose();
}
inline float DMI::prevclose() const {
  return prevclose_;
}
inline void DMI::set_prevclose(float value) {
  set_has_prevclose();
  prevclose_ = value;
}

// required float prevLow = 2;
inline bool DMI::has_prevlow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DMI::set_has_prevlow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DMI::clear_has_prevlow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DMI::clear_prevlow() {
  prevlow_ = 0;
  clear_has_prevlow();
}
inline float DMI::prevlow() const {
  return prevlow_;
}
inline void DMI::set_prevlow(float value) {
  set_has_prevlow();
  prevlow_ = value;
}

// required float prevHigh = 3;
inline bool DMI::has_prevhigh() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DMI::set_has_prevhigh() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DMI::clear_has_prevhigh() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DMI::clear_prevhigh() {
  prevhigh_ = 0;
  clear_has_prevhigh();
}
inline float DMI::prevhigh() const {
  return prevhigh_;
}
inline void DMI::set_prevhigh(float value) {
  set_has_prevhigh();
  prevhigh_ = value;
}

// required float sumTr = 4;
inline bool DMI::has_sumtr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DMI::set_has_sumtr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DMI::clear_has_sumtr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DMI::clear_sumtr() {
  sumtr_ = 0;
  clear_has_sumtr();
}
inline float DMI::sumtr() const {
  return sumtr_;
}
inline void DMI::set_sumtr(float value) {
  set_has_sumtr();
  sumtr_ = value;
}

// repeated float midtrs = 5;
inline int DMI::midtrs_size() const {
  return midtrs_.size();
}
inline void DMI::clear_midtrs() {
  midtrs_.Clear();
}
inline float DMI::midtrs(int index) const {
  return midtrs_.Get(index);
}
inline void DMI::set_midtrs(int index, float value) {
  midtrs_.Set(index, value);
}
inline void DMI::add_midtrs(float value) {
  midtrs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DMI::midtrs() const {
  return midtrs_;
}
inline ::google::protobuf::RepeatedField< float >*
DMI::mutable_midtrs() {
  return &midtrs_;
}

// required float sumDmp = 6;
inline bool DMI::has_sumdmp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DMI::set_has_sumdmp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DMI::clear_has_sumdmp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DMI::clear_sumdmp() {
  sumdmp_ = 0;
  clear_has_sumdmp();
}
inline float DMI::sumdmp() const {
  return sumdmp_;
}
inline void DMI::set_sumdmp(float value) {
  set_has_sumdmp();
  sumdmp_ = value;
}

// repeated float middmps = 7;
inline int DMI::middmps_size() const {
  return middmps_.size();
}
inline void DMI::clear_middmps() {
  middmps_.Clear();
}
inline float DMI::middmps(int index) const {
  return middmps_.Get(index);
}
inline void DMI::set_middmps(int index, float value) {
  middmps_.Set(index, value);
}
inline void DMI::add_middmps(float value) {
  middmps_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DMI::middmps() const {
  return middmps_;
}
inline ::google::protobuf::RepeatedField< float >*
DMI::mutable_middmps() {
  return &middmps_;
}

// required float sumDmm = 8;
inline bool DMI::has_sumdmm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DMI::set_has_sumdmm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DMI::clear_has_sumdmm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DMI::clear_sumdmm() {
  sumdmm_ = 0;
  clear_has_sumdmm();
}
inline float DMI::sumdmm() const {
  return sumdmm_;
}
inline void DMI::set_sumdmm(float value) {
  set_has_sumdmm();
  sumdmm_ = value;
}

// repeated float middmms = 9;
inline int DMI::middmms_size() const {
  return middmms_.size();
}
inline void DMI::clear_middmms() {
  middmms_.Clear();
}
inline float DMI::middmms(int index) const {
  return middmms_.Get(index);
}
inline void DMI::set_middmms(int index, float value) {
  middmms_.Set(index, value);
}
inline void DMI::add_middmms(float value) {
  middmms_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DMI::middmms() const {
  return middmms_;
}
inline ::google::protobuf::RepeatedField< float >*
DMI::mutable_middmms() {
  return &middmms_;
}

// required float sumAdx = 10;
inline bool DMI::has_sumadx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DMI::set_has_sumadx() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DMI::clear_has_sumadx() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DMI::clear_sumadx() {
  sumadx_ = 0;
  clear_has_sumadx();
}
inline float DMI::sumadx() const {
  return sumadx_;
}
inline void DMI::set_sumadx(float value) {
  set_has_sumadx();
  sumadx_ = value;
}

// repeated float midadxs = 11;
inline int DMI::midadxs_size() const {
  return midadxs_.size();
}
inline void DMI::clear_midadxs() {
  midadxs_.Clear();
}
inline float DMI::midadxs(int index) const {
  return midadxs_.Get(index);
}
inline void DMI::set_midadxs(int index, float value) {
  midadxs_.Set(index, value);
}
inline void DMI::add_midadxs(float value) {
  midadxs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DMI::midadxs() const {
  return midadxs_;
}
inline ::google::protobuf::RepeatedField< float >*
DMI::mutable_midadxs() {
  return &midadxs_;
}

// repeated float adxs = 12;
inline int DMI::adxs_size() const {
  return adxs_.size();
}
inline void DMI::clear_adxs() {
  adxs_.Clear();
}
inline float DMI::adxs(int index) const {
  return adxs_.Get(index);
}
inline void DMI::set_adxs(int index, float value) {
  adxs_.Set(index, value);
}
inline void DMI::add_adxs(float value) {
  adxs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DMI::adxs() const {
  return adxs_;
}
inline ::google::protobuf::RepeatedField< float >*
DMI::mutable_adxs() {
  return &adxs_;
}

// -------------------------------------------------------------------

// PVT

// required float prevClose = 1;
inline bool PVT::has_prevclose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVT::set_has_prevclose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVT::clear_has_prevclose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVT::clear_prevclose() {
  prevclose_ = 0;
  clear_has_prevclose();
}
inline float PVT::prevclose() const {
  return prevclose_;
}
inline void PVT::set_prevclose(float value) {
  set_has_prevclose();
  prevclose_ = value;
}

// required double prevPvt = 2;
inline bool PVT::has_prevpvt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVT::set_has_prevpvt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVT::clear_has_prevpvt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVT::clear_prevpvt() {
  prevpvt_ = 0;
  clear_has_prevpvt();
}
inline double PVT::prevpvt() const {
  return prevpvt_;
}
inline void PVT::set_prevpvt(double value) {
  set_has_prevpvt();
  prevpvt_ = value;
}

// -------------------------------------------------------------------

// PBX

// required float prevEma1 = 1;
inline bool PBX::has_prevema1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBX::set_has_prevema1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBX::clear_has_prevema1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBX::clear_prevema1() {
  prevema1_ = 0;
  clear_has_prevema1();
}
inline float PBX::prevema1() const {
  return prevema1_;
}
inline void PBX::set_prevema1(float value) {
  set_has_prevema1();
  prevema1_ = value;
}

// required float prevEma2 = 2;
inline bool PBX::has_prevema2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBX::set_has_prevema2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBX::clear_has_prevema2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBX::clear_prevema2() {
  prevema2_ = 0;
  clear_has_prevema2();
}
inline float PBX::prevema2() const {
  return prevema2_;
}
inline void PBX::set_prevema2(float value) {
  set_has_prevema2();
  prevema2_ = value;
}

// required float prevEma3 = 3;
inline bool PBX::has_prevema3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBX::set_has_prevema3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBX::clear_has_prevema3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBX::clear_prevema3() {
  prevema3_ = 0;
  clear_has_prevema3();
}
inline float PBX::prevema3() const {
  return prevema3_;
}
inline void PBX::set_prevema3(float value) {
  set_has_prevema3();
  prevema3_ = value;
}

// required float prevEma4 = 4;
inline bool PBX::has_prevema4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBX::set_has_prevema4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBX::clear_has_prevema4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBX::clear_prevema4() {
  prevema4_ = 0;
  clear_has_prevema4();
}
inline float PBX::prevema4() const {
  return prevema4_;
}
inline void PBX::set_prevema4(float value) {
  set_has_prevema4();
  prevema4_ = value;
}

// required float prevEma5 = 5;
inline bool PBX::has_prevema5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBX::set_has_prevema5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBX::clear_has_prevema5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBX::clear_prevema5() {
  prevema5_ = 0;
  clear_has_prevema5();
}
inline float PBX::prevema5() const {
  return prevema5_;
}
inline void PBX::set_prevema5(float value) {
  set_has_prevema5();
  prevema5_ = value;
}

// required float prevEma6 = 6;
inline bool PBX::has_prevema6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBX::set_has_prevema6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBX::clear_has_prevema6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBX::clear_prevema6() {
  prevema6_ = 0;
  clear_has_prevema6();
}
inline float PBX::prevema6() const {
  return prevema6_;
}
inline void PBX::set_prevema6(float value) {
  set_has_prevema6();
  prevema6_ = value;
}

// required float sumShort1 = 7;
inline bool PBX::has_sumshort1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBX::set_has_sumshort1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBX::clear_has_sumshort1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBX::clear_sumshort1() {
  sumshort1_ = 0;
  clear_has_sumshort1();
}
inline float PBX::sumshort1() const {
  return sumshort1_;
}
inline void PBX::set_sumshort1(float value) {
  set_has_sumshort1();
  sumshort1_ = value;
}

// required float sumShort2 = 8;
inline bool PBX::has_sumshort2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBX::set_has_sumshort2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBX::clear_has_sumshort2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBX::clear_sumshort2() {
  sumshort2_ = 0;
  clear_has_sumshort2();
}
inline float PBX::sumshort2() const {
  return sumshort2_;
}
inline void PBX::set_sumshort2(float value) {
  set_has_sumshort2();
  sumshort2_ = value;
}

// required float sumShort3 = 9;
inline bool PBX::has_sumshort3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBX::set_has_sumshort3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBX::clear_has_sumshort3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBX::clear_sumshort3() {
  sumshort3_ = 0;
  clear_has_sumshort3();
}
inline float PBX::sumshort3() const {
  return sumshort3_;
}
inline void PBX::set_sumshort3(float value) {
  set_has_sumshort3();
  sumshort3_ = value;
}

// required float sumShort4 = 10;
inline bool PBX::has_sumshort4() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBX::set_has_sumshort4() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBX::clear_has_sumshort4() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBX::clear_sumshort4() {
  sumshort4_ = 0;
  clear_has_sumshort4();
}
inline float PBX::sumshort4() const {
  return sumshort4_;
}
inline void PBX::set_sumshort4(float value) {
  set_has_sumshort4();
  sumshort4_ = value;
}

// required float sumShort5 = 11;
inline bool PBX::has_sumshort5() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PBX::set_has_sumshort5() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PBX::clear_has_sumshort5() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PBX::clear_sumshort5() {
  sumshort5_ = 0;
  clear_has_sumshort5();
}
inline float PBX::sumshort5() const {
  return sumshort5_;
}
inline void PBX::set_sumshort5(float value) {
  set_has_sumshort5();
  sumshort5_ = value;
}

// required float sumShort6 = 12;
inline bool PBX::has_sumshort6() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PBX::set_has_sumshort6() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PBX::clear_has_sumshort6() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PBX::clear_sumshort6() {
  sumshort6_ = 0;
  clear_has_sumshort6();
}
inline float PBX::sumshort6() const {
  return sumshort6_;
}
inline void PBX::set_sumshort6(float value) {
  set_has_sumshort6();
  sumshort6_ = value;
}

// required float sumLong1 = 13;
inline bool PBX::has_sumlong1() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PBX::set_has_sumlong1() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PBX::clear_has_sumlong1() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PBX::clear_sumlong1() {
  sumlong1_ = 0;
  clear_has_sumlong1();
}
inline float PBX::sumlong1() const {
  return sumlong1_;
}
inline void PBX::set_sumlong1(float value) {
  set_has_sumlong1();
  sumlong1_ = value;
}

// required float sumLong2 = 14;
inline bool PBX::has_sumlong2() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PBX::set_has_sumlong2() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PBX::clear_has_sumlong2() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PBX::clear_sumlong2() {
  sumlong2_ = 0;
  clear_has_sumlong2();
}
inline float PBX::sumlong2() const {
  return sumlong2_;
}
inline void PBX::set_sumlong2(float value) {
  set_has_sumlong2();
  sumlong2_ = value;
}

// required float sumLong3 = 15;
inline bool PBX::has_sumlong3() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PBX::set_has_sumlong3() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PBX::clear_has_sumlong3() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PBX::clear_sumlong3() {
  sumlong3_ = 0;
  clear_has_sumlong3();
}
inline float PBX::sumlong3() const {
  return sumlong3_;
}
inline void PBX::set_sumlong3(float value) {
  set_has_sumlong3();
  sumlong3_ = value;
}

// required float sumLong4 = 16;
inline bool PBX::has_sumlong4() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PBX::set_has_sumlong4() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PBX::clear_has_sumlong4() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PBX::clear_sumlong4() {
  sumlong4_ = 0;
  clear_has_sumlong4();
}
inline float PBX::sumlong4() const {
  return sumlong4_;
}
inline void PBX::set_sumlong4(float value) {
  set_has_sumlong4();
  sumlong4_ = value;
}

// required float sumLong5 = 17;
inline bool PBX::has_sumlong5() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PBX::set_has_sumlong5() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PBX::clear_has_sumlong5() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PBX::clear_sumlong5() {
  sumlong5_ = 0;
  clear_has_sumlong5();
}
inline float PBX::sumlong5() const {
  return sumlong5_;
}
inline void PBX::set_sumlong5(float value) {
  set_has_sumlong5();
  sumlong5_ = value;
}

// required float sumLong6 = 18;
inline bool PBX::has_sumlong6() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PBX::set_has_sumlong6() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PBX::clear_has_sumlong6() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PBX::clear_sumlong6() {
  sumlong6_ = 0;
  clear_has_sumlong6();
}
inline float PBX::sumlong6() const {
  return sumlong6_;
}
inline void PBX::set_sumlong6(float value) {
  set_has_sumlong6();
  sumlong6_ = value;
}

// -------------------------------------------------------------------

// SKDJ

// required float hhv = 1;
inline bool SKDJ::has_hhv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SKDJ::set_has_hhv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SKDJ::clear_has_hhv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SKDJ::clear_hhv() {
  hhv_ = 0;
  clear_has_hhv();
}
inline float SKDJ::hhv() const {
  return hhv_;
}
inline void SKDJ::set_hhv(float value) {
  set_has_hhv();
  hhv_ = value;
}

// required float llv = 2;
inline bool SKDJ::has_llv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SKDJ::set_has_llv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SKDJ::clear_has_llv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SKDJ::clear_llv() {
  llv_ = 0;
  clear_has_llv();
}
inline float SKDJ::llv() const {
  return llv_;
}
inline void SKDJ::set_llv(float value) {
  set_has_llv();
  llv_ = value;
}

// repeated float hhvs = 3;
inline int SKDJ::hhvs_size() const {
  return hhvs_.size();
}
inline void SKDJ::clear_hhvs() {
  hhvs_.Clear();
}
inline float SKDJ::hhvs(int index) const {
  return hhvs_.Get(index);
}
inline void SKDJ::set_hhvs(int index, float value) {
  hhvs_.Set(index, value);
}
inline void SKDJ::add_hhvs(float value) {
  hhvs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
SKDJ::hhvs() const {
  return hhvs_;
}
inline ::google::protobuf::RepeatedField< float >*
SKDJ::mutable_hhvs() {
  return &hhvs_;
}

// repeated float llvs = 4;
inline int SKDJ::llvs_size() const {
  return llvs_.size();
}
inline void SKDJ::clear_llvs() {
  llvs_.Clear();
}
inline float SKDJ::llvs(int index) const {
  return llvs_.Get(index);
}
inline void SKDJ::set_llvs(int index, float value) {
  llvs_.Set(index, value);
}
inline void SKDJ::add_llvs(float value) {
  llvs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
SKDJ::llvs() const {
  return llvs_;
}
inline ::google::protobuf::RepeatedField< float >*
SKDJ::mutable_llvs() {
  return &llvs_;
}

// required float k = 5;
inline bool SKDJ::has_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SKDJ::set_has_k() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SKDJ::clear_has_k() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SKDJ::clear_k() {
  k_ = 0;
  clear_has_k();
}
inline float SKDJ::k() const {
  return k_;
}
inline void SKDJ::set_k(float value) {
  set_has_k();
  k_ = value;
}

// required float d = 6;
inline bool SKDJ::has_d() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SKDJ::set_has_d() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SKDJ::clear_has_d() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SKDJ::clear_d() {
  d_ = 0;
  clear_has_d();
}
inline float SKDJ::d() const {
  return d_;
}
inline void SKDJ::set_d(float value) {
  set_has_d();
  d_ = value;
}

// required float fastk = 7;
inline bool SKDJ::has_fastk() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SKDJ::set_has_fastk() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SKDJ::clear_has_fastk() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SKDJ::clear_fastk() {
  fastk_ = 0;
  clear_has_fastk();
}
inline float SKDJ::fastk() const {
  return fastk_;
}
inline void SKDJ::set_fastk(float value) {
  set_has_fastk();
  fastk_ = value;
}

// -------------------------------------------------------------------

// MIDVAL

// required string date = 1;
inline bool MIDVAL::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MIDVAL::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MIDVAL::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MIDVAL::clear_date() {
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    date_->clear();
  }
  clear_has_date();
}
inline const ::std::string& MIDVAL::date() const {
  return *date_;
}
inline void MIDVAL::set_date(const ::std::string& value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void MIDVAL::set_date(const char* value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void MIDVAL::set_date(const char* value, size_t size) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MIDVAL::mutable_date() {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  return date_;
}
inline ::std::string* MIDVAL::release_date() {
  clear_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = date_;
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required float open = 2;
inline bool MIDVAL::has_open() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MIDVAL::set_has_open() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MIDVAL::clear_has_open() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MIDVAL::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline float MIDVAL::open() const {
  return open_;
}
inline void MIDVAL::set_open(float value) {
  set_has_open();
  open_ = value;
}

// required float high = 3;
inline bool MIDVAL::has_high() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MIDVAL::set_has_high() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MIDVAL::clear_has_high() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MIDVAL::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline float MIDVAL::high() const {
  return high_;
}
inline void MIDVAL::set_high(float value) {
  set_has_high();
  high_ = value;
}

// required float low = 4;
inline bool MIDVAL::has_low() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MIDVAL::set_has_low() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MIDVAL::clear_has_low() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MIDVAL::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline float MIDVAL::low() const {
  return low_;
}
inline void MIDVAL::set_low(float value) {
  set_has_low();
  low_ = value;
}

// required float close = 5;
inline bool MIDVAL::has_close() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MIDVAL::set_has_close() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MIDVAL::clear_has_close() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MIDVAL::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline float MIDVAL::close() const {
  return close_;
}
inline void MIDVAL::set_close(float value) {
  set_has_close();
  close_ = value;
}

// required float zjcj = 6;
inline bool MIDVAL::has_zjcj() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MIDVAL::set_has_zjcj() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MIDVAL::clear_has_zjcj() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MIDVAL::clear_zjcj() {
  zjcj_ = 0;
  clear_has_zjcj();
}
inline float MIDVAL::zjcj() const {
  return zjcj_;
}
inline void MIDVAL::set_zjcj(float value) {
  set_has_zjcj();
  zjcj_ = value;
}

// required double cjsl = 7;
inline bool MIDVAL::has_cjsl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MIDVAL::set_has_cjsl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MIDVAL::clear_has_cjsl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MIDVAL::clear_cjsl() {
  cjsl_ = 0;
  clear_has_cjsl();
}
inline double MIDVAL::cjsl() const {
  return cjsl_;
}
inline void MIDVAL::set_cjsl(double value) {
  set_has_cjsl();
  cjsl_ = value;
}

// required double cjje = 8;
inline bool MIDVAL::has_cjje() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MIDVAL::set_has_cjje() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MIDVAL::clear_has_cjje() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MIDVAL::clear_cjje() {
  cjje_ = 0;
  clear_has_cjje();
}
inline double MIDVAL::cjje() const {
  return cjje_;
}
inline void MIDVAL::set_cjje(double value) {
  set_has_cjje();
  cjje_ = value;
}

// -------------------------------------------------------------------

// KLINEIDX

// required int32 date = 1;
inline bool KLINEIDX::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KLINEIDX::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KLINEIDX::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KLINEIDX::clear_date() {
  date_ = 0;
  clear_has_date();
}
inline ::google::protobuf::int32 KLINEIDX::date() const {
  return date_;
}
inline void KLINEIDX::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
}

// required int32 offset = 2;
inline bool KLINEIDX::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KLINEIDX::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KLINEIDX::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KLINEIDX::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 KLINEIDX::offset() const {
  return offset_;
}
inline void KLINEIDX::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// -------------------------------------------------------------------

// TEMP

// optional .cssweb.kline.mid.MA ma = 1;
inline bool TEMP::has_ma() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEMP::set_has_ma() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEMP::clear_has_ma() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEMP::clear_ma() {
  if (ma_ != NULL) ma_->::cssweb::kline::mid::MA::Clear();
  clear_has_ma();
}
inline const ::cssweb::kline::mid::MA& TEMP::ma() const {
  return ma_ != NULL ? *ma_ : *default_instance_->ma_;
}
inline ::cssweb::kline::mid::MA* TEMP::mutable_ma() {
  set_has_ma();
  if (ma_ == NULL) ma_ = new ::cssweb::kline::mid::MA;
  return ma_;
}
inline ::cssweb::kline::mid::MA* TEMP::release_ma() {
  clear_has_ma();
  ::cssweb::kline::mid::MA* temp = ma_;
  ma_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.MACD macd = 2;
inline bool TEMP::has_macd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEMP::set_has_macd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEMP::clear_has_macd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEMP::clear_macd() {
  if (macd_ != NULL) macd_->::cssweb::kline::mid::MACD::Clear();
  clear_has_macd();
}
inline const ::cssweb::kline::mid::MACD& TEMP::macd() const {
  return macd_ != NULL ? *macd_ : *default_instance_->macd_;
}
inline ::cssweb::kline::mid::MACD* TEMP::mutable_macd() {
  set_has_macd();
  if (macd_ == NULL) macd_ = new ::cssweb::kline::mid::MACD;
  return macd_;
}
inline ::cssweb::kline::mid::MACD* TEMP::release_macd() {
  clear_has_macd();
  ::cssweb::kline::mid::MACD* temp = macd_;
  macd_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.CCI cci = 3;
inline bool TEMP::has_cci() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TEMP::set_has_cci() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TEMP::clear_has_cci() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TEMP::clear_cci() {
  if (cci_ != NULL) cci_->::cssweb::kline::mid::CCI::Clear();
  clear_has_cci();
}
inline const ::cssweb::kline::mid::CCI& TEMP::cci() const {
  return cci_ != NULL ? *cci_ : *default_instance_->cci_;
}
inline ::cssweb::kline::mid::CCI* TEMP::mutable_cci() {
  set_has_cci();
  if (cci_ == NULL) cci_ = new ::cssweb::kline::mid::CCI;
  return cci_;
}
inline ::cssweb::kline::mid::CCI* TEMP::release_cci() {
  clear_has_cci();
  ::cssweb::kline::mid::CCI* temp = cci_;
  cci_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.BIAS bias = 4;
inline bool TEMP::has_bias() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TEMP::set_has_bias() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TEMP::clear_has_bias() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TEMP::clear_bias() {
  if (bias_ != NULL) bias_->::cssweb::kline::mid::BIAS::Clear();
  clear_has_bias();
}
inline const ::cssweb::kline::mid::BIAS& TEMP::bias() const {
  return bias_ != NULL ? *bias_ : *default_instance_->bias_;
}
inline ::cssweb::kline::mid::BIAS* TEMP::mutable_bias() {
  set_has_bias();
  if (bias_ == NULL) bias_ = new ::cssweb::kline::mid::BIAS;
  return bias_;
}
inline ::cssweb::kline::mid::BIAS* TEMP::release_bias() {
  clear_has_bias();
  ::cssweb::kline::mid::BIAS* temp = bias_;
  bias_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.KDJ kdj = 5;
inline bool TEMP::has_kdj() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TEMP::set_has_kdj() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TEMP::clear_has_kdj() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TEMP::clear_kdj() {
  if (kdj_ != NULL) kdj_->::cssweb::kline::mid::KDJ::Clear();
  clear_has_kdj();
}
inline const ::cssweb::kline::mid::KDJ& TEMP::kdj() const {
  return kdj_ != NULL ? *kdj_ : *default_instance_->kdj_;
}
inline ::cssweb::kline::mid::KDJ* TEMP::mutable_kdj() {
  set_has_kdj();
  if (kdj_ == NULL) kdj_ = new ::cssweb::kline::mid::KDJ;
  return kdj_;
}
inline ::cssweb::kline::mid::KDJ* TEMP::release_kdj() {
  clear_has_kdj();
  ::cssweb::kline::mid::KDJ* temp = kdj_;
  kdj_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.RSI rsi = 6;
inline bool TEMP::has_rsi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TEMP::set_has_rsi() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TEMP::clear_has_rsi() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TEMP::clear_rsi() {
  if (rsi_ != NULL) rsi_->::cssweb::kline::mid::RSI::Clear();
  clear_has_rsi();
}
inline const ::cssweb::kline::mid::RSI& TEMP::rsi() const {
  return rsi_ != NULL ? *rsi_ : *default_instance_->rsi_;
}
inline ::cssweb::kline::mid::RSI* TEMP::mutable_rsi() {
  set_has_rsi();
  if (rsi_ == NULL) rsi_ = new ::cssweb::kline::mid::RSI;
  return rsi_;
}
inline ::cssweb::kline::mid::RSI* TEMP::release_rsi() {
  clear_has_rsi();
  ::cssweb::kline::mid::RSI* temp = rsi_;
  rsi_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.OBV obv = 7;
inline bool TEMP::has_obv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TEMP::set_has_obv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TEMP::clear_has_obv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TEMP::clear_obv() {
  if (obv_ != NULL) obv_->::cssweb::kline::mid::OBV::Clear();
  clear_has_obv();
}
inline const ::cssweb::kline::mid::OBV& TEMP::obv() const {
  return obv_ != NULL ? *obv_ : *default_instance_->obv_;
}
inline ::cssweb::kline::mid::OBV* TEMP::mutable_obv() {
  set_has_obv();
  if (obv_ == NULL) obv_ = new ::cssweb::kline::mid::OBV;
  return obv_;
}
inline ::cssweb::kline::mid::OBV* TEMP::release_obv() {
  clear_has_obv();
  ::cssweb::kline::mid::OBV* temp = obv_;
  obv_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.BOLL boll = 8;
inline bool TEMP::has_boll() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TEMP::set_has_boll() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TEMP::clear_has_boll() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TEMP::clear_boll() {
  if (boll_ != NULL) boll_->::cssweb::kline::mid::BOLL::Clear();
  clear_has_boll();
}
inline const ::cssweb::kline::mid::BOLL& TEMP::boll() const {
  return boll_ != NULL ? *boll_ : *default_instance_->boll_;
}
inline ::cssweb::kline::mid::BOLL* TEMP::mutable_boll() {
  set_has_boll();
  if (boll_ == NULL) boll_ = new ::cssweb::kline::mid::BOLL;
  return boll_;
}
inline ::cssweb::kline::mid::BOLL* TEMP::release_boll() {
  clear_has_boll();
  ::cssweb::kline::mid::BOLL* temp = boll_;
  boll_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.PSY psy = 9;
inline bool TEMP::has_psy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TEMP::set_has_psy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TEMP::clear_has_psy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TEMP::clear_psy() {
  if (psy_ != NULL) psy_->::cssweb::kline::mid::PSY::Clear();
  clear_has_psy();
}
inline const ::cssweb::kline::mid::PSY& TEMP::psy() const {
  return psy_ != NULL ? *psy_ : *default_instance_->psy_;
}
inline ::cssweb::kline::mid::PSY* TEMP::mutable_psy() {
  set_has_psy();
  if (psy_ == NULL) psy_ = new ::cssweb::kline::mid::PSY;
  return psy_;
}
inline ::cssweb::kline::mid::PSY* TEMP::release_psy() {
  clear_has_psy();
  ::cssweb::kline::mid::PSY* temp = psy_;
  psy_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.ROC roc = 10;
inline bool TEMP::has_roc() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TEMP::set_has_roc() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TEMP::clear_has_roc() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TEMP::clear_roc() {
  if (roc_ != NULL) roc_->::cssweb::kline::mid::ROC::Clear();
  clear_has_roc();
}
inline const ::cssweb::kline::mid::ROC& TEMP::roc() const {
  return roc_ != NULL ? *roc_ : *default_instance_->roc_;
}
inline ::cssweb::kline::mid::ROC* TEMP::mutable_roc() {
  set_has_roc();
  if (roc_ == NULL) roc_ = new ::cssweb::kline::mid::ROC;
  return roc_;
}
inline ::cssweb::kline::mid::ROC* TEMP::release_roc() {
  clear_has_roc();
  ::cssweb::kline::mid::ROC* temp = roc_;
  roc_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.WR wr = 11;
inline bool TEMP::has_wr() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TEMP::set_has_wr() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TEMP::clear_has_wr() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TEMP::clear_wr() {
  if (wr_ != NULL) wr_->::cssweb::kline::mid::WR::Clear();
  clear_has_wr();
}
inline const ::cssweb::kline::mid::WR& TEMP::wr() const {
  return wr_ != NULL ? *wr_ : *default_instance_->wr_;
}
inline ::cssweb::kline::mid::WR* TEMP::mutable_wr() {
  set_has_wr();
  if (wr_ == NULL) wr_ = new ::cssweb::kline::mid::WR;
  return wr_;
}
inline ::cssweb::kline::mid::WR* TEMP::release_wr() {
  clear_has_wr();
  ::cssweb::kline::mid::WR* temp = wr_;
  wr_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.VR vr = 12;
inline bool TEMP::has_vr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TEMP::set_has_vr() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TEMP::clear_has_vr() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TEMP::clear_vr() {
  if (vr_ != NULL) vr_->::cssweb::kline::mid::VR::Clear();
  clear_has_vr();
}
inline const ::cssweb::kline::mid::VR& TEMP::vr() const {
  return vr_ != NULL ? *vr_ : *default_instance_->vr_;
}
inline ::cssweb::kline::mid::VR* TEMP::mutable_vr() {
  set_has_vr();
  if (vr_ == NULL) vr_ = new ::cssweb::kline::mid::VR;
  return vr_;
}
inline ::cssweb::kline::mid::VR* TEMP::release_vr() {
  clear_has_vr();
  ::cssweb::kline::mid::VR* temp = vr_;
  vr_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.ARBR arbr = 13;
inline bool TEMP::has_arbr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TEMP::set_has_arbr() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TEMP::clear_has_arbr() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TEMP::clear_arbr() {
  if (arbr_ != NULL) arbr_->::cssweb::kline::mid::ARBR::Clear();
  clear_has_arbr();
}
inline const ::cssweb::kline::mid::ARBR& TEMP::arbr() const {
  return arbr_ != NULL ? *arbr_ : *default_instance_->arbr_;
}
inline ::cssweb::kline::mid::ARBR* TEMP::mutable_arbr() {
  set_has_arbr();
  if (arbr_ == NULL) arbr_ = new ::cssweb::kline::mid::ARBR;
  return arbr_;
}
inline ::cssweb::kline::mid::ARBR* TEMP::release_arbr() {
  clear_has_arbr();
  ::cssweb::kline::mid::ARBR* temp = arbr_;
  arbr_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.CR cr = 14;
inline bool TEMP::has_cr() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TEMP::set_has_cr() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TEMP::clear_has_cr() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TEMP::clear_cr() {
  if (cr_ != NULL) cr_->::cssweb::kline::mid::CR::Clear();
  clear_has_cr();
}
inline const ::cssweb::kline::mid::CR& TEMP::cr() const {
  return cr_ != NULL ? *cr_ : *default_instance_->cr_;
}
inline ::cssweb::kline::mid::CR* TEMP::mutable_cr() {
  set_has_cr();
  if (cr_ == NULL) cr_ = new ::cssweb::kline::mid::CR;
  return cr_;
}
inline ::cssweb::kline::mid::CR* TEMP::release_cr() {
  clear_has_cr();
  ::cssweb::kline::mid::CR* temp = cr_;
  cr_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.CDP cdp = 15;
inline bool TEMP::has_cdp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TEMP::set_has_cdp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TEMP::clear_has_cdp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TEMP::clear_cdp() {
  if (cdp_ != NULL) cdp_->::cssweb::kline::mid::CDP::Clear();
  clear_has_cdp();
}
inline const ::cssweb::kline::mid::CDP& TEMP::cdp() const {
  return cdp_ != NULL ? *cdp_ : *default_instance_->cdp_;
}
inline ::cssweb::kline::mid::CDP* TEMP::mutable_cdp() {
  set_has_cdp();
  if (cdp_ == NULL) cdp_ = new ::cssweb::kline::mid::CDP;
  return cdp_;
}
inline ::cssweb::kline::mid::CDP* TEMP::release_cdp() {
  clear_has_cdp();
  ::cssweb::kline::mid::CDP* temp = cdp_;
  cdp_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.DMA dma = 16;
inline bool TEMP::has_dma() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TEMP::set_has_dma() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TEMP::clear_has_dma() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TEMP::clear_dma() {
  if (dma_ != NULL) dma_->::cssweb::kline::mid::DMA::Clear();
  clear_has_dma();
}
inline const ::cssweb::kline::mid::DMA& TEMP::dma() const {
  return dma_ != NULL ? *dma_ : *default_instance_->dma_;
}
inline ::cssweb::kline::mid::DMA* TEMP::mutable_dma() {
  set_has_dma();
  if (dma_ == NULL) dma_ = new ::cssweb::kline::mid::DMA;
  return dma_;
}
inline ::cssweb::kline::mid::DMA* TEMP::release_dma() {
  clear_has_dma();
  ::cssweb::kline::mid::DMA* temp = dma_;
  dma_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.MTM mtm = 17;
inline bool TEMP::has_mtm() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TEMP::set_has_mtm() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TEMP::clear_has_mtm() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TEMP::clear_mtm() {
  if (mtm_ != NULL) mtm_->::cssweb::kline::mid::MTM::Clear();
  clear_has_mtm();
}
inline const ::cssweb::kline::mid::MTM& TEMP::mtm() const {
  return mtm_ != NULL ? *mtm_ : *default_instance_->mtm_;
}
inline ::cssweb::kline::mid::MTM* TEMP::mutable_mtm() {
  set_has_mtm();
  if (mtm_ == NULL) mtm_ = new ::cssweb::kline::mid::MTM;
  return mtm_;
}
inline ::cssweb::kline::mid::MTM* TEMP::release_mtm() {
  clear_has_mtm();
  ::cssweb::kline::mid::MTM* temp = mtm_;
  mtm_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.BBI bbi = 18;
inline bool TEMP::has_bbi() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TEMP::set_has_bbi() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TEMP::clear_has_bbi() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TEMP::clear_bbi() {
  if (bbi_ != NULL) bbi_->::cssweb::kline::mid::BBI::Clear();
  clear_has_bbi();
}
inline const ::cssweb::kline::mid::BBI& TEMP::bbi() const {
  return bbi_ != NULL ? *bbi_ : *default_instance_->bbi_;
}
inline ::cssweb::kline::mid::BBI* TEMP::mutable_bbi() {
  set_has_bbi();
  if (bbi_ == NULL) bbi_ = new ::cssweb::kline::mid::BBI;
  return bbi_;
}
inline ::cssweb::kline::mid::BBI* TEMP::release_bbi() {
  clear_has_bbi();
  ::cssweb::kline::mid::BBI* temp = bbi_;
  bbi_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.TRIX trix = 19;
inline bool TEMP::has_trix() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TEMP::set_has_trix() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TEMP::clear_has_trix() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TEMP::clear_trix() {
  if (trix_ != NULL) trix_->::cssweb::kline::mid::TRIX::Clear();
  clear_has_trix();
}
inline const ::cssweb::kline::mid::TRIX& TEMP::trix() const {
  return trix_ != NULL ? *trix_ : *default_instance_->trix_;
}
inline ::cssweb::kline::mid::TRIX* TEMP::mutable_trix() {
  set_has_trix();
  if (trix_ == NULL) trix_ = new ::cssweb::kline::mid::TRIX;
  return trix_;
}
inline ::cssweb::kline::mid::TRIX* TEMP::release_trix() {
  clear_has_trix();
  ::cssweb::kline::mid::TRIX* temp = trix_;
  trix_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.ZLJC zljc = 20;
inline bool TEMP::has_zljc() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TEMP::set_has_zljc() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TEMP::clear_has_zljc() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TEMP::clear_zljc() {
  if (zljc_ != NULL) zljc_->::cssweb::kline::mid::ZLJC::Clear();
  clear_has_zljc();
}
inline const ::cssweb::kline::mid::ZLJC& TEMP::zljc() const {
  return zljc_ != NULL ? *zljc_ : *default_instance_->zljc_;
}
inline ::cssweb::kline::mid::ZLJC* TEMP::mutable_zljc() {
  set_has_zljc();
  if (zljc_ == NULL) zljc_ = new ::cssweb::kline::mid::ZLJC;
  return zljc_;
}
inline ::cssweb::kline::mid::ZLJC* TEMP::release_zljc() {
  clear_has_zljc();
  ::cssweb::kline::mid::ZLJC* temp = zljc_;
  zljc_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.ASI asi = 21;
inline bool TEMP::has_asi() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TEMP::set_has_asi() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TEMP::clear_has_asi() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TEMP::clear_asi() {
  if (asi_ != NULL) asi_->::cssweb::kline::mid::ASI::Clear();
  clear_has_asi();
}
inline const ::cssweb::kline::mid::ASI& TEMP::asi() const {
  return asi_ != NULL ? *asi_ : *default_instance_->asi_;
}
inline ::cssweb::kline::mid::ASI* TEMP::mutable_asi() {
  set_has_asi();
  if (asi_ == NULL) asi_ = new ::cssweb::kline::mid::ASI;
  return asi_;
}
inline ::cssweb::kline::mid::ASI* TEMP::release_asi() {
  clear_has_asi();
  ::cssweb::kline::mid::ASI* temp = asi_;
  asi_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.EXPMA ema = 22;
inline bool TEMP::has_ema() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TEMP::set_has_ema() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TEMP::clear_has_ema() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TEMP::clear_ema() {
  if (ema_ != NULL) ema_->::cssweb::kline::mid::EXPMA::Clear();
  clear_has_ema();
}
inline const ::cssweb::kline::mid::EXPMA& TEMP::ema() const {
  return ema_ != NULL ? *ema_ : *default_instance_->ema_;
}
inline ::cssweb::kline::mid::EXPMA* TEMP::mutable_ema() {
  set_has_ema();
  if (ema_ == NULL) ema_ = new ::cssweb::kline::mid::EXPMA;
  return ema_;
}
inline ::cssweb::kline::mid::EXPMA* TEMP::release_ema() {
  clear_has_ema();
  ::cssweb::kline::mid::EXPMA* temp = ema_;
  ema_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.DMI dmi = 23;
inline bool TEMP::has_dmi() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TEMP::set_has_dmi() {
  _has_bits_[0] |= 0x00400000u;
}
inline void TEMP::clear_has_dmi() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void TEMP::clear_dmi() {
  if (dmi_ != NULL) dmi_->::cssweb::kline::mid::DMI::Clear();
  clear_has_dmi();
}
inline const ::cssweb::kline::mid::DMI& TEMP::dmi() const {
  return dmi_ != NULL ? *dmi_ : *default_instance_->dmi_;
}
inline ::cssweb::kline::mid::DMI* TEMP::mutable_dmi() {
  set_has_dmi();
  if (dmi_ == NULL) dmi_ = new ::cssweb::kline::mid::DMI;
  return dmi_;
}
inline ::cssweb::kline::mid::DMI* TEMP::release_dmi() {
  clear_has_dmi();
  ::cssweb::kline::mid::DMI* temp = dmi_;
  dmi_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.PVT pvt = 24;
inline bool TEMP::has_pvt() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TEMP::set_has_pvt() {
  _has_bits_[0] |= 0x00800000u;
}
inline void TEMP::clear_has_pvt() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void TEMP::clear_pvt() {
  if (pvt_ != NULL) pvt_->::cssweb::kline::mid::PVT::Clear();
  clear_has_pvt();
}
inline const ::cssweb::kline::mid::PVT& TEMP::pvt() const {
  return pvt_ != NULL ? *pvt_ : *default_instance_->pvt_;
}
inline ::cssweb::kline::mid::PVT* TEMP::mutable_pvt() {
  set_has_pvt();
  if (pvt_ == NULL) pvt_ = new ::cssweb::kline::mid::PVT;
  return pvt_;
}
inline ::cssweb::kline::mid::PVT* TEMP::release_pvt() {
  clear_has_pvt();
  ::cssweb::kline::mid::PVT* temp = pvt_;
  pvt_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.PBX pbx = 25;
inline bool TEMP::has_pbx() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TEMP::set_has_pbx() {
  _has_bits_[0] |= 0x01000000u;
}
inline void TEMP::clear_has_pbx() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void TEMP::clear_pbx() {
  if (pbx_ != NULL) pbx_->::cssweb::kline::mid::PBX::Clear();
  clear_has_pbx();
}
inline const ::cssweb::kline::mid::PBX& TEMP::pbx() const {
  return pbx_ != NULL ? *pbx_ : *default_instance_->pbx_;
}
inline ::cssweb::kline::mid::PBX* TEMP::mutable_pbx() {
  set_has_pbx();
  if (pbx_ == NULL) pbx_ = new ::cssweb::kline::mid::PBX;
  return pbx_;
}
inline ::cssweb::kline::mid::PBX* TEMP::release_pbx() {
  clear_has_pbx();
  ::cssweb::kline::mid::PBX* temp = pbx_;
  pbx_ = NULL;
  return temp;
}

// optional .cssweb.kline.mid.SKDJ skdj = 26;
inline bool TEMP::has_skdj() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void TEMP::set_has_skdj() {
  _has_bits_[0] |= 0x02000000u;
}
inline void TEMP::clear_has_skdj() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void TEMP::clear_skdj() {
  if (skdj_ != NULL) skdj_->::cssweb::kline::mid::SKDJ::Clear();
  clear_has_skdj();
}
inline const ::cssweb::kline::mid::SKDJ& TEMP::skdj() const {
  return skdj_ != NULL ? *skdj_ : *default_instance_->skdj_;
}
inline ::cssweb::kline::mid::SKDJ* TEMP::mutable_skdj() {
  set_has_skdj();
  if (skdj_ == NULL) skdj_ = new ::cssweb::kline::mid::SKDJ;
  return skdj_;
}
inline ::cssweb::kline::mid::SKDJ* TEMP::release_skdj() {
  clear_has_skdj();
  ::cssweb::kline::mid::SKDJ* temp = skdj_;
  skdj_ = NULL;
  return temp;
}

// optional int32 file = 27;
inline bool TEMP::has_file() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void TEMP::set_has_file() {
  _has_bits_[0] |= 0x04000000u;
}
inline void TEMP::clear_has_file() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void TEMP::clear_file() {
  file_ = 0;
  clear_has_file();
}
inline ::google::protobuf::int32 TEMP::file() const {
  return file_;
}
inline void TEMP::set_file(::google::protobuf::int32 value) {
  set_has_file();
  file_ = value;
}

// optional string quotetime = 28;
inline bool TEMP::has_quotetime() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void TEMP::set_has_quotetime() {
  _has_bits_[0] |= 0x08000000u;
}
inline void TEMP::clear_has_quotetime() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void TEMP::clear_quotetime() {
  if (quotetime_ != &::google::protobuf::internal::kEmptyString) {
    quotetime_->clear();
  }
  clear_has_quotetime();
}
inline const ::std::string& TEMP::quotetime() const {
  return *quotetime_;
}
inline void TEMP::set_quotetime(const ::std::string& value) {
  set_has_quotetime();
  if (quotetime_ == &::google::protobuf::internal::kEmptyString) {
    quotetime_ = new ::std::string;
  }
  quotetime_->assign(value);
}
inline void TEMP::set_quotetime(const char* value) {
  set_has_quotetime();
  if (quotetime_ == &::google::protobuf::internal::kEmptyString) {
    quotetime_ = new ::std::string;
  }
  quotetime_->assign(value);
}
inline void TEMP::set_quotetime(const char* value, size_t size) {
  set_has_quotetime();
  if (quotetime_ == &::google::protobuf::internal::kEmptyString) {
    quotetime_ = new ::std::string;
  }
  quotetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TEMP::mutable_quotetime() {
  set_has_quotetime();
  if (quotetime_ == &::google::protobuf::internal::kEmptyString) {
    quotetime_ = new ::std::string;
  }
  return quotetime_;
}
inline ::std::string* TEMP::release_quotetime() {
  clear_has_quotetime();
  if (quotetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = quotetime_;
    quotetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .cssweb.kline.mid.MIDVAL midval = 29;
inline bool TEMP::has_midval() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void TEMP::set_has_midval() {
  _has_bits_[0] |= 0x10000000u;
}
inline void TEMP::clear_has_midval() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void TEMP::clear_midval() {
  if (midval_ != NULL) midval_->::cssweb::kline::mid::MIDVAL::Clear();
  clear_has_midval();
}
inline const ::cssweb::kline::mid::MIDVAL& TEMP::midval() const {
  return midval_ != NULL ? *midval_ : *default_instance_->midval_;
}
inline ::cssweb::kline::mid::MIDVAL* TEMP::mutable_midval() {
  set_has_midval();
  if (midval_ == NULL) midval_ = new ::cssweb::kline::mid::MIDVAL;
  return midval_;
}
inline ::cssweb::kline::mid::MIDVAL* TEMP::release_midval() {
  clear_has_midval();
  ::cssweb::kline::mid::MIDVAL* temp = midval_;
  midval_ = NULL;
  return temp;
}

// optional int32 linenum = 30;
inline bool TEMP::has_linenum() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void TEMP::set_has_linenum() {
  _has_bits_[0] |= 0x20000000u;
}
inline void TEMP::clear_has_linenum() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void TEMP::clear_linenum() {
  linenum_ = 0;
  clear_has_linenum();
}
inline ::google::protobuf::int32 TEMP::linenum() const {
  return linenum_;
}
inline void TEMP::set_linenum(::google::protobuf::int32 value) {
  set_has_linenum();
  linenum_ = value;
}

// repeated .cssweb.kline.mid.KLINEIDX klineIdx = 31;
inline int TEMP::klineidx_size() const {
  return klineidx_.size();
}
inline void TEMP::clear_klineidx() {
  klineidx_.Clear();
}
inline const ::cssweb::kline::mid::KLINEIDX& TEMP::klineidx(int index) const {
  return klineidx_.Get(index);
}
inline ::cssweb::kline::mid::KLINEIDX* TEMP::mutable_klineidx(int index) {
  return klineidx_.Mutable(index);
}
inline ::cssweb::kline::mid::KLINEIDX* TEMP::add_klineidx() {
  return klineidx_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cssweb::kline::mid::KLINEIDX >&
TEMP::klineidx() const {
  return klineidx_;
}
inline ::google::protobuf::RepeatedPtrField< ::cssweb::kline::mid::KLINEIDX >*
TEMP::mutable_klineidx() {
  return &klineidx_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mid
}  // namespace kline
}  // namespace cssweb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_idxtemp_2eproto__INCLUDED
