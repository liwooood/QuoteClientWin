// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stockpool.proto

#ifndef PROTOBUF_stockpool_2eproto__INCLUDED
#define PROTOBUF_stockpool_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace quote {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_stockpool_2eproto();
void protobuf_AssignDesc_stockpool_2eproto();
void protobuf_ShutdownFile_stockpool_2eproto();

class Stock;
class Pool;
class PoolType;
class AddStockRequest;
class AddStockResponse;
class UpdateStockRequest;
class UpdateStockResponse;
class QueryStockRequest;
class QueryStockResponse;
class UpdatePoolRequest;
class UpdatePoolResponse;
class QueryPoolRequest;
class QueryPoolResponse;
class UpdatePoolTypeRequest;
class UpdatePoolTypeResponse;
class QueryPoolTypeRequest;
class QueryPoolTypeResponse;

// ===================================================================

class Stock : public ::google::protobuf::Message {
 public:
  Stock();
  virtual ~Stock();
  
  Stock(const Stock& from);
  
  inline Stock& operator=(const Stock& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Stock& default_instance();
  
  void Swap(Stock* other);
  
  // implements Message ----------------------------------------------
  
  Stock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stock& from);
  void MergeFrom(const Stock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string secucode = 1;
  inline bool has_secucode() const;
  inline void clear_secucode();
  static const int kSecucodeFieldNumber = 1;
  inline const ::std::string& secucode() const;
  inline void set_secucode(const ::std::string& value);
  inline void set_secucode(const char* value);
  inline void set_secucode(const char* value, size_t size);
  inline ::std::string* mutable_secucode();
  inline ::std::string* release_secucode();
  
  // required int32 exchange = 2;
  inline bool has_exchange() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  inline ::google::protobuf::int32 exchange() const;
  inline void set_exchange(::google::protobuf::int32 value);
  
  // optional bool remove = 3;
  inline bool has_remove() const;
  inline void clear_remove();
  static const int kRemoveFieldNumber = 3;
  inline bool remove() const;
  inline void set_remove(bool value);
  
  // required int32 pooltype = 4;
  inline bool has_pooltype() const;
  inline void clear_pooltype();
  static const int kPooltypeFieldNumber = 4;
  inline ::google::protobuf::int32 pooltype() const;
  inline void set_pooltype(::google::protobuf::int32 value);
  
  // required int32 poolgroup = 5;
  inline bool has_poolgroup() const;
  inline void clear_poolgroup();
  static const int kPoolgroupFieldNumber = 5;
  inline ::google::protobuf::int32 poolgroup() const;
  inline void set_poolgroup(::google::protobuf::int32 value);
  
  // optional int32 seqno = 6;
  inline bool has_seqno() const;
  inline void clear_seqno();
  static const int kSeqnoFieldNumber = 6;
  inline ::google::protobuf::int32 seqno() const;
  inline void set_seqno(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:quote.Stock)
 private:
  inline void set_has_secucode();
  inline void clear_has_secucode();
  inline void set_has_exchange();
  inline void clear_has_exchange();
  inline void set_has_remove();
  inline void clear_has_remove();
  inline void set_has_pooltype();
  inline void clear_has_pooltype();
  inline void set_has_poolgroup();
  inline void clear_has_poolgroup();
  inline void set_has_seqno();
  inline void clear_has_seqno();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* secucode_;
  ::google::protobuf::int32 exchange_;
  bool remove_;
  ::google::protobuf::int32 pooltype_;
  ::google::protobuf::int32 poolgroup_;
  ::google::protobuf::int32 seqno_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpool_2eproto();
  friend void protobuf_AssignDesc_stockpool_2eproto();
  friend void protobuf_ShutdownFile_stockpool_2eproto();
  
  void InitAsDefaultInstance();
  static Stock* default_instance_;
};
// -------------------------------------------------------------------

class Pool : public ::google::protobuf::Message {
 public:
  Pool();
  virtual ~Pool();
  
  Pool(const Pool& from);
  
  inline Pool& operator=(const Pool& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pool& default_instance();
  
  void Swap(Pool* other);
  
  // implements Message ----------------------------------------------
  
  Pool* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pool& from);
  void MergeFrom(const Pool& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string poolname = 1;
  inline bool has_poolname() const;
  inline void clear_poolname();
  static const int kPoolnameFieldNumber = 1;
  inline const ::std::string& poolname() const;
  inline void set_poolname(const ::std::string& value);
  inline void set_poolname(const char* value);
  inline void set_poolname(const char* value, size_t size);
  inline ::std::string* mutable_poolname();
  inline ::std::string* release_poolname();
  
  // required int32 pooltype = 2;
  inline bool has_pooltype() const;
  inline void clear_pooltype();
  static const int kPooltypeFieldNumber = 2;
  inline ::google::protobuf::int32 pooltype() const;
  inline void set_pooltype(::google::protobuf::int32 value);
  
  // required int32 poolgroup = 3;
  inline bool has_poolgroup() const;
  inline void clear_poolgroup();
  static const int kPoolgroupFieldNumber = 3;
  inline ::google::protobuf::int32 poolgroup() const;
  inline void set_poolgroup(::google::protobuf::int32 value);
  
  // optional bool remove = 4;
  inline bool has_remove() const;
  inline void clear_remove();
  static const int kRemoveFieldNumber = 4;
  inline bool remove() const;
  inline void set_remove(bool value);
  
  // optional int32 seqno = 5;
  inline bool has_seqno() const;
  inline void clear_seqno();
  static const int kSeqnoFieldNumber = 5;
  inline ::google::protobuf::int32 seqno() const;
  inline void set_seqno(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:quote.Pool)
 private:
  inline void set_has_poolname();
  inline void clear_has_poolname();
  inline void set_has_pooltype();
  inline void clear_has_pooltype();
  inline void set_has_poolgroup();
  inline void clear_has_poolgroup();
  inline void set_has_remove();
  inline void clear_has_remove();
  inline void set_has_seqno();
  inline void clear_has_seqno();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* poolname_;
  ::google::protobuf::int32 pooltype_;
  ::google::protobuf::int32 poolgroup_;
  bool remove_;
  ::google::protobuf::int32 seqno_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpool_2eproto();
  friend void protobuf_AssignDesc_stockpool_2eproto();
  friend void protobuf_ShutdownFile_stockpool_2eproto();
  
  void InitAsDefaultInstance();
  static Pool* default_instance_;
};
// -------------------------------------------------------------------

class PoolType : public ::google::protobuf::Message {
 public:
  PoolType();
  virtual ~PoolType();
  
  PoolType(const PoolType& from);
  
  inline PoolType& operator=(const PoolType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolType& default_instance();
  
  void Swap(PoolType* other);
  
  // implements Message ----------------------------------------------
  
  PoolType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoolType& from);
  void MergeFrom(const PoolType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 pooltype = 1;
  inline bool has_pooltype() const;
  inline void clear_pooltype();
  static const int kPooltypeFieldNumber = 1;
  inline ::google::protobuf::int32 pooltype() const;
  inline void set_pooltype(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional bool remove = 3;
  inline bool has_remove() const;
  inline void clear_remove();
  static const int kRemoveFieldNumber = 3;
  inline bool remove() const;
  inline void set_remove(bool value);
  
  // optional int32 seqno = 4;
  inline bool has_seqno() const;
  inline void clear_seqno();
  static const int kSeqnoFieldNumber = 4;
  inline ::google::protobuf::int32 seqno() const;
  inline void set_seqno(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:quote.PoolType)
 private:
  inline void set_has_pooltype();
  inline void clear_has_pooltype();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_remove();
  inline void clear_has_remove();
  inline void set_has_seqno();
  inline void clear_has_seqno();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 pooltype_;
  bool remove_;
  ::google::protobuf::int32 seqno_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpool_2eproto();
  friend void protobuf_AssignDesc_stockpool_2eproto();
  friend void protobuf_ShutdownFile_stockpool_2eproto();
  
  void InitAsDefaultInstance();
  static PoolType* default_instance_;
};
// -------------------------------------------------------------------

class AddStockRequest : public ::google::protobuf::Message {
 public:
  AddStockRequest();
  virtual ~AddStockRequest();
  
  AddStockRequest(const AddStockRequest& from);
  
  inline AddStockRequest& operator=(const AddStockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddStockRequest& default_instance();
  
  void Swap(AddStockRequest* other);
  
  // implements Message ----------------------------------------------
  
  AddStockRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddStockRequest& from);
  void MergeFrom(const AddStockRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string custid = 1;
  inline bool has_custid() const;
  inline void clear_custid();
  static const int kCustidFieldNumber = 1;
  inline const ::std::string& custid() const;
  inline void set_custid(const ::std::string& value);
  inline void set_custid(const char* value);
  inline void set_custid(const char* value, size_t size);
  inline ::std::string* mutable_custid();
  inline ::std::string* release_custid();
  
  // required string orgid = 2;
  inline bool has_orgid() const;
  inline void clear_orgid();
  static const int kOrgidFieldNumber = 2;
  inline const ::std::string& orgid() const;
  inline void set_orgid(const ::std::string& value);
  inline void set_orgid(const char* value);
  inline void set_orgid(const char* value, size_t size);
  inline ::std::string* mutable_orgid();
  inline ::std::string* release_orgid();
  
  // repeated .quote.Stock stock = 3;
  inline int stock_size() const;
  inline void clear_stock();
  static const int kStockFieldNumber = 3;
  inline const ::quote::Stock& stock(int index) const;
  inline ::quote::Stock* mutable_stock(int index);
  inline ::quote::Stock* add_stock();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::Stock >&
      stock() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::Stock >*
      mutable_stock();
  
  // @@protoc_insertion_point(class_scope:quote.AddStockRequest)
 private:
  inline void set_has_custid();
  inline void clear_has_custid();
  inline void set_has_orgid();
  inline void clear_has_orgid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* custid_;
  ::std::string* orgid_;
  ::google::protobuf::RepeatedPtrField< ::quote::Stock > stock_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpool_2eproto();
  friend void protobuf_AssignDesc_stockpool_2eproto();
  friend void protobuf_ShutdownFile_stockpool_2eproto();
  
  void InitAsDefaultInstance();
  static AddStockRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddStockResponse : public ::google::protobuf::Message {
 public:
  AddStockResponse();
  virtual ~AddStockResponse();
  
  AddStockResponse(const AddStockResponse& from);
  
  inline AddStockResponse& operator=(const AddStockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddStockResponse& default_instance();
  
  void Swap(AddStockResponse* other);
  
  // implements Message ----------------------------------------------
  
  AddStockResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddStockResponse& from);
  void MergeFrom(const AddStockResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string updatetime = 1;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdatetimeFieldNumber = 1;
  inline const ::std::string& updatetime() const;
  inline void set_updatetime(const ::std::string& value);
  inline void set_updatetime(const char* value);
  inline void set_updatetime(const char* value, size_t size);
  inline ::std::string* mutable_updatetime();
  inline ::std::string* release_updatetime();
  
  // @@protoc_insertion_point(class_scope:quote.AddStockResponse)
 private:
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* updatetime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpool_2eproto();
  friend void protobuf_AssignDesc_stockpool_2eproto();
  friend void protobuf_ShutdownFile_stockpool_2eproto();
  
  void InitAsDefaultInstance();
  static AddStockResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateStockRequest : public ::google::protobuf::Message {
 public:
  UpdateStockRequest();
  virtual ~UpdateStockRequest();
  
  UpdateStockRequest(const UpdateStockRequest& from);
  
  inline UpdateStockRequest& operator=(const UpdateStockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateStockRequest& default_instance();
  
  void Swap(UpdateStockRequest* other);
  
  // implements Message ----------------------------------------------
  
  UpdateStockRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateStockRequest& from);
  void MergeFrom(const UpdateStockRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string custid = 1;
  inline bool has_custid() const;
  inline void clear_custid();
  static const int kCustidFieldNumber = 1;
  inline const ::std::string& custid() const;
  inline void set_custid(const ::std::string& value);
  inline void set_custid(const char* value);
  inline void set_custid(const char* value, size_t size);
  inline ::std::string* mutable_custid();
  inline ::std::string* release_custid();
  
  // required string orgid = 2;
  inline bool has_orgid() const;
  inline void clear_orgid();
  static const int kOrgidFieldNumber = 2;
  inline const ::std::string& orgid() const;
  inline void set_orgid(const ::std::string& value);
  inline void set_orgid(const char* value);
  inline void set_orgid(const char* value, size_t size);
  inline ::std::string* mutable_orgid();
  inline ::std::string* release_orgid();
  
  // repeated .quote.Stock stock = 3;
  inline int stock_size() const;
  inline void clear_stock();
  static const int kStockFieldNumber = 3;
  inline const ::quote::Stock& stock(int index) const;
  inline ::quote::Stock* mutable_stock(int index);
  inline ::quote::Stock* add_stock();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::Stock >&
      stock() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::Stock >*
      mutable_stock();
  
  // @@protoc_insertion_point(class_scope:quote.UpdateStockRequest)
 private:
  inline void set_has_custid();
  inline void clear_has_custid();
  inline void set_has_orgid();
  inline void clear_has_orgid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* custid_;
  ::std::string* orgid_;
  ::google::protobuf::RepeatedPtrField< ::quote::Stock > stock_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpool_2eproto();
  friend void protobuf_AssignDesc_stockpool_2eproto();
  friend void protobuf_ShutdownFile_stockpool_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateStockRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateStockResponse : public ::google::protobuf::Message {
 public:
  UpdateStockResponse();
  virtual ~UpdateStockResponse();
  
  UpdateStockResponse(const UpdateStockResponse& from);
  
  inline UpdateStockResponse& operator=(const UpdateStockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateStockResponse& default_instance();
  
  void Swap(UpdateStockResponse* other);
  
  // implements Message ----------------------------------------------
  
  UpdateStockResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateStockResponse& from);
  void MergeFrom(const UpdateStockResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string updatetime = 1;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdatetimeFieldNumber = 1;
  inline const ::std::string& updatetime() const;
  inline void set_updatetime(const ::std::string& value);
  inline void set_updatetime(const char* value);
  inline void set_updatetime(const char* value, size_t size);
  inline ::std::string* mutable_updatetime();
  inline ::std::string* release_updatetime();
  
  // @@protoc_insertion_point(class_scope:quote.UpdateStockResponse)
 private:
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* updatetime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpool_2eproto();
  friend void protobuf_AssignDesc_stockpool_2eproto();
  friend void protobuf_ShutdownFile_stockpool_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateStockResponse* default_instance_;
};
// -------------------------------------------------------------------

class QueryStockRequest : public ::google::protobuf::Message {
 public:
  QueryStockRequest();
  virtual ~QueryStockRequest();
  
  QueryStockRequest(const QueryStockRequest& from);
  
  inline QueryStockRequest& operator=(const QueryStockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryStockRequest& default_instance();
  
  void Swap(QueryStockRequest* other);
  
  // implements Message ----------------------------------------------
  
  QueryStockRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryStockRequest& from);
  void MergeFrom(const QueryStockRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string custid = 1;
  inline bool has_custid() const;
  inline void clear_custid();
  static const int kCustidFieldNumber = 1;
  inline const ::std::string& custid() const;
  inline void set_custid(const ::std::string& value);
  inline void set_custid(const char* value);
  inline void set_custid(const char* value, size_t size);
  inline ::std::string* mutable_custid();
  inline ::std::string* release_custid();
  
  // required string orgid = 2;
  inline bool has_orgid() const;
  inline void clear_orgid();
  static const int kOrgidFieldNumber = 2;
  inline const ::std::string& orgid() const;
  inline void set_orgid(const ::std::string& value);
  inline void set_orgid(const char* value);
  inline void set_orgid(const char* value, size_t size);
  inline ::std::string* mutable_orgid();
  inline ::std::string* release_orgid();
  
  // optional string synctime = 3;
  inline bool has_synctime() const;
  inline void clear_synctime();
  static const int kSynctimeFieldNumber = 3;
  inline const ::std::string& synctime() const;
  inline void set_synctime(const ::std::string& value);
  inline void set_synctime(const char* value);
  inline void set_synctime(const char* value, size_t size);
  inline ::std::string* mutable_synctime();
  inline ::std::string* release_synctime();
  
  // optional int32 pooltype = 4;
  inline bool has_pooltype() const;
  inline void clear_pooltype();
  static const int kPooltypeFieldNumber = 4;
  inline ::google::protobuf::int32 pooltype() const;
  inline void set_pooltype(::google::protobuf::int32 value);
  
  // optional int32 poolgroup = 5;
  inline bool has_poolgroup() const;
  inline void clear_poolgroup();
  static const int kPoolgroupFieldNumber = 5;
  inline ::google::protobuf::int32 poolgroup() const;
  inline void set_poolgroup(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:quote.QueryStockRequest)
 private:
  inline void set_has_custid();
  inline void clear_has_custid();
  inline void set_has_orgid();
  inline void clear_has_orgid();
  inline void set_has_synctime();
  inline void clear_has_synctime();
  inline void set_has_pooltype();
  inline void clear_has_pooltype();
  inline void set_has_poolgroup();
  inline void clear_has_poolgroup();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* custid_;
  ::std::string* orgid_;
  ::std::string* synctime_;
  ::google::protobuf::int32 pooltype_;
  ::google::protobuf::int32 poolgroup_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpool_2eproto();
  friend void protobuf_AssignDesc_stockpool_2eproto();
  friend void protobuf_ShutdownFile_stockpool_2eproto();
  
  void InitAsDefaultInstance();
  static QueryStockRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryStockResponse : public ::google::protobuf::Message {
 public:
  QueryStockResponse();
  virtual ~QueryStockResponse();
  
  QueryStockResponse(const QueryStockResponse& from);
  
  inline QueryStockResponse& operator=(const QueryStockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryStockResponse& default_instance();
  
  void Swap(QueryStockResponse* other);
  
  // implements Message ----------------------------------------------
  
  QueryStockResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryStockResponse& from);
  void MergeFrom(const QueryStockResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string servertime = 1;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServertimeFieldNumber = 1;
  inline const ::std::string& servertime() const;
  inline void set_servertime(const ::std::string& value);
  inline void set_servertime(const char* value);
  inline void set_servertime(const char* value, size_t size);
  inline ::std::string* mutable_servertime();
  inline ::std::string* release_servertime();
  
  // repeated .quote.Stock stock = 2;
  inline int stock_size() const;
  inline void clear_stock();
  static const int kStockFieldNumber = 2;
  inline const ::quote::Stock& stock(int index) const;
  inline ::quote::Stock* mutable_stock(int index);
  inline ::quote::Stock* add_stock();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::Stock >&
      stock() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::Stock >*
      mutable_stock();
  
  // @@protoc_insertion_point(class_scope:quote.QueryStockResponse)
 private:
  inline void set_has_servertime();
  inline void clear_has_servertime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* servertime_;
  ::google::protobuf::RepeatedPtrField< ::quote::Stock > stock_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpool_2eproto();
  friend void protobuf_AssignDesc_stockpool_2eproto();
  friend void protobuf_ShutdownFile_stockpool_2eproto();
  
  void InitAsDefaultInstance();
  static QueryStockResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdatePoolRequest : public ::google::protobuf::Message {
 public:
  UpdatePoolRequest();
  virtual ~UpdatePoolRequest();
  
  UpdatePoolRequest(const UpdatePoolRequest& from);
  
  inline UpdatePoolRequest& operator=(const UpdatePoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdatePoolRequest& default_instance();
  
  void Swap(UpdatePoolRequest* other);
  
  // implements Message ----------------------------------------------
  
  UpdatePoolRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdatePoolRequest& from);
  void MergeFrom(const UpdatePoolRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string custid = 1;
  inline bool has_custid() const;
  inline void clear_custid();
  static const int kCustidFieldNumber = 1;
  inline const ::std::string& custid() const;
  inline void set_custid(const ::std::string& value);
  inline void set_custid(const char* value);
  inline void set_custid(const char* value, size_t size);
  inline ::std::string* mutable_custid();
  inline ::std::string* release_custid();
  
  // required string orgid = 2;
  inline bool has_orgid() const;
  inline void clear_orgid();
  static const int kOrgidFieldNumber = 2;
  inline const ::std::string& orgid() const;
  inline void set_orgid(const ::std::string& value);
  inline void set_orgid(const char* value);
  inline void set_orgid(const char* value, size_t size);
  inline ::std::string* mutable_orgid();
  inline ::std::string* release_orgid();
  
  // repeated .quote.Pool pool = 3;
  inline int pool_size() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 3;
  inline const ::quote::Pool& pool(int index) const;
  inline ::quote::Pool* mutable_pool(int index);
  inline ::quote::Pool* add_pool();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::Pool >&
      pool() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::Pool >*
      mutable_pool();
  
  // @@protoc_insertion_point(class_scope:quote.UpdatePoolRequest)
 private:
  inline void set_has_custid();
  inline void clear_has_custid();
  inline void set_has_orgid();
  inline void clear_has_orgid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* custid_;
  ::std::string* orgid_;
  ::google::protobuf::RepeatedPtrField< ::quote::Pool > pool_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpool_2eproto();
  friend void protobuf_AssignDesc_stockpool_2eproto();
  friend void protobuf_ShutdownFile_stockpool_2eproto();
  
  void InitAsDefaultInstance();
  static UpdatePoolRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdatePoolResponse : public ::google::protobuf::Message {
 public:
  UpdatePoolResponse();
  virtual ~UpdatePoolResponse();
  
  UpdatePoolResponse(const UpdatePoolResponse& from);
  
  inline UpdatePoolResponse& operator=(const UpdatePoolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdatePoolResponse& default_instance();
  
  void Swap(UpdatePoolResponse* other);
  
  // implements Message ----------------------------------------------
  
  UpdatePoolResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdatePoolResponse& from);
  void MergeFrom(const UpdatePoolResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string updatetime = 1;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdatetimeFieldNumber = 1;
  inline const ::std::string& updatetime() const;
  inline void set_updatetime(const ::std::string& value);
  inline void set_updatetime(const char* value);
  inline void set_updatetime(const char* value, size_t size);
  inline ::std::string* mutable_updatetime();
  inline ::std::string* release_updatetime();
  
  // @@protoc_insertion_point(class_scope:quote.UpdatePoolResponse)
 private:
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* updatetime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpool_2eproto();
  friend void protobuf_AssignDesc_stockpool_2eproto();
  friend void protobuf_ShutdownFile_stockpool_2eproto();
  
  void InitAsDefaultInstance();
  static UpdatePoolResponse* default_instance_;
};
// -------------------------------------------------------------------

class QueryPoolRequest : public ::google::protobuf::Message {
 public:
  QueryPoolRequest();
  virtual ~QueryPoolRequest();
  
  QueryPoolRequest(const QueryPoolRequest& from);
  
  inline QueryPoolRequest& operator=(const QueryPoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryPoolRequest& default_instance();
  
  void Swap(QueryPoolRequest* other);
  
  // implements Message ----------------------------------------------
  
  QueryPoolRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryPoolRequest& from);
  void MergeFrom(const QueryPoolRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string custid = 1;
  inline bool has_custid() const;
  inline void clear_custid();
  static const int kCustidFieldNumber = 1;
  inline const ::std::string& custid() const;
  inline void set_custid(const ::std::string& value);
  inline void set_custid(const char* value);
  inline void set_custid(const char* value, size_t size);
  inline ::std::string* mutable_custid();
  inline ::std::string* release_custid();
  
  // required string orgid = 2;
  inline bool has_orgid() const;
  inline void clear_orgid();
  static const int kOrgidFieldNumber = 2;
  inline const ::std::string& orgid() const;
  inline void set_orgid(const ::std::string& value);
  inline void set_orgid(const char* value);
  inline void set_orgid(const char* value, size_t size);
  inline ::std::string* mutable_orgid();
  inline ::std::string* release_orgid();
  
  // optional string synctime = 3;
  inline bool has_synctime() const;
  inline void clear_synctime();
  static const int kSynctimeFieldNumber = 3;
  inline const ::std::string& synctime() const;
  inline void set_synctime(const ::std::string& value);
  inline void set_synctime(const char* value);
  inline void set_synctime(const char* value, size_t size);
  inline ::std::string* mutable_synctime();
  inline ::std::string* release_synctime();
  
  // optional int32 pooltype = 4;
  inline bool has_pooltype() const;
  inline void clear_pooltype();
  static const int kPooltypeFieldNumber = 4;
  inline ::google::protobuf::int32 pooltype() const;
  inline void set_pooltype(::google::protobuf::int32 value);
  
  // optional int32 poolgroup = 5;
  inline bool has_poolgroup() const;
  inline void clear_poolgroup();
  static const int kPoolgroupFieldNumber = 5;
  inline ::google::protobuf::int32 poolgroup() const;
  inline void set_poolgroup(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:quote.QueryPoolRequest)
 private:
  inline void set_has_custid();
  inline void clear_has_custid();
  inline void set_has_orgid();
  inline void clear_has_orgid();
  inline void set_has_synctime();
  inline void clear_has_synctime();
  inline void set_has_pooltype();
  inline void clear_has_pooltype();
  inline void set_has_poolgroup();
  inline void clear_has_poolgroup();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* custid_;
  ::std::string* orgid_;
  ::std::string* synctime_;
  ::google::protobuf::int32 pooltype_;
  ::google::protobuf::int32 poolgroup_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpool_2eproto();
  friend void protobuf_AssignDesc_stockpool_2eproto();
  friend void protobuf_ShutdownFile_stockpool_2eproto();
  
  void InitAsDefaultInstance();
  static QueryPoolRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryPoolResponse : public ::google::protobuf::Message {
 public:
  QueryPoolResponse();
  virtual ~QueryPoolResponse();
  
  QueryPoolResponse(const QueryPoolResponse& from);
  
  inline QueryPoolResponse& operator=(const QueryPoolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryPoolResponse& default_instance();
  
  void Swap(QueryPoolResponse* other);
  
  // implements Message ----------------------------------------------
  
  QueryPoolResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryPoolResponse& from);
  void MergeFrom(const QueryPoolResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string servertime = 1;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServertimeFieldNumber = 1;
  inline const ::std::string& servertime() const;
  inline void set_servertime(const ::std::string& value);
  inline void set_servertime(const char* value);
  inline void set_servertime(const char* value, size_t size);
  inline ::std::string* mutable_servertime();
  inline ::std::string* release_servertime();
  
  // repeated .quote.Pool pool = 2;
  inline int pool_size() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 2;
  inline const ::quote::Pool& pool(int index) const;
  inline ::quote::Pool* mutable_pool(int index);
  inline ::quote::Pool* add_pool();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::Pool >&
      pool() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::Pool >*
      mutable_pool();
  
  // @@protoc_insertion_point(class_scope:quote.QueryPoolResponse)
 private:
  inline void set_has_servertime();
  inline void clear_has_servertime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* servertime_;
  ::google::protobuf::RepeatedPtrField< ::quote::Pool > pool_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpool_2eproto();
  friend void protobuf_AssignDesc_stockpool_2eproto();
  friend void protobuf_ShutdownFile_stockpool_2eproto();
  
  void InitAsDefaultInstance();
  static QueryPoolResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdatePoolTypeRequest : public ::google::protobuf::Message {
 public:
  UpdatePoolTypeRequest();
  virtual ~UpdatePoolTypeRequest();
  
  UpdatePoolTypeRequest(const UpdatePoolTypeRequest& from);
  
  inline UpdatePoolTypeRequest& operator=(const UpdatePoolTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdatePoolTypeRequest& default_instance();
  
  void Swap(UpdatePoolTypeRequest* other);
  
  // implements Message ----------------------------------------------
  
  UpdatePoolTypeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdatePoolTypeRequest& from);
  void MergeFrom(const UpdatePoolTypeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .quote.PoolType pooltype = 1;
  inline int pooltype_size() const;
  inline void clear_pooltype();
  static const int kPooltypeFieldNumber = 1;
  inline const ::quote::PoolType& pooltype(int index) const;
  inline ::quote::PoolType* mutable_pooltype(int index);
  inline ::quote::PoolType* add_pooltype();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::PoolType >&
      pooltype() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::PoolType >*
      mutable_pooltype();
  
  // @@protoc_insertion_point(class_scope:quote.UpdatePoolTypeRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::quote::PoolType > pooltype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpool_2eproto();
  friend void protobuf_AssignDesc_stockpool_2eproto();
  friend void protobuf_ShutdownFile_stockpool_2eproto();
  
  void InitAsDefaultInstance();
  static UpdatePoolTypeRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdatePoolTypeResponse : public ::google::protobuf::Message {
 public:
  UpdatePoolTypeResponse();
  virtual ~UpdatePoolTypeResponse();
  
  UpdatePoolTypeResponse(const UpdatePoolTypeResponse& from);
  
  inline UpdatePoolTypeResponse& operator=(const UpdatePoolTypeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdatePoolTypeResponse& default_instance();
  
  void Swap(UpdatePoolTypeResponse* other);
  
  // implements Message ----------------------------------------------
  
  UpdatePoolTypeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdatePoolTypeResponse& from);
  void MergeFrom(const UpdatePoolTypeResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string updatetime = 1;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdatetimeFieldNumber = 1;
  inline const ::std::string& updatetime() const;
  inline void set_updatetime(const ::std::string& value);
  inline void set_updatetime(const char* value);
  inline void set_updatetime(const char* value, size_t size);
  inline ::std::string* mutable_updatetime();
  inline ::std::string* release_updatetime();
  
  // @@protoc_insertion_point(class_scope:quote.UpdatePoolTypeResponse)
 private:
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* updatetime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpool_2eproto();
  friend void protobuf_AssignDesc_stockpool_2eproto();
  friend void protobuf_ShutdownFile_stockpool_2eproto();
  
  void InitAsDefaultInstance();
  static UpdatePoolTypeResponse* default_instance_;
};
// -------------------------------------------------------------------

class QueryPoolTypeRequest : public ::google::protobuf::Message {
 public:
  QueryPoolTypeRequest();
  virtual ~QueryPoolTypeRequest();
  
  QueryPoolTypeRequest(const QueryPoolTypeRequest& from);
  
  inline QueryPoolTypeRequest& operator=(const QueryPoolTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryPoolTypeRequest& default_instance();
  
  void Swap(QueryPoolTypeRequest* other);
  
  // implements Message ----------------------------------------------
  
  QueryPoolTypeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryPoolTypeRequest& from);
  void MergeFrom(const QueryPoolTypeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string synctime = 1;
  inline bool has_synctime() const;
  inline void clear_synctime();
  static const int kSynctimeFieldNumber = 1;
  inline const ::std::string& synctime() const;
  inline void set_synctime(const ::std::string& value);
  inline void set_synctime(const char* value);
  inline void set_synctime(const char* value, size_t size);
  inline ::std::string* mutable_synctime();
  inline ::std::string* release_synctime();
  
  // optional int32 pooltype = 2;
  inline bool has_pooltype() const;
  inline void clear_pooltype();
  static const int kPooltypeFieldNumber = 2;
  inline ::google::protobuf::int32 pooltype() const;
  inline void set_pooltype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:quote.QueryPoolTypeRequest)
 private:
  inline void set_has_synctime();
  inline void clear_has_synctime();
  inline void set_has_pooltype();
  inline void clear_has_pooltype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* synctime_;
  ::google::protobuf::int32 pooltype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpool_2eproto();
  friend void protobuf_AssignDesc_stockpool_2eproto();
  friend void protobuf_ShutdownFile_stockpool_2eproto();
  
  void InitAsDefaultInstance();
  static QueryPoolTypeRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryPoolTypeResponse : public ::google::protobuf::Message {
 public:
  QueryPoolTypeResponse();
  virtual ~QueryPoolTypeResponse();
  
  QueryPoolTypeResponse(const QueryPoolTypeResponse& from);
  
  inline QueryPoolTypeResponse& operator=(const QueryPoolTypeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryPoolTypeResponse& default_instance();
  
  void Swap(QueryPoolTypeResponse* other);
  
  // implements Message ----------------------------------------------
  
  QueryPoolTypeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryPoolTypeResponse& from);
  void MergeFrom(const QueryPoolTypeResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string servertime = 1;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServertimeFieldNumber = 1;
  inline const ::std::string& servertime() const;
  inline void set_servertime(const ::std::string& value);
  inline void set_servertime(const char* value);
  inline void set_servertime(const char* value, size_t size);
  inline ::std::string* mutable_servertime();
  inline ::std::string* release_servertime();
  
  // repeated .quote.PoolType pooltype = 2;
  inline int pooltype_size() const;
  inline void clear_pooltype();
  static const int kPooltypeFieldNumber = 2;
  inline const ::quote::PoolType& pooltype(int index) const;
  inline ::quote::PoolType* mutable_pooltype(int index);
  inline ::quote::PoolType* add_pooltype();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::PoolType >&
      pooltype() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::PoolType >*
      mutable_pooltype();
  
  // @@protoc_insertion_point(class_scope:quote.QueryPoolTypeResponse)
 private:
  inline void set_has_servertime();
  inline void clear_has_servertime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* servertime_;
  ::google::protobuf::RepeatedPtrField< ::quote::PoolType > pooltype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_stockpool_2eproto();
  friend void protobuf_AssignDesc_stockpool_2eproto();
  friend void protobuf_ShutdownFile_stockpool_2eproto();
  
  void InitAsDefaultInstance();
  static QueryPoolTypeResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Stock

// required string secucode = 1;
inline bool Stock::has_secucode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stock::set_has_secucode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stock::clear_has_secucode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stock::clear_secucode() {
  if (secucode_ != &::google::protobuf::internal::kEmptyString) {
    secucode_->clear();
  }
  clear_has_secucode();
}
inline const ::std::string& Stock::secucode() const {
  return *secucode_;
}
inline void Stock::set_secucode(const ::std::string& value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void Stock::set_secucode(const char* value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void Stock::set_secucode(const char* value, size_t size) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stock::mutable_secucode() {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  return secucode_;
}
inline ::std::string* Stock::release_secucode() {
  clear_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secucode_;
    secucode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 exchange = 2;
inline bool Stock::has_exchange() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stock::set_has_exchange() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stock::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stock::clear_exchange() {
  exchange_ = 0;
  clear_has_exchange();
}
inline ::google::protobuf::int32 Stock::exchange() const {
  return exchange_;
}
inline void Stock::set_exchange(::google::protobuf::int32 value) {
  set_has_exchange();
  exchange_ = value;
}

// optional bool remove = 3;
inline bool Stock::has_remove() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stock::set_has_remove() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stock::clear_has_remove() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stock::clear_remove() {
  remove_ = false;
  clear_has_remove();
}
inline bool Stock::remove() const {
  return remove_;
}
inline void Stock::set_remove(bool value) {
  set_has_remove();
  remove_ = value;
}

// required int32 pooltype = 4;
inline bool Stock::has_pooltype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Stock::set_has_pooltype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Stock::clear_has_pooltype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Stock::clear_pooltype() {
  pooltype_ = 0;
  clear_has_pooltype();
}
inline ::google::protobuf::int32 Stock::pooltype() const {
  return pooltype_;
}
inline void Stock::set_pooltype(::google::protobuf::int32 value) {
  set_has_pooltype();
  pooltype_ = value;
}

// required int32 poolgroup = 5;
inline bool Stock::has_poolgroup() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Stock::set_has_poolgroup() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Stock::clear_has_poolgroup() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Stock::clear_poolgroup() {
  poolgroup_ = 0;
  clear_has_poolgroup();
}
inline ::google::protobuf::int32 Stock::poolgroup() const {
  return poolgroup_;
}
inline void Stock::set_poolgroup(::google::protobuf::int32 value) {
  set_has_poolgroup();
  poolgroup_ = value;
}

// optional int32 seqno = 6;
inline bool Stock::has_seqno() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Stock::set_has_seqno() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Stock::clear_has_seqno() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Stock::clear_seqno() {
  seqno_ = 0;
  clear_has_seqno();
}
inline ::google::protobuf::int32 Stock::seqno() const {
  return seqno_;
}
inline void Stock::set_seqno(::google::protobuf::int32 value) {
  set_has_seqno();
  seqno_ = value;
}

// -------------------------------------------------------------------

// Pool

// optional string poolname = 1;
inline bool Pool::has_poolname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pool::set_has_poolname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pool::clear_has_poolname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pool::clear_poolname() {
  if (poolname_ != &::google::protobuf::internal::kEmptyString) {
    poolname_->clear();
  }
  clear_has_poolname();
}
inline const ::std::string& Pool::poolname() const {
  return *poolname_;
}
inline void Pool::set_poolname(const ::std::string& value) {
  set_has_poolname();
  if (poolname_ == &::google::protobuf::internal::kEmptyString) {
    poolname_ = new ::std::string;
  }
  poolname_->assign(value);
}
inline void Pool::set_poolname(const char* value) {
  set_has_poolname();
  if (poolname_ == &::google::protobuf::internal::kEmptyString) {
    poolname_ = new ::std::string;
  }
  poolname_->assign(value);
}
inline void Pool::set_poolname(const char* value, size_t size) {
  set_has_poolname();
  if (poolname_ == &::google::protobuf::internal::kEmptyString) {
    poolname_ = new ::std::string;
  }
  poolname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Pool::mutable_poolname() {
  set_has_poolname();
  if (poolname_ == &::google::protobuf::internal::kEmptyString) {
    poolname_ = new ::std::string;
  }
  return poolname_;
}
inline ::std::string* Pool::release_poolname() {
  clear_has_poolname();
  if (poolname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = poolname_;
    poolname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 pooltype = 2;
inline bool Pool::has_pooltype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pool::set_has_pooltype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pool::clear_has_pooltype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pool::clear_pooltype() {
  pooltype_ = 0;
  clear_has_pooltype();
}
inline ::google::protobuf::int32 Pool::pooltype() const {
  return pooltype_;
}
inline void Pool::set_pooltype(::google::protobuf::int32 value) {
  set_has_pooltype();
  pooltype_ = value;
}

// required int32 poolgroup = 3;
inline bool Pool::has_poolgroup() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pool::set_has_poolgroup() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pool::clear_has_poolgroup() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pool::clear_poolgroup() {
  poolgroup_ = 0;
  clear_has_poolgroup();
}
inline ::google::protobuf::int32 Pool::poolgroup() const {
  return poolgroup_;
}
inline void Pool::set_poolgroup(::google::protobuf::int32 value) {
  set_has_poolgroup();
  poolgroup_ = value;
}

// optional bool remove = 4;
inline bool Pool::has_remove() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pool::set_has_remove() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pool::clear_has_remove() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pool::clear_remove() {
  remove_ = false;
  clear_has_remove();
}
inline bool Pool::remove() const {
  return remove_;
}
inline void Pool::set_remove(bool value) {
  set_has_remove();
  remove_ = value;
}

// optional int32 seqno = 5;
inline bool Pool::has_seqno() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pool::set_has_seqno() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pool::clear_has_seqno() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pool::clear_seqno() {
  seqno_ = 0;
  clear_has_seqno();
}
inline ::google::protobuf::int32 Pool::seqno() const {
  return seqno_;
}
inline void Pool::set_seqno(::google::protobuf::int32 value) {
  set_has_seqno();
  seqno_ = value;
}

// -------------------------------------------------------------------

// PoolType

// required int32 pooltype = 1;
inline bool PoolType::has_pooltype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoolType::set_has_pooltype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoolType::clear_has_pooltype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoolType::clear_pooltype() {
  pooltype_ = 0;
  clear_has_pooltype();
}
inline ::google::protobuf::int32 PoolType::pooltype() const {
  return pooltype_;
}
inline void PoolType::set_pooltype(::google::protobuf::int32 value) {
  set_has_pooltype();
  pooltype_ = value;
}

// optional string name = 2;
inline bool PoolType::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoolType::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoolType::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoolType::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PoolType::name() const {
  return *name_;
}
inline void PoolType::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PoolType::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PoolType::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PoolType::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PoolType::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool remove = 3;
inline bool PoolType::has_remove() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoolType::set_has_remove() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoolType::clear_has_remove() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoolType::clear_remove() {
  remove_ = false;
  clear_has_remove();
}
inline bool PoolType::remove() const {
  return remove_;
}
inline void PoolType::set_remove(bool value) {
  set_has_remove();
  remove_ = value;
}

// optional int32 seqno = 4;
inline bool PoolType::has_seqno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoolType::set_has_seqno() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoolType::clear_has_seqno() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoolType::clear_seqno() {
  seqno_ = 0;
  clear_has_seqno();
}
inline ::google::protobuf::int32 PoolType::seqno() const {
  return seqno_;
}
inline void PoolType::set_seqno(::google::protobuf::int32 value) {
  set_has_seqno();
  seqno_ = value;
}

// -------------------------------------------------------------------

// AddStockRequest

// required string custid = 1;
inline bool AddStockRequest::has_custid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddStockRequest::set_has_custid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddStockRequest::clear_has_custid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddStockRequest::clear_custid() {
  if (custid_ != &::google::protobuf::internal::kEmptyString) {
    custid_->clear();
  }
  clear_has_custid();
}
inline const ::std::string& AddStockRequest::custid() const {
  return *custid_;
}
inline void AddStockRequest::set_custid(const ::std::string& value) {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  custid_->assign(value);
}
inline void AddStockRequest::set_custid(const char* value) {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  custid_->assign(value);
}
inline void AddStockRequest::set_custid(const char* value, size_t size) {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  custid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddStockRequest::mutable_custid() {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  return custid_;
}
inline ::std::string* AddStockRequest::release_custid() {
  clear_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = custid_;
    custid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string orgid = 2;
inline bool AddStockRequest::has_orgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddStockRequest::set_has_orgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddStockRequest::clear_has_orgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddStockRequest::clear_orgid() {
  if (orgid_ != &::google::protobuf::internal::kEmptyString) {
    orgid_->clear();
  }
  clear_has_orgid();
}
inline const ::std::string& AddStockRequest::orgid() const {
  return *orgid_;
}
inline void AddStockRequest::set_orgid(const ::std::string& value) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(value);
}
inline void AddStockRequest::set_orgid(const char* value) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(value);
}
inline void AddStockRequest::set_orgid(const char* value, size_t size) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddStockRequest::mutable_orgid() {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  return orgid_;
}
inline ::std::string* AddStockRequest::release_orgid() {
  clear_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orgid_;
    orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .quote.Stock stock = 3;
inline int AddStockRequest::stock_size() const {
  return stock_.size();
}
inline void AddStockRequest::clear_stock() {
  stock_.Clear();
}
inline const ::quote::Stock& AddStockRequest::stock(int index) const {
  return stock_.Get(index);
}
inline ::quote::Stock* AddStockRequest::mutable_stock(int index) {
  return stock_.Mutable(index);
}
inline ::quote::Stock* AddStockRequest::add_stock() {
  return stock_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::Stock >&
AddStockRequest::stock() const {
  return stock_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::Stock >*
AddStockRequest::mutable_stock() {
  return &stock_;
}

// -------------------------------------------------------------------

// AddStockResponse

// required string updatetime = 1;
inline bool AddStockResponse::has_updatetime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddStockResponse::set_has_updatetime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddStockResponse::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddStockResponse::clear_updatetime() {
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    updatetime_->clear();
  }
  clear_has_updatetime();
}
inline const ::std::string& AddStockResponse::updatetime() const {
  return *updatetime_;
}
inline void AddStockResponse::set_updatetime(const ::std::string& value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
}
inline void AddStockResponse::set_updatetime(const char* value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
}
inline void AddStockResponse::set_updatetime(const char* value, size_t size) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddStockResponse::mutable_updatetime() {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  return updatetime_;
}
inline ::std::string* AddStockResponse::release_updatetime() {
  clear_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = updatetime_;
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UpdateStockRequest

// required string custid = 1;
inline bool UpdateStockRequest::has_custid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateStockRequest::set_has_custid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateStockRequest::clear_has_custid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateStockRequest::clear_custid() {
  if (custid_ != &::google::protobuf::internal::kEmptyString) {
    custid_->clear();
  }
  clear_has_custid();
}
inline const ::std::string& UpdateStockRequest::custid() const {
  return *custid_;
}
inline void UpdateStockRequest::set_custid(const ::std::string& value) {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  custid_->assign(value);
}
inline void UpdateStockRequest::set_custid(const char* value) {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  custid_->assign(value);
}
inline void UpdateStockRequest::set_custid(const char* value, size_t size) {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  custid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateStockRequest::mutable_custid() {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  return custid_;
}
inline ::std::string* UpdateStockRequest::release_custid() {
  clear_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = custid_;
    custid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string orgid = 2;
inline bool UpdateStockRequest::has_orgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateStockRequest::set_has_orgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateStockRequest::clear_has_orgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateStockRequest::clear_orgid() {
  if (orgid_ != &::google::protobuf::internal::kEmptyString) {
    orgid_->clear();
  }
  clear_has_orgid();
}
inline const ::std::string& UpdateStockRequest::orgid() const {
  return *orgid_;
}
inline void UpdateStockRequest::set_orgid(const ::std::string& value) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(value);
}
inline void UpdateStockRequest::set_orgid(const char* value) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(value);
}
inline void UpdateStockRequest::set_orgid(const char* value, size_t size) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateStockRequest::mutable_orgid() {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  return orgid_;
}
inline ::std::string* UpdateStockRequest::release_orgid() {
  clear_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orgid_;
    orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .quote.Stock stock = 3;
inline int UpdateStockRequest::stock_size() const {
  return stock_.size();
}
inline void UpdateStockRequest::clear_stock() {
  stock_.Clear();
}
inline const ::quote::Stock& UpdateStockRequest::stock(int index) const {
  return stock_.Get(index);
}
inline ::quote::Stock* UpdateStockRequest::mutable_stock(int index) {
  return stock_.Mutable(index);
}
inline ::quote::Stock* UpdateStockRequest::add_stock() {
  return stock_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::Stock >&
UpdateStockRequest::stock() const {
  return stock_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::Stock >*
UpdateStockRequest::mutable_stock() {
  return &stock_;
}

// -------------------------------------------------------------------

// UpdateStockResponse

// required string updatetime = 1;
inline bool UpdateStockResponse::has_updatetime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateStockResponse::set_has_updatetime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateStockResponse::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateStockResponse::clear_updatetime() {
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    updatetime_->clear();
  }
  clear_has_updatetime();
}
inline const ::std::string& UpdateStockResponse::updatetime() const {
  return *updatetime_;
}
inline void UpdateStockResponse::set_updatetime(const ::std::string& value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
}
inline void UpdateStockResponse::set_updatetime(const char* value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
}
inline void UpdateStockResponse::set_updatetime(const char* value, size_t size) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateStockResponse::mutable_updatetime() {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  return updatetime_;
}
inline ::std::string* UpdateStockResponse::release_updatetime() {
  clear_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = updatetime_;
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// QueryStockRequest

// required string custid = 1;
inline bool QueryStockRequest::has_custid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryStockRequest::set_has_custid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryStockRequest::clear_has_custid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryStockRequest::clear_custid() {
  if (custid_ != &::google::protobuf::internal::kEmptyString) {
    custid_->clear();
  }
  clear_has_custid();
}
inline const ::std::string& QueryStockRequest::custid() const {
  return *custid_;
}
inline void QueryStockRequest::set_custid(const ::std::string& value) {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  custid_->assign(value);
}
inline void QueryStockRequest::set_custid(const char* value) {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  custid_->assign(value);
}
inline void QueryStockRequest::set_custid(const char* value, size_t size) {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  custid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryStockRequest::mutable_custid() {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  return custid_;
}
inline ::std::string* QueryStockRequest::release_custid() {
  clear_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = custid_;
    custid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string orgid = 2;
inline bool QueryStockRequest::has_orgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryStockRequest::set_has_orgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryStockRequest::clear_has_orgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryStockRequest::clear_orgid() {
  if (orgid_ != &::google::protobuf::internal::kEmptyString) {
    orgid_->clear();
  }
  clear_has_orgid();
}
inline const ::std::string& QueryStockRequest::orgid() const {
  return *orgid_;
}
inline void QueryStockRequest::set_orgid(const ::std::string& value) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(value);
}
inline void QueryStockRequest::set_orgid(const char* value) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(value);
}
inline void QueryStockRequest::set_orgid(const char* value, size_t size) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryStockRequest::mutable_orgid() {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  return orgid_;
}
inline ::std::string* QueryStockRequest::release_orgid() {
  clear_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orgid_;
    orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string synctime = 3;
inline bool QueryStockRequest::has_synctime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryStockRequest::set_has_synctime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryStockRequest::clear_has_synctime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryStockRequest::clear_synctime() {
  if (synctime_ != &::google::protobuf::internal::kEmptyString) {
    synctime_->clear();
  }
  clear_has_synctime();
}
inline const ::std::string& QueryStockRequest::synctime() const {
  return *synctime_;
}
inline void QueryStockRequest::set_synctime(const ::std::string& value) {
  set_has_synctime();
  if (synctime_ == &::google::protobuf::internal::kEmptyString) {
    synctime_ = new ::std::string;
  }
  synctime_->assign(value);
}
inline void QueryStockRequest::set_synctime(const char* value) {
  set_has_synctime();
  if (synctime_ == &::google::protobuf::internal::kEmptyString) {
    synctime_ = new ::std::string;
  }
  synctime_->assign(value);
}
inline void QueryStockRequest::set_synctime(const char* value, size_t size) {
  set_has_synctime();
  if (synctime_ == &::google::protobuf::internal::kEmptyString) {
    synctime_ = new ::std::string;
  }
  synctime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryStockRequest::mutable_synctime() {
  set_has_synctime();
  if (synctime_ == &::google::protobuf::internal::kEmptyString) {
    synctime_ = new ::std::string;
  }
  return synctime_;
}
inline ::std::string* QueryStockRequest::release_synctime() {
  clear_has_synctime();
  if (synctime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = synctime_;
    synctime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 pooltype = 4;
inline bool QueryStockRequest::has_pooltype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryStockRequest::set_has_pooltype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryStockRequest::clear_has_pooltype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryStockRequest::clear_pooltype() {
  pooltype_ = 0;
  clear_has_pooltype();
}
inline ::google::protobuf::int32 QueryStockRequest::pooltype() const {
  return pooltype_;
}
inline void QueryStockRequest::set_pooltype(::google::protobuf::int32 value) {
  set_has_pooltype();
  pooltype_ = value;
}

// optional int32 poolgroup = 5;
inline bool QueryStockRequest::has_poolgroup() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryStockRequest::set_has_poolgroup() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryStockRequest::clear_has_poolgroup() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryStockRequest::clear_poolgroup() {
  poolgroup_ = 0;
  clear_has_poolgroup();
}
inline ::google::protobuf::int32 QueryStockRequest::poolgroup() const {
  return poolgroup_;
}
inline void QueryStockRequest::set_poolgroup(::google::protobuf::int32 value) {
  set_has_poolgroup();
  poolgroup_ = value;
}

// -------------------------------------------------------------------

// QueryStockResponse

// required string servertime = 1;
inline bool QueryStockResponse::has_servertime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryStockResponse::set_has_servertime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryStockResponse::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryStockResponse::clear_servertime() {
  if (servertime_ != &::google::protobuf::internal::kEmptyString) {
    servertime_->clear();
  }
  clear_has_servertime();
}
inline const ::std::string& QueryStockResponse::servertime() const {
  return *servertime_;
}
inline void QueryStockResponse::set_servertime(const ::std::string& value) {
  set_has_servertime();
  if (servertime_ == &::google::protobuf::internal::kEmptyString) {
    servertime_ = new ::std::string;
  }
  servertime_->assign(value);
}
inline void QueryStockResponse::set_servertime(const char* value) {
  set_has_servertime();
  if (servertime_ == &::google::protobuf::internal::kEmptyString) {
    servertime_ = new ::std::string;
  }
  servertime_->assign(value);
}
inline void QueryStockResponse::set_servertime(const char* value, size_t size) {
  set_has_servertime();
  if (servertime_ == &::google::protobuf::internal::kEmptyString) {
    servertime_ = new ::std::string;
  }
  servertime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryStockResponse::mutable_servertime() {
  set_has_servertime();
  if (servertime_ == &::google::protobuf::internal::kEmptyString) {
    servertime_ = new ::std::string;
  }
  return servertime_;
}
inline ::std::string* QueryStockResponse::release_servertime() {
  clear_has_servertime();
  if (servertime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servertime_;
    servertime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .quote.Stock stock = 2;
inline int QueryStockResponse::stock_size() const {
  return stock_.size();
}
inline void QueryStockResponse::clear_stock() {
  stock_.Clear();
}
inline const ::quote::Stock& QueryStockResponse::stock(int index) const {
  return stock_.Get(index);
}
inline ::quote::Stock* QueryStockResponse::mutable_stock(int index) {
  return stock_.Mutable(index);
}
inline ::quote::Stock* QueryStockResponse::add_stock() {
  return stock_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::Stock >&
QueryStockResponse::stock() const {
  return stock_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::Stock >*
QueryStockResponse::mutable_stock() {
  return &stock_;
}

// -------------------------------------------------------------------

// UpdatePoolRequest

// required string custid = 1;
inline bool UpdatePoolRequest::has_custid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdatePoolRequest::set_has_custid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdatePoolRequest::clear_has_custid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdatePoolRequest::clear_custid() {
  if (custid_ != &::google::protobuf::internal::kEmptyString) {
    custid_->clear();
  }
  clear_has_custid();
}
inline const ::std::string& UpdatePoolRequest::custid() const {
  return *custid_;
}
inline void UpdatePoolRequest::set_custid(const ::std::string& value) {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  custid_->assign(value);
}
inline void UpdatePoolRequest::set_custid(const char* value) {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  custid_->assign(value);
}
inline void UpdatePoolRequest::set_custid(const char* value, size_t size) {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  custid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdatePoolRequest::mutable_custid() {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  return custid_;
}
inline ::std::string* UpdatePoolRequest::release_custid() {
  clear_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = custid_;
    custid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string orgid = 2;
inline bool UpdatePoolRequest::has_orgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdatePoolRequest::set_has_orgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdatePoolRequest::clear_has_orgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdatePoolRequest::clear_orgid() {
  if (orgid_ != &::google::protobuf::internal::kEmptyString) {
    orgid_->clear();
  }
  clear_has_orgid();
}
inline const ::std::string& UpdatePoolRequest::orgid() const {
  return *orgid_;
}
inline void UpdatePoolRequest::set_orgid(const ::std::string& value) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(value);
}
inline void UpdatePoolRequest::set_orgid(const char* value) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(value);
}
inline void UpdatePoolRequest::set_orgid(const char* value, size_t size) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdatePoolRequest::mutable_orgid() {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  return orgid_;
}
inline ::std::string* UpdatePoolRequest::release_orgid() {
  clear_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orgid_;
    orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .quote.Pool pool = 3;
inline int UpdatePoolRequest::pool_size() const {
  return pool_.size();
}
inline void UpdatePoolRequest::clear_pool() {
  pool_.Clear();
}
inline const ::quote::Pool& UpdatePoolRequest::pool(int index) const {
  return pool_.Get(index);
}
inline ::quote::Pool* UpdatePoolRequest::mutable_pool(int index) {
  return pool_.Mutable(index);
}
inline ::quote::Pool* UpdatePoolRequest::add_pool() {
  return pool_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::Pool >&
UpdatePoolRequest::pool() const {
  return pool_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::Pool >*
UpdatePoolRequest::mutable_pool() {
  return &pool_;
}

// -------------------------------------------------------------------

// UpdatePoolResponse

// required string updatetime = 1;
inline bool UpdatePoolResponse::has_updatetime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdatePoolResponse::set_has_updatetime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdatePoolResponse::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdatePoolResponse::clear_updatetime() {
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    updatetime_->clear();
  }
  clear_has_updatetime();
}
inline const ::std::string& UpdatePoolResponse::updatetime() const {
  return *updatetime_;
}
inline void UpdatePoolResponse::set_updatetime(const ::std::string& value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
}
inline void UpdatePoolResponse::set_updatetime(const char* value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
}
inline void UpdatePoolResponse::set_updatetime(const char* value, size_t size) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdatePoolResponse::mutable_updatetime() {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  return updatetime_;
}
inline ::std::string* UpdatePoolResponse::release_updatetime() {
  clear_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = updatetime_;
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// QueryPoolRequest

// required string custid = 1;
inline bool QueryPoolRequest::has_custid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryPoolRequest::set_has_custid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryPoolRequest::clear_has_custid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryPoolRequest::clear_custid() {
  if (custid_ != &::google::protobuf::internal::kEmptyString) {
    custid_->clear();
  }
  clear_has_custid();
}
inline const ::std::string& QueryPoolRequest::custid() const {
  return *custid_;
}
inline void QueryPoolRequest::set_custid(const ::std::string& value) {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  custid_->assign(value);
}
inline void QueryPoolRequest::set_custid(const char* value) {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  custid_->assign(value);
}
inline void QueryPoolRequest::set_custid(const char* value, size_t size) {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  custid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryPoolRequest::mutable_custid() {
  set_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    custid_ = new ::std::string;
  }
  return custid_;
}
inline ::std::string* QueryPoolRequest::release_custid() {
  clear_has_custid();
  if (custid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = custid_;
    custid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string orgid = 2;
inline bool QueryPoolRequest::has_orgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryPoolRequest::set_has_orgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryPoolRequest::clear_has_orgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryPoolRequest::clear_orgid() {
  if (orgid_ != &::google::protobuf::internal::kEmptyString) {
    orgid_->clear();
  }
  clear_has_orgid();
}
inline const ::std::string& QueryPoolRequest::orgid() const {
  return *orgid_;
}
inline void QueryPoolRequest::set_orgid(const ::std::string& value) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(value);
}
inline void QueryPoolRequest::set_orgid(const char* value) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(value);
}
inline void QueryPoolRequest::set_orgid(const char* value, size_t size) {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  orgid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryPoolRequest::mutable_orgid() {
  set_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    orgid_ = new ::std::string;
  }
  return orgid_;
}
inline ::std::string* QueryPoolRequest::release_orgid() {
  clear_has_orgid();
  if (orgid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orgid_;
    orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string synctime = 3;
inline bool QueryPoolRequest::has_synctime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryPoolRequest::set_has_synctime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryPoolRequest::clear_has_synctime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryPoolRequest::clear_synctime() {
  if (synctime_ != &::google::protobuf::internal::kEmptyString) {
    synctime_->clear();
  }
  clear_has_synctime();
}
inline const ::std::string& QueryPoolRequest::synctime() const {
  return *synctime_;
}
inline void QueryPoolRequest::set_synctime(const ::std::string& value) {
  set_has_synctime();
  if (synctime_ == &::google::protobuf::internal::kEmptyString) {
    synctime_ = new ::std::string;
  }
  synctime_->assign(value);
}
inline void QueryPoolRequest::set_synctime(const char* value) {
  set_has_synctime();
  if (synctime_ == &::google::protobuf::internal::kEmptyString) {
    synctime_ = new ::std::string;
  }
  synctime_->assign(value);
}
inline void QueryPoolRequest::set_synctime(const char* value, size_t size) {
  set_has_synctime();
  if (synctime_ == &::google::protobuf::internal::kEmptyString) {
    synctime_ = new ::std::string;
  }
  synctime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryPoolRequest::mutable_synctime() {
  set_has_synctime();
  if (synctime_ == &::google::protobuf::internal::kEmptyString) {
    synctime_ = new ::std::string;
  }
  return synctime_;
}
inline ::std::string* QueryPoolRequest::release_synctime() {
  clear_has_synctime();
  if (synctime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = synctime_;
    synctime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 pooltype = 4;
inline bool QueryPoolRequest::has_pooltype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryPoolRequest::set_has_pooltype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryPoolRequest::clear_has_pooltype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryPoolRequest::clear_pooltype() {
  pooltype_ = 0;
  clear_has_pooltype();
}
inline ::google::protobuf::int32 QueryPoolRequest::pooltype() const {
  return pooltype_;
}
inline void QueryPoolRequest::set_pooltype(::google::protobuf::int32 value) {
  set_has_pooltype();
  pooltype_ = value;
}

// optional int32 poolgroup = 5;
inline bool QueryPoolRequest::has_poolgroup() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryPoolRequest::set_has_poolgroup() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryPoolRequest::clear_has_poolgroup() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryPoolRequest::clear_poolgroup() {
  poolgroup_ = 0;
  clear_has_poolgroup();
}
inline ::google::protobuf::int32 QueryPoolRequest::poolgroup() const {
  return poolgroup_;
}
inline void QueryPoolRequest::set_poolgroup(::google::protobuf::int32 value) {
  set_has_poolgroup();
  poolgroup_ = value;
}

// -------------------------------------------------------------------

// QueryPoolResponse

// required string servertime = 1;
inline bool QueryPoolResponse::has_servertime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryPoolResponse::set_has_servertime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryPoolResponse::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryPoolResponse::clear_servertime() {
  if (servertime_ != &::google::protobuf::internal::kEmptyString) {
    servertime_->clear();
  }
  clear_has_servertime();
}
inline const ::std::string& QueryPoolResponse::servertime() const {
  return *servertime_;
}
inline void QueryPoolResponse::set_servertime(const ::std::string& value) {
  set_has_servertime();
  if (servertime_ == &::google::protobuf::internal::kEmptyString) {
    servertime_ = new ::std::string;
  }
  servertime_->assign(value);
}
inline void QueryPoolResponse::set_servertime(const char* value) {
  set_has_servertime();
  if (servertime_ == &::google::protobuf::internal::kEmptyString) {
    servertime_ = new ::std::string;
  }
  servertime_->assign(value);
}
inline void QueryPoolResponse::set_servertime(const char* value, size_t size) {
  set_has_servertime();
  if (servertime_ == &::google::protobuf::internal::kEmptyString) {
    servertime_ = new ::std::string;
  }
  servertime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryPoolResponse::mutable_servertime() {
  set_has_servertime();
  if (servertime_ == &::google::protobuf::internal::kEmptyString) {
    servertime_ = new ::std::string;
  }
  return servertime_;
}
inline ::std::string* QueryPoolResponse::release_servertime() {
  clear_has_servertime();
  if (servertime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servertime_;
    servertime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .quote.Pool pool = 2;
inline int QueryPoolResponse::pool_size() const {
  return pool_.size();
}
inline void QueryPoolResponse::clear_pool() {
  pool_.Clear();
}
inline const ::quote::Pool& QueryPoolResponse::pool(int index) const {
  return pool_.Get(index);
}
inline ::quote::Pool* QueryPoolResponse::mutable_pool(int index) {
  return pool_.Mutable(index);
}
inline ::quote::Pool* QueryPoolResponse::add_pool() {
  return pool_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::Pool >&
QueryPoolResponse::pool() const {
  return pool_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::Pool >*
QueryPoolResponse::mutable_pool() {
  return &pool_;
}

// -------------------------------------------------------------------

// UpdatePoolTypeRequest

// repeated .quote.PoolType pooltype = 1;
inline int UpdatePoolTypeRequest::pooltype_size() const {
  return pooltype_.size();
}
inline void UpdatePoolTypeRequest::clear_pooltype() {
  pooltype_.Clear();
}
inline const ::quote::PoolType& UpdatePoolTypeRequest::pooltype(int index) const {
  return pooltype_.Get(index);
}
inline ::quote::PoolType* UpdatePoolTypeRequest::mutable_pooltype(int index) {
  return pooltype_.Mutable(index);
}
inline ::quote::PoolType* UpdatePoolTypeRequest::add_pooltype() {
  return pooltype_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::PoolType >&
UpdatePoolTypeRequest::pooltype() const {
  return pooltype_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::PoolType >*
UpdatePoolTypeRequest::mutable_pooltype() {
  return &pooltype_;
}

// -------------------------------------------------------------------

// UpdatePoolTypeResponse

// required string updatetime = 1;
inline bool UpdatePoolTypeResponse::has_updatetime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdatePoolTypeResponse::set_has_updatetime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdatePoolTypeResponse::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdatePoolTypeResponse::clear_updatetime() {
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    updatetime_->clear();
  }
  clear_has_updatetime();
}
inline const ::std::string& UpdatePoolTypeResponse::updatetime() const {
  return *updatetime_;
}
inline void UpdatePoolTypeResponse::set_updatetime(const ::std::string& value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
}
inline void UpdatePoolTypeResponse::set_updatetime(const char* value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
}
inline void UpdatePoolTypeResponse::set_updatetime(const char* value, size_t size) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdatePoolTypeResponse::mutable_updatetime() {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  return updatetime_;
}
inline ::std::string* UpdatePoolTypeResponse::release_updatetime() {
  clear_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = updatetime_;
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// QueryPoolTypeRequest

// optional string synctime = 1;
inline bool QueryPoolTypeRequest::has_synctime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryPoolTypeRequest::set_has_synctime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryPoolTypeRequest::clear_has_synctime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryPoolTypeRequest::clear_synctime() {
  if (synctime_ != &::google::protobuf::internal::kEmptyString) {
    synctime_->clear();
  }
  clear_has_synctime();
}
inline const ::std::string& QueryPoolTypeRequest::synctime() const {
  return *synctime_;
}
inline void QueryPoolTypeRequest::set_synctime(const ::std::string& value) {
  set_has_synctime();
  if (synctime_ == &::google::protobuf::internal::kEmptyString) {
    synctime_ = new ::std::string;
  }
  synctime_->assign(value);
}
inline void QueryPoolTypeRequest::set_synctime(const char* value) {
  set_has_synctime();
  if (synctime_ == &::google::protobuf::internal::kEmptyString) {
    synctime_ = new ::std::string;
  }
  synctime_->assign(value);
}
inline void QueryPoolTypeRequest::set_synctime(const char* value, size_t size) {
  set_has_synctime();
  if (synctime_ == &::google::protobuf::internal::kEmptyString) {
    synctime_ = new ::std::string;
  }
  synctime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryPoolTypeRequest::mutable_synctime() {
  set_has_synctime();
  if (synctime_ == &::google::protobuf::internal::kEmptyString) {
    synctime_ = new ::std::string;
  }
  return synctime_;
}
inline ::std::string* QueryPoolTypeRequest::release_synctime() {
  clear_has_synctime();
  if (synctime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = synctime_;
    synctime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 pooltype = 2;
inline bool QueryPoolTypeRequest::has_pooltype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryPoolTypeRequest::set_has_pooltype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryPoolTypeRequest::clear_has_pooltype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryPoolTypeRequest::clear_pooltype() {
  pooltype_ = 0;
  clear_has_pooltype();
}
inline ::google::protobuf::int32 QueryPoolTypeRequest::pooltype() const {
  return pooltype_;
}
inline void QueryPoolTypeRequest::set_pooltype(::google::protobuf::int32 value) {
  set_has_pooltype();
  pooltype_ = value;
}

// -------------------------------------------------------------------

// QueryPoolTypeResponse

// required string servertime = 1;
inline bool QueryPoolTypeResponse::has_servertime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryPoolTypeResponse::set_has_servertime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryPoolTypeResponse::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryPoolTypeResponse::clear_servertime() {
  if (servertime_ != &::google::protobuf::internal::kEmptyString) {
    servertime_->clear();
  }
  clear_has_servertime();
}
inline const ::std::string& QueryPoolTypeResponse::servertime() const {
  return *servertime_;
}
inline void QueryPoolTypeResponse::set_servertime(const ::std::string& value) {
  set_has_servertime();
  if (servertime_ == &::google::protobuf::internal::kEmptyString) {
    servertime_ = new ::std::string;
  }
  servertime_->assign(value);
}
inline void QueryPoolTypeResponse::set_servertime(const char* value) {
  set_has_servertime();
  if (servertime_ == &::google::protobuf::internal::kEmptyString) {
    servertime_ = new ::std::string;
  }
  servertime_->assign(value);
}
inline void QueryPoolTypeResponse::set_servertime(const char* value, size_t size) {
  set_has_servertime();
  if (servertime_ == &::google::protobuf::internal::kEmptyString) {
    servertime_ = new ::std::string;
  }
  servertime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryPoolTypeResponse::mutable_servertime() {
  set_has_servertime();
  if (servertime_ == &::google::protobuf::internal::kEmptyString) {
    servertime_ = new ::std::string;
  }
  return servertime_;
}
inline ::std::string* QueryPoolTypeResponse::release_servertime() {
  clear_has_servertime();
  if (servertime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servertime_;
    servertime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .quote.PoolType pooltype = 2;
inline int QueryPoolTypeResponse::pooltype_size() const {
  return pooltype_.size();
}
inline void QueryPoolTypeResponse::clear_pooltype() {
  pooltype_.Clear();
}
inline const ::quote::PoolType& QueryPoolTypeResponse::pooltype(int index) const {
  return pooltype_.Get(index);
}
inline ::quote::PoolType* QueryPoolTypeResponse::mutable_pooltype(int index) {
  return pooltype_.Mutable(index);
}
inline ::quote::PoolType* QueryPoolTypeResponse::add_pooltype() {
  return pooltype_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::PoolType >&
QueryPoolTypeResponse::pooltype() const {
  return pooltype_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::PoolType >*
QueryPoolTypeResponse::mutable_pooltype() {
  return &pooltype_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace quote

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_stockpool_2eproto__INCLUDED
