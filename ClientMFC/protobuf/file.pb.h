// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#ifndef PROTOBUF_file_2eproto__INCLUDED
#define PROTOBUF_file_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace quote {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_file_2eproto();
void protobuf_AssignDesc_file_2eproto();
void protobuf_ShutdownFile_file_2eproto();

class FileStock;
class FileStock_StockDetail;
class FileFinance;
class FileFinance_FinanceDetail;
class FileFinanceFund;
class FileFinanceFund_FinanceFundDetail;
class FileZsbx;
class FileZsbx_ZsbxDetail;
class FileBlock;
class FileBlock_Block;
class FileBlock_Block_BlockDetail;
class FileBlockStock;
class FileBlockStock_BlockStock;
class FileBlockStock_BlockStock_BlockStockDetail;
class FileMd5;
class FileMd5_Md5;

enum FileBlock_Block_Name {
  FileBlock_Block_Name_INDUSTRY = 1,
  FileBlock_Block_Name_CSRCINDUSTRY = 2,
  FileBlock_Block_Name_AREA = 3,
  FileBlock_Block_Name_CONCEPT = 4
};
bool FileBlock_Block_Name_IsValid(int value);
const FileBlock_Block_Name FileBlock_Block_Name_Name_MIN = FileBlock_Block_Name_INDUSTRY;
const FileBlock_Block_Name FileBlock_Block_Name_Name_MAX = FileBlock_Block_Name_CONCEPT;
const int FileBlock_Block_Name_Name_ARRAYSIZE = FileBlock_Block_Name_Name_MAX + 1;

const ::google::protobuf::EnumDescriptor* FileBlock_Block_Name_descriptor();
inline const ::std::string& FileBlock_Block_Name_Name(FileBlock_Block_Name value) {
  return ::google::protobuf::internal::NameOfEnum(
    FileBlock_Block_Name_descriptor(), value);
}
inline bool FileBlock_Block_Name_Parse(
    const ::std::string& name, FileBlock_Block_Name* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileBlock_Block_Name>(
    FileBlock_Block_Name_descriptor(), name, value);
}
enum FileMd5_Md5_FileName {
  FileMd5_Md5_FileName_SH_STOCK = 1,
  FileMd5_Md5_FileName_SZ_STOCK = 2,
  FileMd5_Md5_FileName_FINANCE_DATA = 3,
  FileMd5_Md5_FileName_KF_FINANCE = 4,
  FileMd5_Md5_FileName_BLOCK_DATA = 5,
  FileMd5_Md5_FileName_BLOCKSTOCK_DATA = 6
};
bool FileMd5_Md5_FileName_IsValid(int value);
const FileMd5_Md5_FileName FileMd5_Md5_FileName_FileName_MIN = FileMd5_Md5_FileName_SH_STOCK;
const FileMd5_Md5_FileName FileMd5_Md5_FileName_FileName_MAX = FileMd5_Md5_FileName_BLOCKSTOCK_DATA;
const int FileMd5_Md5_FileName_FileName_ARRAYSIZE = FileMd5_Md5_FileName_FileName_MAX + 1;

const ::google::protobuf::EnumDescriptor* FileMd5_Md5_FileName_descriptor();
inline const ::std::string& FileMd5_Md5_FileName_Name(FileMd5_Md5_FileName value) {
  return ::google::protobuf::internal::NameOfEnum(
    FileMd5_Md5_FileName_descriptor(), value);
}
inline bool FileMd5_Md5_FileName_Parse(
    const ::std::string& name, FileMd5_Md5_FileName* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileMd5_Md5_FileName>(
    FileMd5_Md5_FileName_descriptor(), name, value);
}
// ===================================================================

class FileStock_StockDetail : public ::google::protobuf::Message {
 public:
  FileStock_StockDetail();
  virtual ~FileStock_StockDetail();
  
  FileStock_StockDetail(const FileStock_StockDetail& from);
  
  inline FileStock_StockDetail& operator=(const FileStock_StockDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileStock_StockDetail& default_instance();
  
  void Swap(FileStock_StockDetail* other);
  
  // implements Message ----------------------------------------------
  
  FileStock_StockDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileStock_StockDetail& from);
  void MergeFrom(const FileStock_StockDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string secucode = 1;
  inline bool has_secucode() const;
  inline void clear_secucode();
  static const int kSecucodeFieldNumber = 1;
  inline const ::std::string& secucode() const;
  inline void set_secucode(const ::std::string& value);
  inline void set_secucode(const char* value);
  inline void set_secucode(const char* value, size_t size);
  inline ::std::string* mutable_secucode();
  inline ::std::string* release_secucode();
  
  // required string secuname = 2;
  inline bool has_secuname() const;
  inline void clear_secuname();
  static const int kSecunameFieldNumber = 2;
  inline const ::std::string& secuname() const;
  inline void set_secuname(const ::std::string& value);
  inline void set_secuname(const char* value);
  inline void set_secuname(const char* value, size_t size);
  inline ::std::string* mutable_secuname();
  inline ::std::string* release_secuname();
  
  // repeated string secupy = 3;
  inline int secupy_size() const;
  inline void clear_secupy();
  static const int kSecupyFieldNumber = 3;
  inline const ::std::string& secupy(int index) const;
  inline ::std::string* mutable_secupy(int index);
  inline void set_secupy(int index, const ::std::string& value);
  inline void set_secupy(int index, const char* value);
  inline void set_secupy(int index, const char* value, size_t size);
  inline ::std::string* add_secupy();
  inline void add_secupy(const ::std::string& value);
  inline void add_secupy(const char* value);
  inline void add_secupy(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& secupy() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_secupy();
  
  // required int32 secutype = 4;
  inline bool has_secutype() const;
  inline void clear_secutype();
  static const int kSecutypeFieldNumber = 4;
  inline ::google::protobuf::int32 secutype() const;
  inline void set_secutype(::google::protobuf::int32 value);
  
  // required int32 coefficient = 5;
  inline bool has_coefficient() const;
  inline void clear_coefficient();
  static const int kCoefficientFieldNumber = 5;
  inline ::google::protobuf::int32 coefficient() const;
  inline void set_coefficient(::google::protobuf::int32 value);
  
  // required float preclose = 6;
  inline bool has_preclose() const;
  inline void clear_preclose();
  static const int kPrecloseFieldNumber = 6;
  inline float preclose() const;
  inline void set_preclose(float value);
  
  // @@protoc_insertion_point(class_scope:quote.FileStock.StockDetail)
 private:
  inline void set_has_secucode();
  inline void clear_has_secucode();
  inline void set_has_secuname();
  inline void clear_has_secuname();
  inline void set_has_secutype();
  inline void clear_has_secutype();
  inline void set_has_coefficient();
  inline void clear_has_coefficient();
  inline void set_has_preclose();
  inline void clear_has_preclose();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* secucode_;
  ::std::string* secuname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> secupy_;
  ::google::protobuf::int32 secutype_;
  ::google::protobuf::int32 coefficient_;
  float preclose_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();
  
  void InitAsDefaultInstance();
  static FileStock_StockDetail* default_instance_;
};
// -------------------------------------------------------------------

class FileStock : public ::google::protobuf::Message {
 public:
  FileStock();
  virtual ~FileStock();
  
  FileStock(const FileStock& from);
  
  inline FileStock& operator=(const FileStock& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileStock& default_instance();
  
  void Swap(FileStock* other);
  
  // implements Message ----------------------------------------------
  
  FileStock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileStock& from);
  void MergeFrom(const FileStock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef FileStock_StockDetail StockDetail;
  
  // accessors -------------------------------------------------------
  
  // repeated .quote.FileStock.StockDetail stockdetail = 1;
  inline int stockdetail_size() const;
  inline void clear_stockdetail();
  static const int kStockdetailFieldNumber = 1;
  inline const ::quote::FileStock_StockDetail& stockdetail(int index) const;
  inline ::quote::FileStock_StockDetail* mutable_stockdetail(int index);
  inline ::quote::FileStock_StockDetail* add_stockdetail();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::FileStock_StockDetail >&
      stockdetail() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::FileStock_StockDetail >*
      mutable_stockdetail();
  
  // @@protoc_insertion_point(class_scope:quote.FileStock)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::quote::FileStock_StockDetail > stockdetail_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();
  
  void InitAsDefaultInstance();
  static FileStock* default_instance_;
};
// -------------------------------------------------------------------

class FileFinance_FinanceDetail : public ::google::protobuf::Message {
 public:
  FileFinance_FinanceDetail();
  virtual ~FileFinance_FinanceDetail();
  
  FileFinance_FinanceDetail(const FileFinance_FinanceDetail& from);
  
  inline FileFinance_FinanceDetail& operator=(const FileFinance_FinanceDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileFinance_FinanceDetail& default_instance();
  
  void Swap(FileFinance_FinanceDetail* other);
  
  // implements Message ----------------------------------------------
  
  FileFinance_FinanceDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileFinance_FinanceDetail& from);
  void MergeFrom(const FileFinance_FinanceDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string secucode = 1;
  inline bool has_secucode() const;
  inline void clear_secucode();
  static const int kSecucodeFieldNumber = 1;
  inline const ::std::string& secucode() const;
  inline void set_secucode(const ::std::string& value);
  inline void set_secucode(const char* value);
  inline void set_secucode(const char* value, size_t size);
  inline ::std::string* mutable_secucode();
  inline ::std::string* release_secucode();
  
  // optional int64 ltsl = 2;
  inline bool has_ltsl() const;
  inline void clear_ltsl();
  static const int kLtslFieldNumber = 2;
  inline ::google::protobuf::int64 ltsl() const;
  inline void set_ltsl(::google::protobuf::int64 value);
  
  // optional float gb = 3;
  inline bool has_gb() const;
  inline void clear_gb();
  static const int kGbFieldNumber = 3;
  inline float gb() const;
  inline void set_gb(float value);
  
  // optional float jz = 4;
  inline bool has_jz() const;
  inline void clear_jz();
  static const int kJzFieldNumber = 4;
  inline float jz() const;
  inline void set_jz(float value);
  
  // optional float jlr = 5;
  inline bool has_jlr() const;
  inline void clear_jlr();
  static const int kJlrFieldNumber = 5;
  inline float jlr() const;
  inline void set_jlr(float value);
  
  // optional int32 syjd = 6;
  inline bool has_syjd() const;
  inline void clear_syjd();
  static const int kSyjdFieldNumber = 6;
  inline ::google::protobuf::int32 syjd() const;
  inline void set_syjd(::google::protobuf::int32 value);
  
  // optional float fullprice = 7;
  inline bool has_fullprice() const;
  inline void clear_fullprice();
  static const int kFullpriceFieldNumber = 7;
  inline float fullprice() const;
  inline void set_fullprice(float value);
  
  // @@protoc_insertion_point(class_scope:quote.FileFinance.FinanceDetail)
 private:
  inline void set_has_secucode();
  inline void clear_has_secucode();
  inline void set_has_ltsl();
  inline void clear_has_ltsl();
  inline void set_has_gb();
  inline void clear_has_gb();
  inline void set_has_jz();
  inline void clear_has_jz();
  inline void set_has_jlr();
  inline void clear_has_jlr();
  inline void set_has_syjd();
  inline void clear_has_syjd();
  inline void set_has_fullprice();
  inline void clear_has_fullprice();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* secucode_;
  ::google::protobuf::int64 ltsl_;
  float gb_;
  float jz_;
  float jlr_;
  ::google::protobuf::int32 syjd_;
  float fullprice_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();
  
  void InitAsDefaultInstance();
  static FileFinance_FinanceDetail* default_instance_;
};
// -------------------------------------------------------------------

class FileFinance : public ::google::protobuf::Message {
 public:
  FileFinance();
  virtual ~FileFinance();
  
  FileFinance(const FileFinance& from);
  
  inline FileFinance& operator=(const FileFinance& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileFinance& default_instance();
  
  void Swap(FileFinance* other);
  
  // implements Message ----------------------------------------------
  
  FileFinance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileFinance& from);
  void MergeFrom(const FileFinance& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef FileFinance_FinanceDetail FinanceDetail;
  
  // accessors -------------------------------------------------------
  
  // repeated .quote.FileFinance.FinanceDetail financedetail = 1;
  inline int financedetail_size() const;
  inline void clear_financedetail();
  static const int kFinancedetailFieldNumber = 1;
  inline const ::quote::FileFinance_FinanceDetail& financedetail(int index) const;
  inline ::quote::FileFinance_FinanceDetail* mutable_financedetail(int index);
  inline ::quote::FileFinance_FinanceDetail* add_financedetail();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::FileFinance_FinanceDetail >&
      financedetail() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::FileFinance_FinanceDetail >*
      mutable_financedetail();
  
  // @@protoc_insertion_point(class_scope:quote.FileFinance)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::quote::FileFinance_FinanceDetail > financedetail_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();
  
  void InitAsDefaultInstance();
  static FileFinance* default_instance_;
};
// -------------------------------------------------------------------

class FileFinanceFund_FinanceFundDetail : public ::google::protobuf::Message {
 public:
  FileFinanceFund_FinanceFundDetail();
  virtual ~FileFinanceFund_FinanceFundDetail();
  
  FileFinanceFund_FinanceFundDetail(const FileFinanceFund_FinanceFundDetail& from);
  
  inline FileFinanceFund_FinanceFundDetail& operator=(const FileFinanceFund_FinanceFundDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileFinanceFund_FinanceFundDetail& default_instance();
  
  void Swap(FileFinanceFund_FinanceFundDetail* other);
  
  // implements Message ----------------------------------------------
  
  FileFinanceFund_FinanceFundDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileFinanceFund_FinanceFundDetail& from);
  void MergeFrom(const FileFinanceFund_FinanceFundDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string secucode = 1;
  inline bool has_secucode() const;
  inline void clear_secucode();
  static const int kSecucodeFieldNumber = 1;
  inline const ::std::string& secucode() const;
  inline void set_secucode(const ::std::string& value);
  inline void set_secucode(const char* value);
  inline void set_secucode(const char* value, size_t size);
  inline ::std::string* mutable_secucode();
  inline ::std::string* release_secucode();
  
  // required string secuname = 2;
  inline bool has_secuname() const;
  inline void clear_secuname();
  static const int kSecunameFieldNumber = 2;
  inline const ::std::string& secuname() const;
  inline void set_secuname(const ::std::string& value);
  inline void set_secuname(const char* value);
  inline void set_secuname(const char* value, size_t size);
  inline ::std::string* mutable_secuname();
  inline ::std::string* release_secuname();
  
  // repeated string secupy = 3;
  inline int secupy_size() const;
  inline void clear_secupy();
  static const int kSecupyFieldNumber = 3;
  inline const ::std::string& secupy(int index) const;
  inline ::std::string* mutable_secupy(int index);
  inline void set_secupy(int index, const ::std::string& value);
  inline void set_secupy(int index, const char* value);
  inline void set_secupy(int index, const char* value, size_t size);
  inline ::std::string* add_secupy();
  inline void add_secupy(const ::std::string& value);
  inline void add_secupy(const char* value);
  inline void add_secupy(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& secupy() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_secupy();
  
  // required int32 secutype = 4;
  inline bool has_secutype() const;
  inline void clear_secutype();
  static const int kSecutypeFieldNumber = 4;
  inline ::google::protobuf::int32 secutype() const;
  inline void set_secutype(::google::protobuf::int32 value);
  
  // optional float unitnav = 5;
  inline bool has_unitnav() const;
  inline void clear_unitnav();
  static const int kUnitnavFieldNumber = 5;
  inline float unitnav() const;
  inline void set_unitnav(float value);
  
  // optional float accuunitnav = 6;
  inline bool has_accuunitnav() const;
  inline void clear_accuunitnav();
  static const int kAccuunitnavFieldNumber = 6;
  inline float accuunitnav() const;
  inline void set_accuunitnav(float value);
  
  // optional float changerate = 7;
  inline bool has_changerate() const;
  inline void clear_changerate();
  static const int kChangerateFieldNumber = 7;
  inline float changerate() const;
  inline void set_changerate(float value);
  
  // optional float changeratew = 8;
  inline bool has_changeratew() const;
  inline void clear_changeratew();
  static const int kChangeratewFieldNumber = 8;
  inline float changeratew() const;
  inline void set_changeratew(float value);
  
  // optional float changeratem = 9;
  inline bool has_changeratem() const;
  inline void clear_changeratem();
  static const int kChangeratemFieldNumber = 9;
  inline float changeratem() const;
  inline void set_changeratem(float value);
  
  // optional float changerate3m = 10;
  inline bool has_changerate3m() const;
  inline void clear_changerate3m();
  static const int kChangerate3MFieldNumber = 10;
  inline float changerate3m() const;
  inline void set_changerate3m(float value);
  
  // optional float changerate6m = 11;
  inline bool has_changerate6m() const;
  inline void clear_changerate6m();
  static const int kChangerate6MFieldNumber = 11;
  inline float changerate6m() const;
  inline void set_changerate6m(float value);
  
  // optional float changeratey = 12;
  inline bool has_changeratey() const;
  inline void clear_changeratey();
  static const int kChangerateyFieldNumber = 12;
  inline float changeratey() const;
  inline void set_changeratey(float value);
  
  // optional float dailyreturn = 13;
  inline bool has_dailyreturn() const;
  inline void clear_dailyreturn();
  static const int kDailyreturnFieldNumber = 13;
  inline float dailyreturn() const;
  inline void set_dailyreturn(float value);
  
  // optional float annuyield = 14;
  inline bool has_annuyield() const;
  inline void clear_annuyield();
  static const int kAnnuyieldFieldNumber = 14;
  inline float annuyield() const;
  inline void set_annuyield(float value);
  
  // optional float fundvol = 15;
  inline bool has_fundvol() const;
  inline void clear_fundvol();
  static const int kFundvolFieldNumber = 15;
  inline float fundvol() const;
  inline void set_fundvol(float value);
  
  // optional int32 managementcomid = 16;
  inline bool has_managementcomid() const;
  inline void clear_managementcomid();
  static const int kManagementcomidFieldNumber = 16;
  inline ::google::protobuf::int32 managementcomid() const;
  inline void set_managementcomid(::google::protobuf::int32 value);
  
  // optional string managementcom = 17;
  inline bool has_managementcom() const;
  inline void clear_managementcom();
  static const int kManagementcomFieldNumber = 17;
  inline const ::std::string& managementcom() const;
  inline void set_managementcom(const ::std::string& value);
  inline void set_managementcom(const char* value);
  inline void set_managementcom(const char* value, size_t size);
  inline ::std::string* mutable_managementcom();
  inline ::std::string* release_managementcom();
  
  // optional string fundmanager = 18;
  inline bool has_fundmanager() const;
  inline void clear_fundmanager();
  static const int kFundmanagerFieldNumber = 18;
  inline const ::std::string& fundmanager() const;
  inline void set_fundmanager(const ::std::string& value);
  inline void set_fundmanager(const char* value);
  inline void set_fundmanager(const char* value, size_t size);
  inline ::std::string* mutable_fundmanager();
  inline ::std::string* release_fundmanager();
  
  // optional string fundcustodian = 19;
  inline bool has_fundcustodian() const;
  inline void clear_fundcustodian();
  static const int kFundcustodianFieldNumber = 19;
  inline const ::std::string& fundcustodian() const;
  inline void set_fundcustodian(const ::std::string& value);
  inline void set_fundcustodian(const char* value);
  inline void set_fundcustodian(const char* value, size_t size);
  inline ::std::string* mutable_fundcustodian();
  inline ::std::string* release_fundcustodian();
  
  // optional int32 starrank3 = 20;
  inline bool has_starrank3() const;
  inline void clear_starrank3();
  static const int kStarrank3FieldNumber = 20;
  inline ::google::protobuf::int32 starrank3() const;
  inline void set_starrank3(::google::protobuf::int32 value);
  
  // optional int32 starrank5 = 21;
  inline bool has_starrank5() const;
  inline void clear_starrank5();
  static const int kStarrank5FieldNumber = 21;
  inline ::google::protobuf::int32 starrank5() const;
  inline void set_starrank5(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:quote.FileFinanceFund.FinanceFundDetail)
 private:
  inline void set_has_secucode();
  inline void clear_has_secucode();
  inline void set_has_secuname();
  inline void clear_has_secuname();
  inline void set_has_secutype();
  inline void clear_has_secutype();
  inline void set_has_unitnav();
  inline void clear_has_unitnav();
  inline void set_has_accuunitnav();
  inline void clear_has_accuunitnav();
  inline void set_has_changerate();
  inline void clear_has_changerate();
  inline void set_has_changeratew();
  inline void clear_has_changeratew();
  inline void set_has_changeratem();
  inline void clear_has_changeratem();
  inline void set_has_changerate3m();
  inline void clear_has_changerate3m();
  inline void set_has_changerate6m();
  inline void clear_has_changerate6m();
  inline void set_has_changeratey();
  inline void clear_has_changeratey();
  inline void set_has_dailyreturn();
  inline void clear_has_dailyreturn();
  inline void set_has_annuyield();
  inline void clear_has_annuyield();
  inline void set_has_fundvol();
  inline void clear_has_fundvol();
  inline void set_has_managementcomid();
  inline void clear_has_managementcomid();
  inline void set_has_managementcom();
  inline void clear_has_managementcom();
  inline void set_has_fundmanager();
  inline void clear_has_fundmanager();
  inline void set_has_fundcustodian();
  inline void clear_has_fundcustodian();
  inline void set_has_starrank3();
  inline void clear_has_starrank3();
  inline void set_has_starrank5();
  inline void clear_has_starrank5();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* secucode_;
  ::std::string* secuname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> secupy_;
  ::google::protobuf::int32 secutype_;
  float unitnav_;
  float accuunitnav_;
  float changerate_;
  float changeratew_;
  float changeratem_;
  float changerate3m_;
  float changerate6m_;
  float changeratey_;
  float dailyreturn_;
  float annuyield_;
  float fundvol_;
  ::std::string* managementcom_;
  ::std::string* fundmanager_;
  ::google::protobuf::int32 managementcomid_;
  ::google::protobuf::int32 starrank3_;
  ::std::string* fundcustodian_;
  ::google::protobuf::int32 starrank5_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();
  
  void InitAsDefaultInstance();
  static FileFinanceFund_FinanceFundDetail* default_instance_;
};
// -------------------------------------------------------------------

class FileFinanceFund : public ::google::protobuf::Message {
 public:
  FileFinanceFund();
  virtual ~FileFinanceFund();
  
  FileFinanceFund(const FileFinanceFund& from);
  
  inline FileFinanceFund& operator=(const FileFinanceFund& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileFinanceFund& default_instance();
  
  void Swap(FileFinanceFund* other);
  
  // implements Message ----------------------------------------------
  
  FileFinanceFund* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileFinanceFund& from);
  void MergeFrom(const FileFinanceFund& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef FileFinanceFund_FinanceFundDetail FinanceFundDetail;
  
  // accessors -------------------------------------------------------
  
  // repeated .quote.FileFinanceFund.FinanceFundDetail financefunddetail = 1;
  inline int financefunddetail_size() const;
  inline void clear_financefunddetail();
  static const int kFinancefunddetailFieldNumber = 1;
  inline const ::quote::FileFinanceFund_FinanceFundDetail& financefunddetail(int index) const;
  inline ::quote::FileFinanceFund_FinanceFundDetail* mutable_financefunddetail(int index);
  inline ::quote::FileFinanceFund_FinanceFundDetail* add_financefunddetail();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::FileFinanceFund_FinanceFundDetail >&
      financefunddetail() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::FileFinanceFund_FinanceFundDetail >*
      mutable_financefunddetail();
  
  // @@protoc_insertion_point(class_scope:quote.FileFinanceFund)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::quote::FileFinanceFund_FinanceFundDetail > financefunddetail_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();
  
  void InitAsDefaultInstance();
  static FileFinanceFund* default_instance_;
};
// -------------------------------------------------------------------

class FileZsbx_ZsbxDetail : public ::google::protobuf::Message {
 public:
  FileZsbx_ZsbxDetail();
  virtual ~FileZsbx_ZsbxDetail();
  
  FileZsbx_ZsbxDetail(const FileZsbx_ZsbxDetail& from);
  
  inline FileZsbx_ZsbxDetail& operator=(const FileZsbx_ZsbxDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileZsbx_ZsbxDetail& default_instance();
  
  void Swap(FileZsbx_ZsbxDetail* other);
  
  // implements Message ----------------------------------------------
  
  FileZsbx_ZsbxDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileZsbx_ZsbxDetail& from);
  void MergeFrom(const FileZsbx_ZsbxDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string secucode = 1;
  inline bool has_secucode() const;
  inline void clear_secucode();
  static const int kSecucodeFieldNumber = 1;
  inline const ::std::string& secucode() const;
  inline void set_secucode(const ::std::string& value);
  inline void set_secucode(const char* value);
  inline void set_secucode(const char* value, size_t size);
  inline ::std::string* mutable_secucode();
  inline ::std::string* release_secucode();
  
  // optional int32 ybsl = 2;
  inline bool has_ybsl() const;
  inline void clear_ybsl();
  static const int kYbslFieldNumber = 2;
  inline ::google::protobuf::int32 ybsl() const;
  inline void set_ybsl(::google::protobuf::int32 value);
  
  // optional float ybjj = 3;
  inline bool has_ybjj() const;
  inline void clear_ybjj();
  static const int kYbjjFieldNumber = 3;
  inline float ybjj() const;
  inline void set_ybjj(float value);
  
  // optional float pjgb = 4;
  inline bool has_pjgb() const;
  inline void clear_pjgb();
  static const int kPjgbFieldNumber = 4;
  inline float pjgb() const;
  inline void set_pjgb(float value);
  
  // optional float zsz = 5;
  inline bool has_zsz() const;
  inline void clear_zsz();
  static const int kZszFieldNumber = 5;
  inline float zsz() const;
  inline void set_zsz(float value);
  
  // optional float zb = 6;
  inline bool has_zb() const;
  inline void clear_zb();
  static const int kZbFieldNumber = 6;
  inline float zb() const;
  inline void set_zb(float value);
  
  // optional float jtsyl = 7;
  inline bool has_jtsyl() const;
  inline void clear_jtsyl();
  static const int kJtsylFieldNumber = 7;
  inline float jtsyl() const;
  inline void set_jtsyl(float value);
  
  // @@protoc_insertion_point(class_scope:quote.FileZsbx.ZsbxDetail)
 private:
  inline void set_has_secucode();
  inline void clear_has_secucode();
  inline void set_has_ybsl();
  inline void clear_has_ybsl();
  inline void set_has_ybjj();
  inline void clear_has_ybjj();
  inline void set_has_pjgb();
  inline void clear_has_pjgb();
  inline void set_has_zsz();
  inline void clear_has_zsz();
  inline void set_has_zb();
  inline void clear_has_zb();
  inline void set_has_jtsyl();
  inline void clear_has_jtsyl();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* secucode_;
  ::google::protobuf::int32 ybsl_;
  float ybjj_;
  float pjgb_;
  float zsz_;
  float zb_;
  float jtsyl_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();
  
  void InitAsDefaultInstance();
  static FileZsbx_ZsbxDetail* default_instance_;
};
// -------------------------------------------------------------------

class FileZsbx : public ::google::protobuf::Message {
 public:
  FileZsbx();
  virtual ~FileZsbx();
  
  FileZsbx(const FileZsbx& from);
  
  inline FileZsbx& operator=(const FileZsbx& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileZsbx& default_instance();
  
  void Swap(FileZsbx* other);
  
  // implements Message ----------------------------------------------
  
  FileZsbx* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileZsbx& from);
  void MergeFrom(const FileZsbx& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef FileZsbx_ZsbxDetail ZsbxDetail;
  
  // accessors -------------------------------------------------------
  
  // repeated .quote.FileZsbx.ZsbxDetail zsbxdetail = 1;
  inline int zsbxdetail_size() const;
  inline void clear_zsbxdetail();
  static const int kZsbxdetailFieldNumber = 1;
  inline const ::quote::FileZsbx_ZsbxDetail& zsbxdetail(int index) const;
  inline ::quote::FileZsbx_ZsbxDetail* mutable_zsbxdetail(int index);
  inline ::quote::FileZsbx_ZsbxDetail* add_zsbxdetail();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::FileZsbx_ZsbxDetail >&
      zsbxdetail() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::FileZsbx_ZsbxDetail >*
      mutable_zsbxdetail();
  
  // @@protoc_insertion_point(class_scope:quote.FileZsbx)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::quote::FileZsbx_ZsbxDetail > zsbxdetail_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();
  
  void InitAsDefaultInstance();
  static FileZsbx* default_instance_;
};
// -------------------------------------------------------------------

class FileBlock_Block_BlockDetail : public ::google::protobuf::Message {
 public:
  FileBlock_Block_BlockDetail();
  virtual ~FileBlock_Block_BlockDetail();
  
  FileBlock_Block_BlockDetail(const FileBlock_Block_BlockDetail& from);
  
  inline FileBlock_Block_BlockDetail& operator=(const FileBlock_Block_BlockDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileBlock_Block_BlockDetail& default_instance();
  
  void Swap(FileBlock_Block_BlockDetail* other);
  
  // implements Message ----------------------------------------------
  
  FileBlock_Block_BlockDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileBlock_Block_BlockDetail& from);
  void MergeFrom(const FileBlock_Block_BlockDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 blockid = 1;
  inline bool has_blockid() const;
  inline void clear_blockid();
  static const int kBlockidFieldNumber = 1;
  inline ::google::protobuf::int32 blockid() const;
  inline void set_blockid(::google::protobuf::int32 value);
  
  // required string blockname = 2;
  inline bool has_blockname() const;
  inline void clear_blockname();
  static const int kBlocknameFieldNumber = 2;
  inline const ::std::string& blockname() const;
  inline void set_blockname(const ::std::string& value);
  inline void set_blockname(const char* value);
  inline void set_blockname(const char* value, size_t size);
  inline ::std::string* mutable_blockname();
  inline ::std::string* release_blockname();
  
  // @@protoc_insertion_point(class_scope:quote.FileBlock.Block.BlockDetail)
 private:
  inline void set_has_blockid();
  inline void clear_has_blockid();
  inline void set_has_blockname();
  inline void clear_has_blockname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* blockname_;
  ::google::protobuf::int32 blockid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();
  
  void InitAsDefaultInstance();
  static FileBlock_Block_BlockDetail* default_instance_;
};
// -------------------------------------------------------------------

class FileBlock_Block : public ::google::protobuf::Message {
 public:
  FileBlock_Block();
  virtual ~FileBlock_Block();
  
  FileBlock_Block(const FileBlock_Block& from);
  
  inline FileBlock_Block& operator=(const FileBlock_Block& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileBlock_Block& default_instance();
  
  void Swap(FileBlock_Block* other);
  
  // implements Message ----------------------------------------------
  
  FileBlock_Block* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileBlock_Block& from);
  void MergeFrom(const FileBlock_Block& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef FileBlock_Block_BlockDetail BlockDetail;
  
  typedef FileBlock_Block_Name Name;
  static const Name INDUSTRY = FileBlock_Block_Name_INDUSTRY;
  static const Name CSRCINDUSTRY = FileBlock_Block_Name_CSRCINDUSTRY;
  static const Name AREA = FileBlock_Block_Name_AREA;
  static const Name CONCEPT = FileBlock_Block_Name_CONCEPT;
  static inline bool Name_IsValid(int value) {
    return FileBlock_Block_Name_IsValid(value);
  }
  static const Name Name_MIN =
    FileBlock_Block_Name_Name_MIN;
  static const Name Name_MAX =
    FileBlock_Block_Name_Name_MAX;
  static const int Name_ARRAYSIZE =
    FileBlock_Block_Name_Name_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Name_descriptor() {
    return FileBlock_Block_Name_descriptor();
  }
  static inline const ::std::string& Name_Name(Name value) {
    return FileBlock_Block_Name_Name(value);
  }
  static inline bool Name_Parse(const ::std::string& name,
      Name* value) {
    return FileBlock_Block_Name_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .quote.FileBlock.Block.Name name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline ::quote::FileBlock_Block_Name name() const;
  inline void set_name(::quote::FileBlock_Block_Name value);
  
  // repeated .quote.FileBlock.Block.BlockDetail blockdetail = 2;
  inline int blockdetail_size() const;
  inline void clear_blockdetail();
  static const int kBlockdetailFieldNumber = 2;
  inline const ::quote::FileBlock_Block_BlockDetail& blockdetail(int index) const;
  inline ::quote::FileBlock_Block_BlockDetail* mutable_blockdetail(int index);
  inline ::quote::FileBlock_Block_BlockDetail* add_blockdetail();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::FileBlock_Block_BlockDetail >&
      blockdetail() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::FileBlock_Block_BlockDetail >*
      mutable_blockdetail();
  
  // @@protoc_insertion_point(class_scope:quote.FileBlock.Block)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::quote::FileBlock_Block_BlockDetail > blockdetail_;
  int name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();
  
  void InitAsDefaultInstance();
  static FileBlock_Block* default_instance_;
};
// -------------------------------------------------------------------

class FileBlock : public ::google::protobuf::Message {
 public:
  FileBlock();
  virtual ~FileBlock();
  
  FileBlock(const FileBlock& from);
  
  inline FileBlock& operator=(const FileBlock& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileBlock& default_instance();
  
  void Swap(FileBlock* other);
  
  // implements Message ----------------------------------------------
  
  FileBlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileBlock& from);
  void MergeFrom(const FileBlock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef FileBlock_Block Block;
  
  // accessors -------------------------------------------------------
  
  // repeated .quote.FileBlock.Block block = 1;
  inline int block_size() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 1;
  inline const ::quote::FileBlock_Block& block(int index) const;
  inline ::quote::FileBlock_Block* mutable_block(int index);
  inline ::quote::FileBlock_Block* add_block();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::FileBlock_Block >&
      block() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::FileBlock_Block >*
      mutable_block();
  
  // @@protoc_insertion_point(class_scope:quote.FileBlock)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::quote::FileBlock_Block > block_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();
  
  void InitAsDefaultInstance();
  static FileBlock* default_instance_;
};
// -------------------------------------------------------------------

class FileBlockStock_BlockStock_BlockStockDetail : public ::google::protobuf::Message {
 public:
  FileBlockStock_BlockStock_BlockStockDetail();
  virtual ~FileBlockStock_BlockStock_BlockStockDetail();
  
  FileBlockStock_BlockStock_BlockStockDetail(const FileBlockStock_BlockStock_BlockStockDetail& from);
  
  inline FileBlockStock_BlockStock_BlockStockDetail& operator=(const FileBlockStock_BlockStock_BlockStockDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileBlockStock_BlockStock_BlockStockDetail& default_instance();
  
  void Swap(FileBlockStock_BlockStock_BlockStockDetail* other);
  
  // implements Message ----------------------------------------------
  
  FileBlockStock_BlockStock_BlockStockDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileBlockStock_BlockStock_BlockStockDetail& from);
  void MergeFrom(const FileBlockStock_BlockStock_BlockStockDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string secucode = 1;
  inline bool has_secucode() const;
  inline void clear_secucode();
  static const int kSecucodeFieldNumber = 1;
  inline const ::std::string& secucode() const;
  inline void set_secucode(const ::std::string& value);
  inline void set_secucode(const char* value);
  inline void set_secucode(const char* value, size_t size);
  inline ::std::string* mutable_secucode();
  inline ::std::string* release_secucode();
  
  // required int32 exchange = 2;
  inline bool has_exchange() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  inline ::google::protobuf::int32 exchange() const;
  inline void set_exchange(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:quote.FileBlockStock.BlockStock.BlockStockDetail)
 private:
  inline void set_has_secucode();
  inline void clear_has_secucode();
  inline void set_has_exchange();
  inline void clear_has_exchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* secucode_;
  ::google::protobuf::int32 exchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();
  
  void InitAsDefaultInstance();
  static FileBlockStock_BlockStock_BlockStockDetail* default_instance_;
};
// -------------------------------------------------------------------

class FileBlockStock_BlockStock : public ::google::protobuf::Message {
 public:
  FileBlockStock_BlockStock();
  virtual ~FileBlockStock_BlockStock();
  
  FileBlockStock_BlockStock(const FileBlockStock_BlockStock& from);
  
  inline FileBlockStock_BlockStock& operator=(const FileBlockStock_BlockStock& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileBlockStock_BlockStock& default_instance();
  
  void Swap(FileBlockStock_BlockStock* other);
  
  // implements Message ----------------------------------------------
  
  FileBlockStock_BlockStock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileBlockStock_BlockStock& from);
  void MergeFrom(const FileBlockStock_BlockStock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef FileBlockStock_BlockStock_BlockStockDetail BlockStockDetail;
  
  // accessors -------------------------------------------------------
  
  // required int32 blockid = 1;
  inline bool has_blockid() const;
  inline void clear_blockid();
  static const int kBlockidFieldNumber = 1;
  inline ::google::protobuf::int32 blockid() const;
  inline void set_blockid(::google::protobuf::int32 value);
  
  // repeated .quote.FileBlockStock.BlockStock.BlockStockDetail blockstockdetail = 2;
  inline int blockstockdetail_size() const;
  inline void clear_blockstockdetail();
  static const int kBlockstockdetailFieldNumber = 2;
  inline const ::quote::FileBlockStock_BlockStock_BlockStockDetail& blockstockdetail(int index) const;
  inline ::quote::FileBlockStock_BlockStock_BlockStockDetail* mutable_blockstockdetail(int index);
  inline ::quote::FileBlockStock_BlockStock_BlockStockDetail* add_blockstockdetail();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::FileBlockStock_BlockStock_BlockStockDetail >&
      blockstockdetail() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::FileBlockStock_BlockStock_BlockStockDetail >*
      mutable_blockstockdetail();
  
  // @@protoc_insertion_point(class_scope:quote.FileBlockStock.BlockStock)
 private:
  inline void set_has_blockid();
  inline void clear_has_blockid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::quote::FileBlockStock_BlockStock_BlockStockDetail > blockstockdetail_;
  ::google::protobuf::int32 blockid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();
  
  void InitAsDefaultInstance();
  static FileBlockStock_BlockStock* default_instance_;
};
// -------------------------------------------------------------------

class FileBlockStock : public ::google::protobuf::Message {
 public:
  FileBlockStock();
  virtual ~FileBlockStock();
  
  FileBlockStock(const FileBlockStock& from);
  
  inline FileBlockStock& operator=(const FileBlockStock& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileBlockStock& default_instance();
  
  void Swap(FileBlockStock* other);
  
  // implements Message ----------------------------------------------
  
  FileBlockStock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileBlockStock& from);
  void MergeFrom(const FileBlockStock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef FileBlockStock_BlockStock BlockStock;
  
  // accessors -------------------------------------------------------
  
  // repeated .quote.FileBlockStock.BlockStock blockstock = 1;
  inline int blockstock_size() const;
  inline void clear_blockstock();
  static const int kBlockstockFieldNumber = 1;
  inline const ::quote::FileBlockStock_BlockStock& blockstock(int index) const;
  inline ::quote::FileBlockStock_BlockStock* mutable_blockstock(int index);
  inline ::quote::FileBlockStock_BlockStock* add_blockstock();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::FileBlockStock_BlockStock >&
      blockstock() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::FileBlockStock_BlockStock >*
      mutable_blockstock();
  
  // @@protoc_insertion_point(class_scope:quote.FileBlockStock)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::quote::FileBlockStock_BlockStock > blockstock_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();
  
  void InitAsDefaultInstance();
  static FileBlockStock* default_instance_;
};
// -------------------------------------------------------------------

class FileMd5_Md5 : public ::google::protobuf::Message {
 public:
  FileMd5_Md5();
  virtual ~FileMd5_Md5();
  
  FileMd5_Md5(const FileMd5_Md5& from);
  
  inline FileMd5_Md5& operator=(const FileMd5_Md5& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileMd5_Md5& default_instance();
  
  void Swap(FileMd5_Md5* other);
  
  // implements Message ----------------------------------------------
  
  FileMd5_Md5* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileMd5_Md5& from);
  void MergeFrom(const FileMd5_Md5& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef FileMd5_Md5_FileName FileName;
  static const FileName SH_STOCK = FileMd5_Md5_FileName_SH_STOCK;
  static const FileName SZ_STOCK = FileMd5_Md5_FileName_SZ_STOCK;
  static const FileName FINANCE_DATA = FileMd5_Md5_FileName_FINANCE_DATA;
  static const FileName KF_FINANCE = FileMd5_Md5_FileName_KF_FINANCE;
  static const FileName BLOCK_DATA = FileMd5_Md5_FileName_BLOCK_DATA;
  static const FileName BLOCKSTOCK_DATA = FileMd5_Md5_FileName_BLOCKSTOCK_DATA;
  static inline bool FileName_IsValid(int value) {
    return FileMd5_Md5_FileName_IsValid(value);
  }
  static const FileName FileName_MIN =
    FileMd5_Md5_FileName_FileName_MIN;
  static const FileName FileName_MAX =
    FileMd5_Md5_FileName_FileName_MAX;
  static const int FileName_ARRAYSIZE =
    FileMd5_Md5_FileName_FileName_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FileName_descriptor() {
    return FileMd5_Md5_FileName_descriptor();
  }
  static inline const ::std::string& FileName_Name(FileName value) {
    return FileMd5_Md5_FileName_Name(value);
  }
  static inline bool FileName_Parse(const ::std::string& name,
      FileName* value) {
    return FileMd5_Md5_FileName_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .quote.FileMd5.Md5.FileName filename = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 1;
  inline ::quote::FileMd5_Md5_FileName filename() const;
  inline void set_filename(::quote::FileMd5_Md5_FileName value);
  
  // required string md5code = 2;
  inline bool has_md5code() const;
  inline void clear_md5code();
  static const int kMd5CodeFieldNumber = 2;
  inline const ::std::string& md5code() const;
  inline void set_md5code(const ::std::string& value);
  inline void set_md5code(const char* value);
  inline void set_md5code(const char* value, size_t size);
  inline ::std::string* mutable_md5code();
  inline ::std::string* release_md5code();
  
  // @@protoc_insertion_point(class_scope:quote.FileMd5.Md5)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_md5code();
  inline void clear_has_md5code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* md5code_;
  int filename_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();
  
  void InitAsDefaultInstance();
  static FileMd5_Md5* default_instance_;
};
// -------------------------------------------------------------------

class FileMd5 : public ::google::protobuf::Message {
 public:
  FileMd5();
  virtual ~FileMd5();
  
  FileMd5(const FileMd5& from);
  
  inline FileMd5& operator=(const FileMd5& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileMd5& default_instance();
  
  void Swap(FileMd5* other);
  
  // implements Message ----------------------------------------------
  
  FileMd5* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileMd5& from);
  void MergeFrom(const FileMd5& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef FileMd5_Md5 Md5;
  
  // accessors -------------------------------------------------------
  
  // repeated .quote.FileMd5.Md5 md5 = 1;
  inline int md5_size() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 1;
  inline const ::quote::FileMd5_Md5& md5(int index) const;
  inline ::quote::FileMd5_Md5* mutable_md5(int index);
  inline ::quote::FileMd5_Md5* add_md5();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::FileMd5_Md5 >&
      md5() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::FileMd5_Md5 >*
      mutable_md5();
  
  // @@protoc_insertion_point(class_scope:quote.FileMd5)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::quote::FileMd5_Md5 > md5_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();
  
  void InitAsDefaultInstance();
  static FileMd5* default_instance_;
};
// ===================================================================


// ===================================================================

// FileStock_StockDetail

// required string secucode = 1;
inline bool FileStock_StockDetail::has_secucode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileStock_StockDetail::set_has_secucode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileStock_StockDetail::clear_has_secucode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileStock_StockDetail::clear_secucode() {
  if (secucode_ != &::google::protobuf::internal::kEmptyString) {
    secucode_->clear();
  }
  clear_has_secucode();
}
inline const ::std::string& FileStock_StockDetail::secucode() const {
  return *secucode_;
}
inline void FileStock_StockDetail::set_secucode(const ::std::string& value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void FileStock_StockDetail::set_secucode(const char* value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void FileStock_StockDetail::set_secucode(const char* value, size_t size) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileStock_StockDetail::mutable_secucode() {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  return secucode_;
}
inline ::std::string* FileStock_StockDetail::release_secucode() {
  clear_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secucode_;
    secucode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string secuname = 2;
inline bool FileStock_StockDetail::has_secuname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileStock_StockDetail::set_has_secuname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileStock_StockDetail::clear_has_secuname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileStock_StockDetail::clear_secuname() {
  if (secuname_ != &::google::protobuf::internal::kEmptyString) {
    secuname_->clear();
  }
  clear_has_secuname();
}
inline const ::std::string& FileStock_StockDetail::secuname() const {
  return *secuname_;
}
inline void FileStock_StockDetail::set_secuname(const ::std::string& value) {
  set_has_secuname();
  if (secuname_ == &::google::protobuf::internal::kEmptyString) {
    secuname_ = new ::std::string;
  }
  secuname_->assign(value);
}
inline void FileStock_StockDetail::set_secuname(const char* value) {
  set_has_secuname();
  if (secuname_ == &::google::protobuf::internal::kEmptyString) {
    secuname_ = new ::std::string;
  }
  secuname_->assign(value);
}
inline void FileStock_StockDetail::set_secuname(const char* value, size_t size) {
  set_has_secuname();
  if (secuname_ == &::google::protobuf::internal::kEmptyString) {
    secuname_ = new ::std::string;
  }
  secuname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileStock_StockDetail::mutable_secuname() {
  set_has_secuname();
  if (secuname_ == &::google::protobuf::internal::kEmptyString) {
    secuname_ = new ::std::string;
  }
  return secuname_;
}
inline ::std::string* FileStock_StockDetail::release_secuname() {
  clear_has_secuname();
  if (secuname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secuname_;
    secuname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string secupy = 3;
inline int FileStock_StockDetail::secupy_size() const {
  return secupy_.size();
}
inline void FileStock_StockDetail::clear_secupy() {
  secupy_.Clear();
}
inline const ::std::string& FileStock_StockDetail::secupy(int index) const {
  return secupy_.Get(index);
}
inline ::std::string* FileStock_StockDetail::mutable_secupy(int index) {
  return secupy_.Mutable(index);
}
inline void FileStock_StockDetail::set_secupy(int index, const ::std::string& value) {
  secupy_.Mutable(index)->assign(value);
}
inline void FileStock_StockDetail::set_secupy(int index, const char* value) {
  secupy_.Mutable(index)->assign(value);
}
inline void FileStock_StockDetail::set_secupy(int index, const char* value, size_t size) {
  secupy_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileStock_StockDetail::add_secupy() {
  return secupy_.Add();
}
inline void FileStock_StockDetail::add_secupy(const ::std::string& value) {
  secupy_.Add()->assign(value);
}
inline void FileStock_StockDetail::add_secupy(const char* value) {
  secupy_.Add()->assign(value);
}
inline void FileStock_StockDetail::add_secupy(const char* value, size_t size) {
  secupy_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FileStock_StockDetail::secupy() const {
  return secupy_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FileStock_StockDetail::mutable_secupy() {
  return &secupy_;
}

// required int32 secutype = 4;
inline bool FileStock_StockDetail::has_secutype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileStock_StockDetail::set_has_secutype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileStock_StockDetail::clear_has_secutype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileStock_StockDetail::clear_secutype() {
  secutype_ = 0;
  clear_has_secutype();
}
inline ::google::protobuf::int32 FileStock_StockDetail::secutype() const {
  return secutype_;
}
inline void FileStock_StockDetail::set_secutype(::google::protobuf::int32 value) {
  set_has_secutype();
  secutype_ = value;
}

// required int32 coefficient = 5;
inline bool FileStock_StockDetail::has_coefficient() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileStock_StockDetail::set_has_coefficient() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FileStock_StockDetail::clear_has_coefficient() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FileStock_StockDetail::clear_coefficient() {
  coefficient_ = 0;
  clear_has_coefficient();
}
inline ::google::protobuf::int32 FileStock_StockDetail::coefficient() const {
  return coefficient_;
}
inline void FileStock_StockDetail::set_coefficient(::google::protobuf::int32 value) {
  set_has_coefficient();
  coefficient_ = value;
}

// required float preclose = 6;
inline bool FileStock_StockDetail::has_preclose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FileStock_StockDetail::set_has_preclose() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FileStock_StockDetail::clear_has_preclose() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FileStock_StockDetail::clear_preclose() {
  preclose_ = 0;
  clear_has_preclose();
}
inline float FileStock_StockDetail::preclose() const {
  return preclose_;
}
inline void FileStock_StockDetail::set_preclose(float value) {
  set_has_preclose();
  preclose_ = value;
}

// -------------------------------------------------------------------

// FileStock

// repeated .quote.FileStock.StockDetail stockdetail = 1;
inline int FileStock::stockdetail_size() const {
  return stockdetail_.size();
}
inline void FileStock::clear_stockdetail() {
  stockdetail_.Clear();
}
inline const ::quote::FileStock_StockDetail& FileStock::stockdetail(int index) const {
  return stockdetail_.Get(index);
}
inline ::quote::FileStock_StockDetail* FileStock::mutable_stockdetail(int index) {
  return stockdetail_.Mutable(index);
}
inline ::quote::FileStock_StockDetail* FileStock::add_stockdetail() {
  return stockdetail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::FileStock_StockDetail >&
FileStock::stockdetail() const {
  return stockdetail_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::FileStock_StockDetail >*
FileStock::mutable_stockdetail() {
  return &stockdetail_;
}

// -------------------------------------------------------------------

// FileFinance_FinanceDetail

// required string secucode = 1;
inline bool FileFinance_FinanceDetail::has_secucode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileFinance_FinanceDetail::set_has_secucode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileFinance_FinanceDetail::clear_has_secucode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileFinance_FinanceDetail::clear_secucode() {
  if (secucode_ != &::google::protobuf::internal::kEmptyString) {
    secucode_->clear();
  }
  clear_has_secucode();
}
inline const ::std::string& FileFinance_FinanceDetail::secucode() const {
  return *secucode_;
}
inline void FileFinance_FinanceDetail::set_secucode(const ::std::string& value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void FileFinance_FinanceDetail::set_secucode(const char* value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void FileFinance_FinanceDetail::set_secucode(const char* value, size_t size) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileFinance_FinanceDetail::mutable_secucode() {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  return secucode_;
}
inline ::std::string* FileFinance_FinanceDetail::release_secucode() {
  clear_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secucode_;
    secucode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 ltsl = 2;
inline bool FileFinance_FinanceDetail::has_ltsl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileFinance_FinanceDetail::set_has_ltsl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileFinance_FinanceDetail::clear_has_ltsl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileFinance_FinanceDetail::clear_ltsl() {
  ltsl_ = GOOGLE_LONGLONG(0);
  clear_has_ltsl();
}
inline ::google::protobuf::int64 FileFinance_FinanceDetail::ltsl() const {
  return ltsl_;
}
inline void FileFinance_FinanceDetail::set_ltsl(::google::protobuf::int64 value) {
  set_has_ltsl();
  ltsl_ = value;
}

// optional float gb = 3;
inline bool FileFinance_FinanceDetail::has_gb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileFinance_FinanceDetail::set_has_gb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileFinance_FinanceDetail::clear_has_gb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileFinance_FinanceDetail::clear_gb() {
  gb_ = 0;
  clear_has_gb();
}
inline float FileFinance_FinanceDetail::gb() const {
  return gb_;
}
inline void FileFinance_FinanceDetail::set_gb(float value) {
  set_has_gb();
  gb_ = value;
}

// optional float jz = 4;
inline bool FileFinance_FinanceDetail::has_jz() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileFinance_FinanceDetail::set_has_jz() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileFinance_FinanceDetail::clear_has_jz() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileFinance_FinanceDetail::clear_jz() {
  jz_ = 0;
  clear_has_jz();
}
inline float FileFinance_FinanceDetail::jz() const {
  return jz_;
}
inline void FileFinance_FinanceDetail::set_jz(float value) {
  set_has_jz();
  jz_ = value;
}

// optional float jlr = 5;
inline bool FileFinance_FinanceDetail::has_jlr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileFinance_FinanceDetail::set_has_jlr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FileFinance_FinanceDetail::clear_has_jlr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FileFinance_FinanceDetail::clear_jlr() {
  jlr_ = 0;
  clear_has_jlr();
}
inline float FileFinance_FinanceDetail::jlr() const {
  return jlr_;
}
inline void FileFinance_FinanceDetail::set_jlr(float value) {
  set_has_jlr();
  jlr_ = value;
}

// optional int32 syjd = 6;
inline bool FileFinance_FinanceDetail::has_syjd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FileFinance_FinanceDetail::set_has_syjd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FileFinance_FinanceDetail::clear_has_syjd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FileFinance_FinanceDetail::clear_syjd() {
  syjd_ = 0;
  clear_has_syjd();
}
inline ::google::protobuf::int32 FileFinance_FinanceDetail::syjd() const {
  return syjd_;
}
inline void FileFinance_FinanceDetail::set_syjd(::google::protobuf::int32 value) {
  set_has_syjd();
  syjd_ = value;
}

// optional float fullprice = 7;
inline bool FileFinance_FinanceDetail::has_fullprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FileFinance_FinanceDetail::set_has_fullprice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FileFinance_FinanceDetail::clear_has_fullprice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FileFinance_FinanceDetail::clear_fullprice() {
  fullprice_ = 0;
  clear_has_fullprice();
}
inline float FileFinance_FinanceDetail::fullprice() const {
  return fullprice_;
}
inline void FileFinance_FinanceDetail::set_fullprice(float value) {
  set_has_fullprice();
  fullprice_ = value;
}

// -------------------------------------------------------------------

// FileFinance

// repeated .quote.FileFinance.FinanceDetail financedetail = 1;
inline int FileFinance::financedetail_size() const {
  return financedetail_.size();
}
inline void FileFinance::clear_financedetail() {
  financedetail_.Clear();
}
inline const ::quote::FileFinance_FinanceDetail& FileFinance::financedetail(int index) const {
  return financedetail_.Get(index);
}
inline ::quote::FileFinance_FinanceDetail* FileFinance::mutable_financedetail(int index) {
  return financedetail_.Mutable(index);
}
inline ::quote::FileFinance_FinanceDetail* FileFinance::add_financedetail() {
  return financedetail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::FileFinance_FinanceDetail >&
FileFinance::financedetail() const {
  return financedetail_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::FileFinance_FinanceDetail >*
FileFinance::mutable_financedetail() {
  return &financedetail_;
}

// -------------------------------------------------------------------

// FileFinanceFund_FinanceFundDetail

// required string secucode = 1;
inline bool FileFinanceFund_FinanceFundDetail::has_secucode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_secucode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_secucode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_secucode() {
  if (secucode_ != &::google::protobuf::internal::kEmptyString) {
    secucode_->clear();
  }
  clear_has_secucode();
}
inline const ::std::string& FileFinanceFund_FinanceFundDetail::secucode() const {
  return *secucode_;
}
inline void FileFinanceFund_FinanceFundDetail::set_secucode(const ::std::string& value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void FileFinanceFund_FinanceFundDetail::set_secucode(const char* value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void FileFinanceFund_FinanceFundDetail::set_secucode(const char* value, size_t size) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileFinanceFund_FinanceFundDetail::mutable_secucode() {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  return secucode_;
}
inline ::std::string* FileFinanceFund_FinanceFundDetail::release_secucode() {
  clear_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secucode_;
    secucode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string secuname = 2;
inline bool FileFinanceFund_FinanceFundDetail::has_secuname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_secuname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_secuname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_secuname() {
  if (secuname_ != &::google::protobuf::internal::kEmptyString) {
    secuname_->clear();
  }
  clear_has_secuname();
}
inline const ::std::string& FileFinanceFund_FinanceFundDetail::secuname() const {
  return *secuname_;
}
inline void FileFinanceFund_FinanceFundDetail::set_secuname(const ::std::string& value) {
  set_has_secuname();
  if (secuname_ == &::google::protobuf::internal::kEmptyString) {
    secuname_ = new ::std::string;
  }
  secuname_->assign(value);
}
inline void FileFinanceFund_FinanceFundDetail::set_secuname(const char* value) {
  set_has_secuname();
  if (secuname_ == &::google::protobuf::internal::kEmptyString) {
    secuname_ = new ::std::string;
  }
  secuname_->assign(value);
}
inline void FileFinanceFund_FinanceFundDetail::set_secuname(const char* value, size_t size) {
  set_has_secuname();
  if (secuname_ == &::google::protobuf::internal::kEmptyString) {
    secuname_ = new ::std::string;
  }
  secuname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileFinanceFund_FinanceFundDetail::mutable_secuname() {
  set_has_secuname();
  if (secuname_ == &::google::protobuf::internal::kEmptyString) {
    secuname_ = new ::std::string;
  }
  return secuname_;
}
inline ::std::string* FileFinanceFund_FinanceFundDetail::release_secuname() {
  clear_has_secuname();
  if (secuname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secuname_;
    secuname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string secupy = 3;
inline int FileFinanceFund_FinanceFundDetail::secupy_size() const {
  return secupy_.size();
}
inline void FileFinanceFund_FinanceFundDetail::clear_secupy() {
  secupy_.Clear();
}
inline const ::std::string& FileFinanceFund_FinanceFundDetail::secupy(int index) const {
  return secupy_.Get(index);
}
inline ::std::string* FileFinanceFund_FinanceFundDetail::mutable_secupy(int index) {
  return secupy_.Mutable(index);
}
inline void FileFinanceFund_FinanceFundDetail::set_secupy(int index, const ::std::string& value) {
  secupy_.Mutable(index)->assign(value);
}
inline void FileFinanceFund_FinanceFundDetail::set_secupy(int index, const char* value) {
  secupy_.Mutable(index)->assign(value);
}
inline void FileFinanceFund_FinanceFundDetail::set_secupy(int index, const char* value, size_t size) {
  secupy_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileFinanceFund_FinanceFundDetail::add_secupy() {
  return secupy_.Add();
}
inline void FileFinanceFund_FinanceFundDetail::add_secupy(const ::std::string& value) {
  secupy_.Add()->assign(value);
}
inline void FileFinanceFund_FinanceFundDetail::add_secupy(const char* value) {
  secupy_.Add()->assign(value);
}
inline void FileFinanceFund_FinanceFundDetail::add_secupy(const char* value, size_t size) {
  secupy_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FileFinanceFund_FinanceFundDetail::secupy() const {
  return secupy_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FileFinanceFund_FinanceFundDetail::mutable_secupy() {
  return &secupy_;
}

// required int32 secutype = 4;
inline bool FileFinanceFund_FinanceFundDetail::has_secutype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_secutype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_secutype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_secutype() {
  secutype_ = 0;
  clear_has_secutype();
}
inline ::google::protobuf::int32 FileFinanceFund_FinanceFundDetail::secutype() const {
  return secutype_;
}
inline void FileFinanceFund_FinanceFundDetail::set_secutype(::google::protobuf::int32 value) {
  set_has_secutype();
  secutype_ = value;
}

// optional float unitnav = 5;
inline bool FileFinanceFund_FinanceFundDetail::has_unitnav() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_unitnav() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_unitnav() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_unitnav() {
  unitnav_ = 0;
  clear_has_unitnav();
}
inline float FileFinanceFund_FinanceFundDetail::unitnav() const {
  return unitnav_;
}
inline void FileFinanceFund_FinanceFundDetail::set_unitnav(float value) {
  set_has_unitnav();
  unitnav_ = value;
}

// optional float accuunitnav = 6;
inline bool FileFinanceFund_FinanceFundDetail::has_accuunitnav() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_accuunitnav() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_accuunitnav() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_accuunitnav() {
  accuunitnav_ = 0;
  clear_has_accuunitnav();
}
inline float FileFinanceFund_FinanceFundDetail::accuunitnav() const {
  return accuunitnav_;
}
inline void FileFinanceFund_FinanceFundDetail::set_accuunitnav(float value) {
  set_has_accuunitnav();
  accuunitnav_ = value;
}

// optional float changerate = 7;
inline bool FileFinanceFund_FinanceFundDetail::has_changerate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_changerate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_changerate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_changerate() {
  changerate_ = 0;
  clear_has_changerate();
}
inline float FileFinanceFund_FinanceFundDetail::changerate() const {
  return changerate_;
}
inline void FileFinanceFund_FinanceFundDetail::set_changerate(float value) {
  set_has_changerate();
  changerate_ = value;
}

// optional float changeratew = 8;
inline bool FileFinanceFund_FinanceFundDetail::has_changeratew() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_changeratew() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_changeratew() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_changeratew() {
  changeratew_ = 0;
  clear_has_changeratew();
}
inline float FileFinanceFund_FinanceFundDetail::changeratew() const {
  return changeratew_;
}
inline void FileFinanceFund_FinanceFundDetail::set_changeratew(float value) {
  set_has_changeratew();
  changeratew_ = value;
}

// optional float changeratem = 9;
inline bool FileFinanceFund_FinanceFundDetail::has_changeratem() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_changeratem() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_changeratem() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_changeratem() {
  changeratem_ = 0;
  clear_has_changeratem();
}
inline float FileFinanceFund_FinanceFundDetail::changeratem() const {
  return changeratem_;
}
inline void FileFinanceFund_FinanceFundDetail::set_changeratem(float value) {
  set_has_changeratem();
  changeratem_ = value;
}

// optional float changerate3m = 10;
inline bool FileFinanceFund_FinanceFundDetail::has_changerate3m() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_changerate3m() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_changerate3m() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_changerate3m() {
  changerate3m_ = 0;
  clear_has_changerate3m();
}
inline float FileFinanceFund_FinanceFundDetail::changerate3m() const {
  return changerate3m_;
}
inline void FileFinanceFund_FinanceFundDetail::set_changerate3m(float value) {
  set_has_changerate3m();
  changerate3m_ = value;
}

// optional float changerate6m = 11;
inline bool FileFinanceFund_FinanceFundDetail::has_changerate6m() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_changerate6m() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_changerate6m() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_changerate6m() {
  changerate6m_ = 0;
  clear_has_changerate6m();
}
inline float FileFinanceFund_FinanceFundDetail::changerate6m() const {
  return changerate6m_;
}
inline void FileFinanceFund_FinanceFundDetail::set_changerate6m(float value) {
  set_has_changerate6m();
  changerate6m_ = value;
}

// optional float changeratey = 12;
inline bool FileFinanceFund_FinanceFundDetail::has_changeratey() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_changeratey() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_changeratey() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_changeratey() {
  changeratey_ = 0;
  clear_has_changeratey();
}
inline float FileFinanceFund_FinanceFundDetail::changeratey() const {
  return changeratey_;
}
inline void FileFinanceFund_FinanceFundDetail::set_changeratey(float value) {
  set_has_changeratey();
  changeratey_ = value;
}

// optional float dailyreturn = 13;
inline bool FileFinanceFund_FinanceFundDetail::has_dailyreturn() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_dailyreturn() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_dailyreturn() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_dailyreturn() {
  dailyreturn_ = 0;
  clear_has_dailyreturn();
}
inline float FileFinanceFund_FinanceFundDetail::dailyreturn() const {
  return dailyreturn_;
}
inline void FileFinanceFund_FinanceFundDetail::set_dailyreturn(float value) {
  set_has_dailyreturn();
  dailyreturn_ = value;
}

// optional float annuyield = 14;
inline bool FileFinanceFund_FinanceFundDetail::has_annuyield() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_annuyield() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_annuyield() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_annuyield() {
  annuyield_ = 0;
  clear_has_annuyield();
}
inline float FileFinanceFund_FinanceFundDetail::annuyield() const {
  return annuyield_;
}
inline void FileFinanceFund_FinanceFundDetail::set_annuyield(float value) {
  set_has_annuyield();
  annuyield_ = value;
}

// optional float fundvol = 15;
inline bool FileFinanceFund_FinanceFundDetail::has_fundvol() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_fundvol() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_fundvol() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_fundvol() {
  fundvol_ = 0;
  clear_has_fundvol();
}
inline float FileFinanceFund_FinanceFundDetail::fundvol() const {
  return fundvol_;
}
inline void FileFinanceFund_FinanceFundDetail::set_fundvol(float value) {
  set_has_fundvol();
  fundvol_ = value;
}

// optional int32 managementcomid = 16;
inline bool FileFinanceFund_FinanceFundDetail::has_managementcomid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_managementcomid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_managementcomid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_managementcomid() {
  managementcomid_ = 0;
  clear_has_managementcomid();
}
inline ::google::protobuf::int32 FileFinanceFund_FinanceFundDetail::managementcomid() const {
  return managementcomid_;
}
inline void FileFinanceFund_FinanceFundDetail::set_managementcomid(::google::protobuf::int32 value) {
  set_has_managementcomid();
  managementcomid_ = value;
}

// optional string managementcom = 17;
inline bool FileFinanceFund_FinanceFundDetail::has_managementcom() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_managementcom() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_managementcom() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_managementcom() {
  if (managementcom_ != &::google::protobuf::internal::kEmptyString) {
    managementcom_->clear();
  }
  clear_has_managementcom();
}
inline const ::std::string& FileFinanceFund_FinanceFundDetail::managementcom() const {
  return *managementcom_;
}
inline void FileFinanceFund_FinanceFundDetail::set_managementcom(const ::std::string& value) {
  set_has_managementcom();
  if (managementcom_ == &::google::protobuf::internal::kEmptyString) {
    managementcom_ = new ::std::string;
  }
  managementcom_->assign(value);
}
inline void FileFinanceFund_FinanceFundDetail::set_managementcom(const char* value) {
  set_has_managementcom();
  if (managementcom_ == &::google::protobuf::internal::kEmptyString) {
    managementcom_ = new ::std::string;
  }
  managementcom_->assign(value);
}
inline void FileFinanceFund_FinanceFundDetail::set_managementcom(const char* value, size_t size) {
  set_has_managementcom();
  if (managementcom_ == &::google::protobuf::internal::kEmptyString) {
    managementcom_ = new ::std::string;
  }
  managementcom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileFinanceFund_FinanceFundDetail::mutable_managementcom() {
  set_has_managementcom();
  if (managementcom_ == &::google::protobuf::internal::kEmptyString) {
    managementcom_ = new ::std::string;
  }
  return managementcom_;
}
inline ::std::string* FileFinanceFund_FinanceFundDetail::release_managementcom() {
  clear_has_managementcom();
  if (managementcom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = managementcom_;
    managementcom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string fundmanager = 18;
inline bool FileFinanceFund_FinanceFundDetail::has_fundmanager() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_fundmanager() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_fundmanager() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_fundmanager() {
  if (fundmanager_ != &::google::protobuf::internal::kEmptyString) {
    fundmanager_->clear();
  }
  clear_has_fundmanager();
}
inline const ::std::string& FileFinanceFund_FinanceFundDetail::fundmanager() const {
  return *fundmanager_;
}
inline void FileFinanceFund_FinanceFundDetail::set_fundmanager(const ::std::string& value) {
  set_has_fundmanager();
  if (fundmanager_ == &::google::protobuf::internal::kEmptyString) {
    fundmanager_ = new ::std::string;
  }
  fundmanager_->assign(value);
}
inline void FileFinanceFund_FinanceFundDetail::set_fundmanager(const char* value) {
  set_has_fundmanager();
  if (fundmanager_ == &::google::protobuf::internal::kEmptyString) {
    fundmanager_ = new ::std::string;
  }
  fundmanager_->assign(value);
}
inline void FileFinanceFund_FinanceFundDetail::set_fundmanager(const char* value, size_t size) {
  set_has_fundmanager();
  if (fundmanager_ == &::google::protobuf::internal::kEmptyString) {
    fundmanager_ = new ::std::string;
  }
  fundmanager_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileFinanceFund_FinanceFundDetail::mutable_fundmanager() {
  set_has_fundmanager();
  if (fundmanager_ == &::google::protobuf::internal::kEmptyString) {
    fundmanager_ = new ::std::string;
  }
  return fundmanager_;
}
inline ::std::string* FileFinanceFund_FinanceFundDetail::release_fundmanager() {
  clear_has_fundmanager();
  if (fundmanager_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fundmanager_;
    fundmanager_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string fundcustodian = 19;
inline bool FileFinanceFund_FinanceFundDetail::has_fundcustodian() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_fundcustodian() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_fundcustodian() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_fundcustodian() {
  if (fundcustodian_ != &::google::protobuf::internal::kEmptyString) {
    fundcustodian_->clear();
  }
  clear_has_fundcustodian();
}
inline const ::std::string& FileFinanceFund_FinanceFundDetail::fundcustodian() const {
  return *fundcustodian_;
}
inline void FileFinanceFund_FinanceFundDetail::set_fundcustodian(const ::std::string& value) {
  set_has_fundcustodian();
  if (fundcustodian_ == &::google::protobuf::internal::kEmptyString) {
    fundcustodian_ = new ::std::string;
  }
  fundcustodian_->assign(value);
}
inline void FileFinanceFund_FinanceFundDetail::set_fundcustodian(const char* value) {
  set_has_fundcustodian();
  if (fundcustodian_ == &::google::protobuf::internal::kEmptyString) {
    fundcustodian_ = new ::std::string;
  }
  fundcustodian_->assign(value);
}
inline void FileFinanceFund_FinanceFundDetail::set_fundcustodian(const char* value, size_t size) {
  set_has_fundcustodian();
  if (fundcustodian_ == &::google::protobuf::internal::kEmptyString) {
    fundcustodian_ = new ::std::string;
  }
  fundcustodian_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileFinanceFund_FinanceFundDetail::mutable_fundcustodian() {
  set_has_fundcustodian();
  if (fundcustodian_ == &::google::protobuf::internal::kEmptyString) {
    fundcustodian_ = new ::std::string;
  }
  return fundcustodian_;
}
inline ::std::string* FileFinanceFund_FinanceFundDetail::release_fundcustodian() {
  clear_has_fundcustodian();
  if (fundcustodian_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fundcustodian_;
    fundcustodian_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 starrank3 = 20;
inline bool FileFinanceFund_FinanceFundDetail::has_starrank3() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_starrank3() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_starrank3() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_starrank3() {
  starrank3_ = 0;
  clear_has_starrank3();
}
inline ::google::protobuf::int32 FileFinanceFund_FinanceFundDetail::starrank3() const {
  return starrank3_;
}
inline void FileFinanceFund_FinanceFundDetail::set_starrank3(::google::protobuf::int32 value) {
  set_has_starrank3();
  starrank3_ = value;
}

// optional int32 starrank5 = 21;
inline bool FileFinanceFund_FinanceFundDetail::has_starrank5() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void FileFinanceFund_FinanceFundDetail::set_has_starrank5() {
  _has_bits_[0] |= 0x00100000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_has_starrank5() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void FileFinanceFund_FinanceFundDetail::clear_starrank5() {
  starrank5_ = 0;
  clear_has_starrank5();
}
inline ::google::protobuf::int32 FileFinanceFund_FinanceFundDetail::starrank5() const {
  return starrank5_;
}
inline void FileFinanceFund_FinanceFundDetail::set_starrank5(::google::protobuf::int32 value) {
  set_has_starrank5();
  starrank5_ = value;
}

// -------------------------------------------------------------------

// FileFinanceFund

// repeated .quote.FileFinanceFund.FinanceFundDetail financefunddetail = 1;
inline int FileFinanceFund::financefunddetail_size() const {
  return financefunddetail_.size();
}
inline void FileFinanceFund::clear_financefunddetail() {
  financefunddetail_.Clear();
}
inline const ::quote::FileFinanceFund_FinanceFundDetail& FileFinanceFund::financefunddetail(int index) const {
  return financefunddetail_.Get(index);
}
inline ::quote::FileFinanceFund_FinanceFundDetail* FileFinanceFund::mutable_financefunddetail(int index) {
  return financefunddetail_.Mutable(index);
}
inline ::quote::FileFinanceFund_FinanceFundDetail* FileFinanceFund::add_financefunddetail() {
  return financefunddetail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::FileFinanceFund_FinanceFundDetail >&
FileFinanceFund::financefunddetail() const {
  return financefunddetail_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::FileFinanceFund_FinanceFundDetail >*
FileFinanceFund::mutable_financefunddetail() {
  return &financefunddetail_;
}

// -------------------------------------------------------------------

// FileZsbx_ZsbxDetail

// required string secucode = 1;
inline bool FileZsbx_ZsbxDetail::has_secucode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileZsbx_ZsbxDetail::set_has_secucode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileZsbx_ZsbxDetail::clear_has_secucode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileZsbx_ZsbxDetail::clear_secucode() {
  if (secucode_ != &::google::protobuf::internal::kEmptyString) {
    secucode_->clear();
  }
  clear_has_secucode();
}
inline const ::std::string& FileZsbx_ZsbxDetail::secucode() const {
  return *secucode_;
}
inline void FileZsbx_ZsbxDetail::set_secucode(const ::std::string& value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void FileZsbx_ZsbxDetail::set_secucode(const char* value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void FileZsbx_ZsbxDetail::set_secucode(const char* value, size_t size) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileZsbx_ZsbxDetail::mutable_secucode() {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  return secucode_;
}
inline ::std::string* FileZsbx_ZsbxDetail::release_secucode() {
  clear_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secucode_;
    secucode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 ybsl = 2;
inline bool FileZsbx_ZsbxDetail::has_ybsl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileZsbx_ZsbxDetail::set_has_ybsl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileZsbx_ZsbxDetail::clear_has_ybsl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileZsbx_ZsbxDetail::clear_ybsl() {
  ybsl_ = 0;
  clear_has_ybsl();
}
inline ::google::protobuf::int32 FileZsbx_ZsbxDetail::ybsl() const {
  return ybsl_;
}
inline void FileZsbx_ZsbxDetail::set_ybsl(::google::protobuf::int32 value) {
  set_has_ybsl();
  ybsl_ = value;
}

// optional float ybjj = 3;
inline bool FileZsbx_ZsbxDetail::has_ybjj() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileZsbx_ZsbxDetail::set_has_ybjj() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileZsbx_ZsbxDetail::clear_has_ybjj() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileZsbx_ZsbxDetail::clear_ybjj() {
  ybjj_ = 0;
  clear_has_ybjj();
}
inline float FileZsbx_ZsbxDetail::ybjj() const {
  return ybjj_;
}
inline void FileZsbx_ZsbxDetail::set_ybjj(float value) {
  set_has_ybjj();
  ybjj_ = value;
}

// optional float pjgb = 4;
inline bool FileZsbx_ZsbxDetail::has_pjgb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileZsbx_ZsbxDetail::set_has_pjgb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileZsbx_ZsbxDetail::clear_has_pjgb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileZsbx_ZsbxDetail::clear_pjgb() {
  pjgb_ = 0;
  clear_has_pjgb();
}
inline float FileZsbx_ZsbxDetail::pjgb() const {
  return pjgb_;
}
inline void FileZsbx_ZsbxDetail::set_pjgb(float value) {
  set_has_pjgb();
  pjgb_ = value;
}

// optional float zsz = 5;
inline bool FileZsbx_ZsbxDetail::has_zsz() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileZsbx_ZsbxDetail::set_has_zsz() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FileZsbx_ZsbxDetail::clear_has_zsz() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FileZsbx_ZsbxDetail::clear_zsz() {
  zsz_ = 0;
  clear_has_zsz();
}
inline float FileZsbx_ZsbxDetail::zsz() const {
  return zsz_;
}
inline void FileZsbx_ZsbxDetail::set_zsz(float value) {
  set_has_zsz();
  zsz_ = value;
}

// optional float zb = 6;
inline bool FileZsbx_ZsbxDetail::has_zb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FileZsbx_ZsbxDetail::set_has_zb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FileZsbx_ZsbxDetail::clear_has_zb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FileZsbx_ZsbxDetail::clear_zb() {
  zb_ = 0;
  clear_has_zb();
}
inline float FileZsbx_ZsbxDetail::zb() const {
  return zb_;
}
inline void FileZsbx_ZsbxDetail::set_zb(float value) {
  set_has_zb();
  zb_ = value;
}

// optional float jtsyl = 7;
inline bool FileZsbx_ZsbxDetail::has_jtsyl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FileZsbx_ZsbxDetail::set_has_jtsyl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FileZsbx_ZsbxDetail::clear_has_jtsyl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FileZsbx_ZsbxDetail::clear_jtsyl() {
  jtsyl_ = 0;
  clear_has_jtsyl();
}
inline float FileZsbx_ZsbxDetail::jtsyl() const {
  return jtsyl_;
}
inline void FileZsbx_ZsbxDetail::set_jtsyl(float value) {
  set_has_jtsyl();
  jtsyl_ = value;
}

// -------------------------------------------------------------------

// FileZsbx

// repeated .quote.FileZsbx.ZsbxDetail zsbxdetail = 1;
inline int FileZsbx::zsbxdetail_size() const {
  return zsbxdetail_.size();
}
inline void FileZsbx::clear_zsbxdetail() {
  zsbxdetail_.Clear();
}
inline const ::quote::FileZsbx_ZsbxDetail& FileZsbx::zsbxdetail(int index) const {
  return zsbxdetail_.Get(index);
}
inline ::quote::FileZsbx_ZsbxDetail* FileZsbx::mutable_zsbxdetail(int index) {
  return zsbxdetail_.Mutable(index);
}
inline ::quote::FileZsbx_ZsbxDetail* FileZsbx::add_zsbxdetail() {
  return zsbxdetail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::FileZsbx_ZsbxDetail >&
FileZsbx::zsbxdetail() const {
  return zsbxdetail_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::FileZsbx_ZsbxDetail >*
FileZsbx::mutable_zsbxdetail() {
  return &zsbxdetail_;
}

// -------------------------------------------------------------------

// FileBlock_Block_BlockDetail

// required int32 blockid = 1;
inline bool FileBlock_Block_BlockDetail::has_blockid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileBlock_Block_BlockDetail::set_has_blockid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileBlock_Block_BlockDetail::clear_has_blockid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileBlock_Block_BlockDetail::clear_blockid() {
  blockid_ = 0;
  clear_has_blockid();
}
inline ::google::protobuf::int32 FileBlock_Block_BlockDetail::blockid() const {
  return blockid_;
}
inline void FileBlock_Block_BlockDetail::set_blockid(::google::protobuf::int32 value) {
  set_has_blockid();
  blockid_ = value;
}

// required string blockname = 2;
inline bool FileBlock_Block_BlockDetail::has_blockname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileBlock_Block_BlockDetail::set_has_blockname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileBlock_Block_BlockDetail::clear_has_blockname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileBlock_Block_BlockDetail::clear_blockname() {
  if (blockname_ != &::google::protobuf::internal::kEmptyString) {
    blockname_->clear();
  }
  clear_has_blockname();
}
inline const ::std::string& FileBlock_Block_BlockDetail::blockname() const {
  return *blockname_;
}
inline void FileBlock_Block_BlockDetail::set_blockname(const ::std::string& value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::kEmptyString) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
}
inline void FileBlock_Block_BlockDetail::set_blockname(const char* value) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::kEmptyString) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(value);
}
inline void FileBlock_Block_BlockDetail::set_blockname(const char* value, size_t size) {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::kEmptyString) {
    blockname_ = new ::std::string;
  }
  blockname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileBlock_Block_BlockDetail::mutable_blockname() {
  set_has_blockname();
  if (blockname_ == &::google::protobuf::internal::kEmptyString) {
    blockname_ = new ::std::string;
  }
  return blockname_;
}
inline ::std::string* FileBlock_Block_BlockDetail::release_blockname() {
  clear_has_blockname();
  if (blockname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = blockname_;
    blockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// FileBlock_Block

// required .quote.FileBlock.Block.Name name = 1;
inline bool FileBlock_Block::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileBlock_Block::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileBlock_Block::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileBlock_Block::clear_name() {
  name_ = 1;
  clear_has_name();
}
inline ::quote::FileBlock_Block_Name FileBlock_Block::name() const {
  return static_cast< ::quote::FileBlock_Block_Name >(name_);
}
inline void FileBlock_Block::set_name(::quote::FileBlock_Block_Name value) {
  GOOGLE_DCHECK(::quote::FileBlock_Block_Name_IsValid(value));
  set_has_name();
  name_ = value;
}

// repeated .quote.FileBlock.Block.BlockDetail blockdetail = 2;
inline int FileBlock_Block::blockdetail_size() const {
  return blockdetail_.size();
}
inline void FileBlock_Block::clear_blockdetail() {
  blockdetail_.Clear();
}
inline const ::quote::FileBlock_Block_BlockDetail& FileBlock_Block::blockdetail(int index) const {
  return blockdetail_.Get(index);
}
inline ::quote::FileBlock_Block_BlockDetail* FileBlock_Block::mutable_blockdetail(int index) {
  return blockdetail_.Mutable(index);
}
inline ::quote::FileBlock_Block_BlockDetail* FileBlock_Block::add_blockdetail() {
  return blockdetail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::FileBlock_Block_BlockDetail >&
FileBlock_Block::blockdetail() const {
  return blockdetail_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::FileBlock_Block_BlockDetail >*
FileBlock_Block::mutable_blockdetail() {
  return &blockdetail_;
}

// -------------------------------------------------------------------

// FileBlock

// repeated .quote.FileBlock.Block block = 1;
inline int FileBlock::block_size() const {
  return block_.size();
}
inline void FileBlock::clear_block() {
  block_.Clear();
}
inline const ::quote::FileBlock_Block& FileBlock::block(int index) const {
  return block_.Get(index);
}
inline ::quote::FileBlock_Block* FileBlock::mutable_block(int index) {
  return block_.Mutable(index);
}
inline ::quote::FileBlock_Block* FileBlock::add_block() {
  return block_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::FileBlock_Block >&
FileBlock::block() const {
  return block_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::FileBlock_Block >*
FileBlock::mutable_block() {
  return &block_;
}

// -------------------------------------------------------------------

// FileBlockStock_BlockStock_BlockStockDetail

// required string secucode = 1;
inline bool FileBlockStock_BlockStock_BlockStockDetail::has_secucode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileBlockStock_BlockStock_BlockStockDetail::set_has_secucode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileBlockStock_BlockStock_BlockStockDetail::clear_has_secucode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileBlockStock_BlockStock_BlockStockDetail::clear_secucode() {
  if (secucode_ != &::google::protobuf::internal::kEmptyString) {
    secucode_->clear();
  }
  clear_has_secucode();
}
inline const ::std::string& FileBlockStock_BlockStock_BlockStockDetail::secucode() const {
  return *secucode_;
}
inline void FileBlockStock_BlockStock_BlockStockDetail::set_secucode(const ::std::string& value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void FileBlockStock_BlockStock_BlockStockDetail::set_secucode(const char* value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void FileBlockStock_BlockStock_BlockStockDetail::set_secucode(const char* value, size_t size) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileBlockStock_BlockStock_BlockStockDetail::mutable_secucode() {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  return secucode_;
}
inline ::std::string* FileBlockStock_BlockStock_BlockStockDetail::release_secucode() {
  clear_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secucode_;
    secucode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 exchange = 2;
inline bool FileBlockStock_BlockStock_BlockStockDetail::has_exchange() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileBlockStock_BlockStock_BlockStockDetail::set_has_exchange() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileBlockStock_BlockStock_BlockStockDetail::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileBlockStock_BlockStock_BlockStockDetail::clear_exchange() {
  exchange_ = 0;
  clear_has_exchange();
}
inline ::google::protobuf::int32 FileBlockStock_BlockStock_BlockStockDetail::exchange() const {
  return exchange_;
}
inline void FileBlockStock_BlockStock_BlockStockDetail::set_exchange(::google::protobuf::int32 value) {
  set_has_exchange();
  exchange_ = value;
}

// -------------------------------------------------------------------

// FileBlockStock_BlockStock

// required int32 blockid = 1;
inline bool FileBlockStock_BlockStock::has_blockid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileBlockStock_BlockStock::set_has_blockid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileBlockStock_BlockStock::clear_has_blockid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileBlockStock_BlockStock::clear_blockid() {
  blockid_ = 0;
  clear_has_blockid();
}
inline ::google::protobuf::int32 FileBlockStock_BlockStock::blockid() const {
  return blockid_;
}
inline void FileBlockStock_BlockStock::set_blockid(::google::protobuf::int32 value) {
  set_has_blockid();
  blockid_ = value;
}

// repeated .quote.FileBlockStock.BlockStock.BlockStockDetail blockstockdetail = 2;
inline int FileBlockStock_BlockStock::blockstockdetail_size() const {
  return blockstockdetail_.size();
}
inline void FileBlockStock_BlockStock::clear_blockstockdetail() {
  blockstockdetail_.Clear();
}
inline const ::quote::FileBlockStock_BlockStock_BlockStockDetail& FileBlockStock_BlockStock::blockstockdetail(int index) const {
  return blockstockdetail_.Get(index);
}
inline ::quote::FileBlockStock_BlockStock_BlockStockDetail* FileBlockStock_BlockStock::mutable_blockstockdetail(int index) {
  return blockstockdetail_.Mutable(index);
}
inline ::quote::FileBlockStock_BlockStock_BlockStockDetail* FileBlockStock_BlockStock::add_blockstockdetail() {
  return blockstockdetail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::FileBlockStock_BlockStock_BlockStockDetail >&
FileBlockStock_BlockStock::blockstockdetail() const {
  return blockstockdetail_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::FileBlockStock_BlockStock_BlockStockDetail >*
FileBlockStock_BlockStock::mutable_blockstockdetail() {
  return &blockstockdetail_;
}

// -------------------------------------------------------------------

// FileBlockStock

// repeated .quote.FileBlockStock.BlockStock blockstock = 1;
inline int FileBlockStock::blockstock_size() const {
  return blockstock_.size();
}
inline void FileBlockStock::clear_blockstock() {
  blockstock_.Clear();
}
inline const ::quote::FileBlockStock_BlockStock& FileBlockStock::blockstock(int index) const {
  return blockstock_.Get(index);
}
inline ::quote::FileBlockStock_BlockStock* FileBlockStock::mutable_blockstock(int index) {
  return blockstock_.Mutable(index);
}
inline ::quote::FileBlockStock_BlockStock* FileBlockStock::add_blockstock() {
  return blockstock_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::FileBlockStock_BlockStock >&
FileBlockStock::blockstock() const {
  return blockstock_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::FileBlockStock_BlockStock >*
FileBlockStock::mutable_blockstock() {
  return &blockstock_;
}

// -------------------------------------------------------------------

// FileMd5_Md5

// required .quote.FileMd5.Md5.FileName filename = 1;
inline bool FileMd5_Md5::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileMd5_Md5::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileMd5_Md5::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileMd5_Md5::clear_filename() {
  filename_ = 1;
  clear_has_filename();
}
inline ::quote::FileMd5_Md5_FileName FileMd5_Md5::filename() const {
  return static_cast< ::quote::FileMd5_Md5_FileName >(filename_);
}
inline void FileMd5_Md5::set_filename(::quote::FileMd5_Md5_FileName value) {
  GOOGLE_DCHECK(::quote::FileMd5_Md5_FileName_IsValid(value));
  set_has_filename();
  filename_ = value;
}

// required string md5code = 2;
inline bool FileMd5_Md5::has_md5code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileMd5_Md5::set_has_md5code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileMd5_Md5::clear_has_md5code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileMd5_Md5::clear_md5code() {
  if (md5code_ != &::google::protobuf::internal::kEmptyString) {
    md5code_->clear();
  }
  clear_has_md5code();
}
inline const ::std::string& FileMd5_Md5::md5code() const {
  return *md5code_;
}
inline void FileMd5_Md5::set_md5code(const ::std::string& value) {
  set_has_md5code();
  if (md5code_ == &::google::protobuf::internal::kEmptyString) {
    md5code_ = new ::std::string;
  }
  md5code_->assign(value);
}
inline void FileMd5_Md5::set_md5code(const char* value) {
  set_has_md5code();
  if (md5code_ == &::google::protobuf::internal::kEmptyString) {
    md5code_ = new ::std::string;
  }
  md5code_->assign(value);
}
inline void FileMd5_Md5::set_md5code(const char* value, size_t size) {
  set_has_md5code();
  if (md5code_ == &::google::protobuf::internal::kEmptyString) {
    md5code_ = new ::std::string;
  }
  md5code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileMd5_Md5::mutable_md5code() {
  set_has_md5code();
  if (md5code_ == &::google::protobuf::internal::kEmptyString) {
    md5code_ = new ::std::string;
  }
  return md5code_;
}
inline ::std::string* FileMd5_Md5::release_md5code() {
  clear_has_md5code();
  if (md5code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = md5code_;
    md5code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// FileMd5

// repeated .quote.FileMd5.Md5 md5 = 1;
inline int FileMd5::md5_size() const {
  return md5_.size();
}
inline void FileMd5::clear_md5() {
  md5_.Clear();
}
inline const ::quote::FileMd5_Md5& FileMd5::md5(int index) const {
  return md5_.Get(index);
}
inline ::quote::FileMd5_Md5* FileMd5::mutable_md5(int index) {
  return md5_.Mutable(index);
}
inline ::quote::FileMd5_Md5* FileMd5::add_md5() {
  return md5_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::FileMd5_Md5 >&
FileMd5::md5() const {
  return md5_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::FileMd5_Md5 >*
FileMd5::mutable_md5() {
  return &md5_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace quote

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::quote::FileBlock_Block_Name>() {
  return ::quote::FileBlock_Block_Name_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::quote::FileMd5_Md5_FileName>() {
  return ::quote::FileMd5_Md5_FileName_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_file_2eproto__INCLUDED
