// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "idxtemp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cssweb {
namespace kline {
namespace mid {

namespace {

const ::google::protobuf::Descriptor* MA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MA_reflection_ = NULL;
const ::google::protobuf::Descriptor* MACD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MACD_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCI_reflection_ = NULL;
const ::google::protobuf::Descriptor* BIAS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BIAS_reflection_ = NULL;
const ::google::protobuf::Descriptor* KDJ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KDJ_reflection_ = NULL;
const ::google::protobuf::Descriptor* RSI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RSI_reflection_ = NULL;
const ::google::protobuf::Descriptor* OBV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OBV_reflection_ = NULL;
const ::google::protobuf::Descriptor* BOLL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BOLL_reflection_ = NULL;
const ::google::protobuf::Descriptor* PSY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PSY_reflection_ = NULL;
const ::google::protobuf::Descriptor* ROC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ROC_reflection_ = NULL;
const ::google::protobuf::Descriptor* WR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WR_reflection_ = NULL;
const ::google::protobuf::Descriptor* VR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VR_reflection_ = NULL;
const ::google::protobuf::Descriptor* EXPMA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EXPMA_reflection_ = NULL;
const ::google::protobuf::Descriptor* ARBR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ARBR_reflection_ = NULL;
const ::google::protobuf::Descriptor* CR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CR_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDP_reflection_ = NULL;
const ::google::protobuf::Descriptor* DMA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DMA_reflection_ = NULL;
const ::google::protobuf::Descriptor* MTM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MTM_reflection_ = NULL;
const ::google::protobuf::Descriptor* BBI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BBI_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRIX_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRIX_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZLJC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZLJC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ASI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ASI_reflection_ = NULL;
const ::google::protobuf::Descriptor* DMI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DMI_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVT_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBX_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBX_reflection_ = NULL;
const ::google::protobuf::Descriptor* SKDJ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SKDJ_reflection_ = NULL;
const ::google::protobuf::Descriptor* MIDVAL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MIDVAL_reflection_ = NULL;
const ::google::protobuf::Descriptor* KLINEIDX_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KLINEIDX_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEMP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEMP_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_idxtemp_2eproto() {
  protobuf_AddDesc_idxtemp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "idxtemp.proto");
  GOOGLE_CHECK(file != NULL);
  MA_descriptor_ = file->message_type(0);
  static const int MA_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MA, summa4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MA, summa9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MA, summa19_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MA, summa59_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MA, summavol4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MA, summavol9_),
  };
  MA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MA_descriptor_,
      MA::default_instance_,
      MA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MA));
  MACD_descriptor_ = file->message_type(1);
  static const int MACD_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MACD, emashort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MACD, emalong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MACD, dea_),
  };
  MACD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MACD_descriptor_,
      MACD::default_instance_,
      MACD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MACD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MACD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MACD));
  CCI_descriptor_ = file->message_type(2);
  static const int CCI_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCI, typ_),
  };
  CCI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCI_descriptor_,
      CCI::default_instance_,
      CCI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCI));
  BIAS_descriptor_ = file->message_type(3);
  static const int BIAS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BIAS, sum5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BIAS, sum11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BIAS, sum23_),
  };
  BIAS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BIAS_descriptor_,
      BIAS::default_instance_,
      BIAS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BIAS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BIAS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BIAS));
  KDJ_descriptor_ = file->message_type(4);
  static const int KDJ_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDJ, hhv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDJ, llv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDJ, hhvs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDJ, llvs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDJ, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDJ, d_),
  };
  KDJ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KDJ_descriptor_,
      KDJ::default_instance_,
      KDJ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDJ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDJ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KDJ));
  RSI_descriptor_ = file->message_type(5);
  static const int RSI_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSI, smamax1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSI, smamax2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSI, smamax3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSI, smaabs1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSI, smaabs2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSI, smaabs3_),
  };
  RSI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RSI_descriptor_,
      RSI::default_instance_,
      RSI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RSI));
  OBV_descriptor_ = file->message_type(6);
  static const int OBV_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBV, obv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBV, sumobv29_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBV, obvs_),
  };
  OBV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OBV_descriptor_,
      OBV::default_instance_,
      OBV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OBV));
  BOLL_descriptor_ = file->message_type(7);
  static const int BOLL_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOLL, sumclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOLL, sumpowclose_),
  };
  BOLL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BOLL_descriptor_,
      BOLL::default_instance_,
      BOLL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOLL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOLL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BOLL));
  PSY_descriptor_ = file->message_type(8);
  static const int PSY_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSY, psycount11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSY, psycounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSY, sumpsy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSY, psys_),
  };
  PSY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PSY_descriptor_,
      PSY::default_instance_,
      PSY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PSY));
  ROC_descriptor_ = file->message_type(9);
  static const int ROC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROC, refclose12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROC, sumroc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROC, rocs_),
  };
  ROC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ROC_descriptor_,
      ROC::default_instance_,
      ROC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ROC));
  WR_descriptor_ = file->message_type(10);
  static const int WR_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WR, llv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WR, hhv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WR, llv2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WR, hhv2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WR, hhvs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WR, llvs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WR, hhvs2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WR, llvs2_),
  };
  WR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WR_descriptor_,
      WR::default_instance_,
      WR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WR));
  VR_descriptor_ = file->message_type(11);
  static const int VR_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VR, sum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VR, sum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VR, sumvr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VR, vrs_),
  };
  VR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VR_descriptor_,
      VR::default_instance_,
      VR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VR));
  EXPMA_descriptor_ = file->message_type(12);
  static const int EXPMA_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EXPMA, prevema_),
  };
  EXPMA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EXPMA_descriptor_,
      EXPMA::default_instance_,
      EXPMA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EXPMA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EXPMA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EXPMA));
  ARBR_descriptor_ = file->message_type(13);
  static const int ARBR_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARBR, sum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARBR, sum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARBR, sum3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARBR, sum4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARBR, top1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARBR, top2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARBR, top3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARBR, top4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARBR, prevclose_),
  };
  ARBR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ARBR_descriptor_,
      ARBR::default_instance_,
      ARBR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARBR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARBR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ARBR));
  CR_descriptor_ = file->message_type(14);
  static const int CR_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CR, prevmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CR, sum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CR, sum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CR, top1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CR, top2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CR, nextma1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CR, nextma2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CR, nextma3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CR, crs_),
  };
  CR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CR_descriptor_,
      CR::default_instance_,
      CR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CR));
  CDP_descriptor_ = file->message_type(15);
  static const int CDP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDP, prevhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDP, prevlow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDP, prevclose_),
  };
  CDP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDP_descriptor_,
      CDP::default_instance_,
      CDP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDP));
  DMA_descriptor_ = file->message_type(16);
  static const int DMA_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMA, summa9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMA, summa49_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMA, sumddd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMA, ddds_),
  };
  DMA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DMA_descriptor_,
      DMA::default_instance_,
      DMA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DMA));
  MTM_descriptor_ = file->message_type(17);
  static const int MTM_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTM, close4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTM, summtm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTM, mtms_),
  };
  MTM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MTM_descriptor_,
      MTM::default_instance_,
      MTM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MTM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MTM));
  BBI_descriptor_ = file->message_type(18);
  static const int BBI_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBI, sum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBI, sum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBI, sum3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBI, sum4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBI, top1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBI, top2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBI, top3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBI, top4_),
  };
  BBI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BBI_descriptor_,
      BBI::default_instance_,
      BBI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BBI));
  TRIX_descriptor_ = file->message_type(19);
  static const int TRIX_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIX, prevema1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIX, prevema2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIX, prevtr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIX, sumtr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIX, trs_),
  };
  TRIX_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRIX_descriptor_,
      TRIX::default_instance_,
      TRIX_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIX, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIX, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRIX));
  ZLJC_descriptor_ = file->message_type(20);
  static const int ZLJC_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZLJC, prevlow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZLJC, prevjcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZLJC, sumjcm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZLJC, sumjcl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZLJC, jcms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZLJC, jcls_),
  };
  ZLJC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZLJC_descriptor_,
      ZLJC::default_instance_,
      ZLJC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZLJC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZLJC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZLJC));
  ASI_descriptor_ = file->message_type(21);
  static const int ASI_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASI, prevclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASI, prevlow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASI, prevopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASI, sumsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASI, sumasi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASI, sis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASI, asis_),
  };
  ASI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ASI_descriptor_,
      ASI::default_instance_,
      ASI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ASI));
  DMI_descriptor_ = file->message_type(22);
  static const int DMI_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMI, prevclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMI, prevlow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMI, prevhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMI, sumtr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMI, midtrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMI, sumdmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMI, middmps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMI, sumdmm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMI, middmms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMI, sumadx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMI, midadxs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMI, adxs_),
  };
  DMI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DMI_descriptor_,
      DMI::default_instance_,
      DMI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DMI));
  PVT_descriptor_ = file->message_type(23);
  static const int PVT_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVT, prevclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVT, prevpvt_),
  };
  PVT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVT_descriptor_,
      PVT::default_instance_,
      PVT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVT));
  PBX_descriptor_ = file->message_type(24);
  static const int PBX_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, prevema1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, prevema2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, prevema3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, prevema4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, prevema5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, prevema6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, sumshort1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, sumshort2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, sumshort3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, sumshort4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, sumshort5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, sumshort6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, sumlong1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, sumlong2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, sumlong3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, sumlong4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, sumlong5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, sumlong6_),
  };
  PBX_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBX_descriptor_,
      PBX::default_instance_,
      PBX_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBX, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBX));
  SKDJ_descriptor_ = file->message_type(25);
  static const int SKDJ_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKDJ, hhv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKDJ, llv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKDJ, hhvs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKDJ, llvs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKDJ, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKDJ, d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKDJ, fastk_),
  };
  SKDJ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SKDJ_descriptor_,
      SKDJ::default_instance_,
      SKDJ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKDJ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SKDJ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SKDJ));
  MIDVAL_descriptor_ = file->message_type(26);
  static const int MIDVAL_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIDVAL, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIDVAL, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIDVAL, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIDVAL, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIDVAL, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIDVAL, zjcj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIDVAL, cjsl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIDVAL, cjje_),
  };
  MIDVAL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MIDVAL_descriptor_,
      MIDVAL::default_instance_,
      MIDVAL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIDVAL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MIDVAL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MIDVAL));
  KLINEIDX_descriptor_ = file->message_type(27);
  static const int KLINEIDX_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLINEIDX, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLINEIDX, offset_),
  };
  KLINEIDX_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KLINEIDX_descriptor_,
      KLINEIDX::default_instance_,
      KLINEIDX_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLINEIDX, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLINEIDX, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KLINEIDX));
  TEMP_descriptor_ = file->message_type(28);
  static const int TEMP_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, ma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, macd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, cci_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, kdj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, rsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, obv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, boll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, psy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, roc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, wr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, vr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, arbr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, cr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, cdp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, dma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, mtm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, bbi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, trix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, zljc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, asi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, ema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, dmi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, pvt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, pbx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, skdj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, quotetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, midval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, linenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, klineidx_),
  };
  TEMP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEMP_descriptor_,
      TEMP::default_instance_,
      TEMP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEMP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEMP));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_idxtemp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MA_descriptor_, &MA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MACD_descriptor_, &MACD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCI_descriptor_, &CCI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BIAS_descriptor_, &BIAS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KDJ_descriptor_, &KDJ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RSI_descriptor_, &RSI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OBV_descriptor_, &OBV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BOLL_descriptor_, &BOLL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PSY_descriptor_, &PSY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ROC_descriptor_, &ROC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WR_descriptor_, &WR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VR_descriptor_, &VR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EXPMA_descriptor_, &EXPMA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ARBR_descriptor_, &ARBR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CR_descriptor_, &CR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDP_descriptor_, &CDP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DMA_descriptor_, &DMA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MTM_descriptor_, &MTM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BBI_descriptor_, &BBI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRIX_descriptor_, &TRIX::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZLJC_descriptor_, &ZLJC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ASI_descriptor_, &ASI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DMI_descriptor_, &DMI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVT_descriptor_, &PVT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBX_descriptor_, &PBX::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SKDJ_descriptor_, &SKDJ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MIDVAL_descriptor_, &MIDVAL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KLINEIDX_descriptor_, &KLINEIDX::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEMP_descriptor_, &TEMP::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_idxtemp_2eproto() {
  delete MA::default_instance_;
  delete MA_reflection_;
  delete MACD::default_instance_;
  delete MACD_reflection_;
  delete CCI::default_instance_;
  delete CCI_reflection_;
  delete BIAS::default_instance_;
  delete BIAS_reflection_;
  delete KDJ::default_instance_;
  delete KDJ_reflection_;
  delete RSI::default_instance_;
  delete RSI_reflection_;
  delete OBV::default_instance_;
  delete OBV_reflection_;
  delete BOLL::default_instance_;
  delete BOLL_reflection_;
  delete PSY::default_instance_;
  delete PSY_reflection_;
  delete ROC::default_instance_;
  delete ROC_reflection_;
  delete WR::default_instance_;
  delete WR_reflection_;
  delete VR::default_instance_;
  delete VR_reflection_;
  delete EXPMA::default_instance_;
  delete EXPMA_reflection_;
  delete ARBR::default_instance_;
  delete ARBR_reflection_;
  delete CR::default_instance_;
  delete CR_reflection_;
  delete CDP::default_instance_;
  delete CDP_reflection_;
  delete DMA::default_instance_;
  delete DMA_reflection_;
  delete MTM::default_instance_;
  delete MTM_reflection_;
  delete BBI::default_instance_;
  delete BBI_reflection_;
  delete TRIX::default_instance_;
  delete TRIX_reflection_;
  delete ZLJC::default_instance_;
  delete ZLJC_reflection_;
  delete ASI::default_instance_;
  delete ASI_reflection_;
  delete DMI::default_instance_;
  delete DMI_reflection_;
  delete PVT::default_instance_;
  delete PVT_reflection_;
  delete PBX::default_instance_;
  delete PBX_reflection_;
  delete SKDJ::default_instance_;
  delete SKDJ_reflection_;
  delete MIDVAL::default_instance_;
  delete MIDVAL_reflection_;
  delete KLINEIDX::default_instance_;
  delete KLINEIDX_reflection_;
  delete TEMP::default_instance_;
  delete TEMP_reflection_;
}

void protobuf_AddDesc_idxtemp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ridxtemp.proto\022\020cssweb.kline.mid\"l\n\002MA\022"
    "\016\n\006sumMa4\030\001 \002(\001\022\016\n\006sumMa9\030\002 \002(\001\022\017\n\007sumMa"
    "19\030\003 \002(\001\022\017\n\007sumMa59\030\004 \002(\001\022\021\n\tsumMavol4\030\005"
    " \002(\001\022\021\n\tsumMavol9\030\006 \002(\001\"6\n\004MACD\022\020\n\010emaSh"
    "ort\030\001 \002(\002\022\017\n\007emaLong\030\002 \002(\002\022\013\n\003dea\030\003 \002(\002\""
    "\022\n\003CCI\022\013\n\003typ\030\001 \003(\002\"2\n\004BIAS\022\014\n\004sum5\030\001 \002("
    "\002\022\r\n\005sum11\030\002 \002(\002\022\r\n\005sum23\030\003 \002(\002\"Q\n\003KDJ\022\013"
    "\n\003hhv\030\001 \002(\002\022\013\n\003llv\030\002 \002(\002\022\014\n\004hhvs\030\003 \003(\002\022\014"
    "\n\004llvs\030\004 \003(\002\022\t\n\001k\030\005 \002(\002\022\t\n\001d\030\006 \002(\002\"k\n\003RS"
    "I\022\017\n\007smaMax1\030\001 \002(\002\022\017\n\007smaMax2\030\002 \002(\002\022\017\n\007s"
    "maMax3\030\003 \002(\002\022\017\n\007smaAbs1\030\004 \002(\002\022\017\n\007smaAbs2"
    "\030\005 \002(\002\022\017\n\007smaAbs3\030\006 \002(\002\"2\n\003OBV\022\013\n\003obv\030\001 "
    "\002(\001\022\020\n\010sumObv29\030\002 \002(\001\022\014\n\004obvs\030\003 \003(\001\"-\n\004B"
    "OLL\022\020\n\010sumClose\030\001 \002(\001\022\023\n\013sumPowClose\030\002 \002"
    "(\001\"J\n\003PSY\022\022\n\npsyCount11\030\001 \002(\005\022\021\n\tpsyCoun"
    "ts\030\002 \003(\005\022\016\n\006sumPsy\030\003 \002(\002\022\014\n\004psys\030\004 \003(\002\"7"
    "\n\003ROC\022\022\n\nrefClose12\030\001 \002(\002\022\016\n\006sumRoc\030\002 \002("
    "\002\022\014\n\004rocs\030\003 \003(\002\"t\n\002WR\022\013\n\003llv\030\001 \002(\002\022\013\n\003hh"
    "v\030\002 \002(\002\022\014\n\004llv2\030\003 \002(\002\022\014\n\004hhv2\030\004 \002(\002\022\014\n\004h"
    "hvs\030\005 \003(\002\022\014\n\004llvs\030\006 \003(\002\022\r\n\005hhvs2\030\007 \003(\002\022\r"
    "\n\005llvs2\030\010 \003(\002\"<\n\002VR\022\014\n\004sum1\030\001 \002(\001\022\014\n\004sum"
    "2\030\002 \002(\001\022\r\n\005sumVr\030\003 \002(\001\022\013\n\003vrs\030\004 \003(\001\"\030\n\005E"
    "XPMA\022\017\n\007prevEma\030\001 \002(\002\"\211\001\n\004ARBR\022\014\n\004sum1\030\001"
    " \002(\002\022\014\n\004sum2\030\002 \002(\002\022\014\n\004sum3\030\003 \002(\002\022\014\n\004sum4"
    "\030\004 \002(\002\022\014\n\004top1\030\005 \002(\002\022\014\n\004top2\030\006 \002(\002\022\014\n\004to"
    "p3\030\007 \002(\002\022\014\n\004top4\030\010 \002(\002\022\021\n\tprevClose\030\t \002("
    "\002\"\215\001\n\002CR\022\017\n\007prevMid\030\001 \002(\002\022\014\n\004sum1\030\002 \002(\002\022"
    "\014\n\004sum2\030\003 \002(\002\022\014\n\004top1\030\004 \002(\002\022\014\n\004top2\030\005 \002("
    "\002\022\017\n\007nextMa1\030\006 \002(\002\022\017\n\007nextMa2\030\007 \002(\002\022\017\n\007n"
    "extMa3\030\010 \002(\002\022\013\n\003crs\030\t \003(\002\";\n\003CDP\022\020\n\010prev"
    "High\030\001 \002(\002\022\017\n\007prevLow\030\002 \002(\002\022\021\n\tprevClose"
    "\030\003 \002(\002\"D\n\003DMA\022\016\n\006sumMa9\030\001 \002(\002\022\017\n\007sumMa49"
    "\030\002 \002(\002\022\016\n\006sumDdd\030\003 \002(\002\022\014\n\004ddds\030\004 \003(\002\"3\n\003"
    "MTM\022\016\n\006close4\030\001 \002(\002\022\016\n\006sumMtm\030\002 \002(\002\022\014\n\004m"
    "tms\030\003 \003(\002\"u\n\003BBI\022\014\n\004sum1\030\001 \002(\002\022\014\n\004sum2\030\002"
    " \002(\002\022\014\n\004sum3\030\003 \002(\002\022\014\n\004sum4\030\004 \002(\002\022\014\n\004top1"
    "\030\005 \002(\002\022\014\n\004top2\030\006 \002(\002\022\014\n\004top3\030\007 \002(\002\022\014\n\004to"
    "p4\030\010 \002(\002\"V\n\004TRIX\022\020\n\010prevEma1\030\001 \002(\002\022\020\n\010pr"
    "evEma2\030\002 \002(\002\022\016\n\006prevTr\030\003 \002(\002\022\r\n\005sumTr\030\004 "
    "\002(\002\022\013\n\003trs\030\005 \003(\002\"d\n\004ZLJC\022\017\n\007prevLow\030\001 \002("
    "\002\022\017\n\007prevJcs\030\002 \002(\002\022\016\n\006sumJcm\030\003 \002(\002\022\016\n\006su"
    "mJcl\030\004 \002(\002\022\014\n\004jcms\030\005 \003(\002\022\014\n\004jcls\030\006 \003(\002\"u"
    "\n\003ASI\022\021\n\tprevClose\030\001 \002(\002\022\017\n\007prevLow\030\002 \002("
    "\002\022\020\n\010prevOpen\030\003 \002(\002\022\r\n\005sumSi\030\004 \002(\002\022\016\n\006su"
    "mAsi\030\005 \002(\002\022\013\n\003sis\030\006 \003(\002\022\014\n\004asis\030\007 \003(\002\"\313\001"
    "\n\003DMI\022\021\n\tprevClose\030\001 \002(\002\022\017\n\007prevLow\030\002 \002("
    "\002\022\020\n\010prevHigh\030\003 \002(\002\022\r\n\005sumTr\030\004 \002(\002\022\016\n\006mi"
    "dtrs\030\005 \003(\002\022\016\n\006sumDmp\030\006 \002(\002\022\017\n\007middmps\030\007 "
    "\003(\002\022\016\n\006sumDmm\030\010 \002(\002\022\017\n\007middmms\030\t \003(\002\022\016\n\006"
    "sumAdx\030\n \002(\002\022\017\n\007midadxs\030\013 \003(\002\022\014\n\004adxs\030\014 "
    "\003(\002\")\n\003PVT\022\021\n\tprevClose\030\001 \002(\002\022\017\n\007prevPvt"
    "\030\002 \002(\001\"\317\002\n\003PBX\022\020\n\010prevEma1\030\001 \002(\002\022\020\n\010prev"
    "Ema2\030\002 \002(\002\022\020\n\010prevEma3\030\003 \002(\002\022\020\n\010prevEma4"
    "\030\004 \002(\002\022\020\n\010prevEma5\030\005 \002(\002\022\020\n\010prevEma6\030\006 \002"
    "(\002\022\021\n\tsumShort1\030\007 \002(\002\022\021\n\tsumShort2\030\010 \002(\002"
    "\022\021\n\tsumShort3\030\t \002(\002\022\021\n\tsumShort4\030\n \002(\002\022\021"
    "\n\tsumShort5\030\013 \002(\002\022\021\n\tsumShort6\030\014 \002(\002\022\020\n\010"
    "sumLong1\030\r \002(\002\022\020\n\010sumLong2\030\016 \002(\002\022\020\n\010sumL"
    "ong3\030\017 \002(\002\022\020\n\010sumLong4\030\020 \002(\002\022\020\n\010sumLong5"
    "\030\021 \002(\002\022\020\n\010sumLong6\030\022 \002(\002\"a\n\004SKDJ\022\013\n\003hhv\030"
    "\001 \002(\002\022\013\n\003llv\030\002 \002(\002\022\014\n\004hhvs\030\003 \003(\002\022\014\n\004llvs"
    "\030\004 \003(\002\022\t\n\001k\030\005 \002(\002\022\t\n\001d\030\006 \002(\002\022\r\n\005fastk\030\007 "
    "\002(\002\"x\n\006MIDVAL\022\014\n\004date\030\001 \002(\t\022\014\n\004open\030\002 \002("
    "\002\022\014\n\004high\030\003 \002(\002\022\013\n\003low\030\004 \002(\002\022\r\n\005close\030\005 "
    "\002(\002\022\014\n\004zjcj\030\006 \002(\002\022\014\n\004cjsl\030\007 \002(\001\022\014\n\004cjje\030"
    "\010 \002(\001\"(\n\010KLINEIDX\022\014\n\004date\030\001 \002(\005\022\016\n\006offse"
    "t\030\002 \002(\005\"\300\010\n\004TEMP\022 \n\002ma\030\001 \001(\0132\024.cssweb.kl"
    "ine.mid.MA\022$\n\004macd\030\002 \001(\0132\026.cssweb.kline."
    "mid.MACD\022\"\n\003cci\030\003 \001(\0132\025.cssweb.kline.mid"
    ".CCI\022$\n\004bias\030\004 \001(\0132\026.cssweb.kline.mid.BI"
    "AS\022\"\n\003kdj\030\005 \001(\0132\025.cssweb.kline.mid.KDJ\022\""
    "\n\003rsi\030\006 \001(\0132\025.cssweb.kline.mid.RSI\022\"\n\003ob"
    "v\030\007 \001(\0132\025.cssweb.kline.mid.OBV\022$\n\004boll\030\010"
    " \001(\0132\026.cssweb.kline.mid.BOLL\022\"\n\003psy\030\t \001("
    "\0132\025.cssweb.kline.mid.PSY\022\"\n\003roc\030\n \001(\0132\025."
    "cssweb.kline.mid.ROC\022 \n\002wr\030\013 \001(\0132\024.csswe"
    "b.kline.mid.WR\022 \n\002vr\030\014 \001(\0132\024.cssweb.klin"
    "e.mid.VR\022$\n\004arbr\030\r \001(\0132\026.cssweb.kline.mi"
    "d.ARBR\022 \n\002cr\030\016 \001(\0132\024.cssweb.kline.mid.CR"
    "\022\"\n\003cdp\030\017 \001(\0132\025.cssweb.kline.mid.CDP\022\"\n\003"
    "dma\030\020 \001(\0132\025.cssweb.kline.mid.DMA\022\"\n\003mtm\030"
    "\021 \001(\0132\025.cssweb.kline.mid.MTM\022\"\n\003bbi\030\022 \001("
    "\0132\025.cssweb.kline.mid.BBI\022$\n\004trix\030\023 \001(\0132\026"
    ".cssweb.kline.mid.TRIX\022$\n\004zljc\030\024 \001(\0132\026.c"
    "ssweb.kline.mid.ZLJC\022\"\n\003asi\030\025 \001(\0132\025.cssw"
    "eb.kline.mid.ASI\022$\n\003ema\030\026 \001(\0132\027.cssweb.k"
    "line.mid.EXPMA\022\"\n\003dmi\030\027 \001(\0132\025.cssweb.kli"
    "ne.mid.DMI\022\"\n\003pvt\030\030 \001(\0132\025.cssweb.kline.m"
    "id.PVT\022\"\n\003pbx\030\031 \001(\0132\025.cssweb.kline.mid.P"
    "BX\022$\n\004skdj\030\032 \001(\0132\026.cssweb.kline.mid.SKDJ"
    "\022\014\n\004file\030\033 \001(\005\022\021\n\tquotetime\030\034 \001(\t\022(\n\006mid"
    "val\030\035 \001(\0132\030.cssweb.kline.mid.MIDVAL\022\017\n\007l"
    "inenum\030\036 \001(\005\022,\n\010klineIdx\030\037 \003(\0132\032.cssweb."
    "kline.mid.KLINEIDX", 3738);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "idxtemp.proto", &protobuf_RegisterTypes);
  MA::default_instance_ = new MA();
  MACD::default_instance_ = new MACD();
  CCI::default_instance_ = new CCI();
  BIAS::default_instance_ = new BIAS();
  KDJ::default_instance_ = new KDJ();
  RSI::default_instance_ = new RSI();
  OBV::default_instance_ = new OBV();
  BOLL::default_instance_ = new BOLL();
  PSY::default_instance_ = new PSY();
  ROC::default_instance_ = new ROC();
  WR::default_instance_ = new WR();
  VR::default_instance_ = new VR();
  EXPMA::default_instance_ = new EXPMA();
  ARBR::default_instance_ = new ARBR();
  CR::default_instance_ = new CR();
  CDP::default_instance_ = new CDP();
  DMA::default_instance_ = new DMA();
  MTM::default_instance_ = new MTM();
  BBI::default_instance_ = new BBI();
  TRIX::default_instance_ = new TRIX();
  ZLJC::default_instance_ = new ZLJC();
  ASI::default_instance_ = new ASI();
  DMI::default_instance_ = new DMI();
  PVT::default_instance_ = new PVT();
  PBX::default_instance_ = new PBX();
  SKDJ::default_instance_ = new SKDJ();
  MIDVAL::default_instance_ = new MIDVAL();
  KLINEIDX::default_instance_ = new KLINEIDX();
  TEMP::default_instance_ = new TEMP();
  MA::default_instance_->InitAsDefaultInstance();
  MACD::default_instance_->InitAsDefaultInstance();
  CCI::default_instance_->InitAsDefaultInstance();
  BIAS::default_instance_->InitAsDefaultInstance();
  KDJ::default_instance_->InitAsDefaultInstance();
  RSI::default_instance_->InitAsDefaultInstance();
  OBV::default_instance_->InitAsDefaultInstance();
  BOLL::default_instance_->InitAsDefaultInstance();
  PSY::default_instance_->InitAsDefaultInstance();
  ROC::default_instance_->InitAsDefaultInstance();
  WR::default_instance_->InitAsDefaultInstance();
  VR::default_instance_->InitAsDefaultInstance();
  EXPMA::default_instance_->InitAsDefaultInstance();
  ARBR::default_instance_->InitAsDefaultInstance();
  CR::default_instance_->InitAsDefaultInstance();
  CDP::default_instance_->InitAsDefaultInstance();
  DMA::default_instance_->InitAsDefaultInstance();
  MTM::default_instance_->InitAsDefaultInstance();
  BBI::default_instance_->InitAsDefaultInstance();
  TRIX::default_instance_->InitAsDefaultInstance();
  ZLJC::default_instance_->InitAsDefaultInstance();
  ASI::default_instance_->InitAsDefaultInstance();
  DMI::default_instance_->InitAsDefaultInstance();
  PVT::default_instance_->InitAsDefaultInstance();
  PBX::default_instance_->InitAsDefaultInstance();
  SKDJ::default_instance_->InitAsDefaultInstance();
  MIDVAL::default_instance_->InitAsDefaultInstance();
  KLINEIDX::default_instance_->InitAsDefaultInstance();
  TEMP::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_idxtemp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_idxtemp_2eproto {
  StaticDescriptorInitializer_idxtemp_2eproto() {
    protobuf_AddDesc_idxtemp_2eproto();
  }
} static_descriptor_initializer_idxtemp_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MA::kSumMa4FieldNumber;
const int MA::kSumMa9FieldNumber;
const int MA::kSumMa19FieldNumber;
const int MA::kSumMa59FieldNumber;
const int MA::kSumMavol4FieldNumber;
const int MA::kSumMavol9FieldNumber;
#endif  // !_MSC_VER

MA::MA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MA::InitAsDefaultInstance() {
}

MA::MA(const MA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MA::SharedCtor() {
  _cached_size_ = 0;
  summa4_ = 0;
  summa9_ = 0;
  summa19_ = 0;
  summa59_ = 0;
  summavol4_ = 0;
  summavol9_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MA::~MA() {
  SharedDtor();
}

void MA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MA_descriptor_;
}

const MA& MA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

MA* MA::default_instance_ = NULL;

MA* MA::New() const {
  return new MA;
}

void MA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    summa4_ = 0;
    summa9_ = 0;
    summa19_ = 0;
    summa59_ = 0;
    summavol4_ = 0;
    summavol9_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double sumMa4 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &summa4_)));
          set_has_summa4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sumMa9;
        break;
      }
      
      // required double sumMa9 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sumMa9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &summa9_)));
          set_has_summa9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_sumMa19;
        break;
      }
      
      // required double sumMa19 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sumMa19:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &summa19_)));
          set_has_summa19();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_sumMa59;
        break;
      }
      
      // required double sumMa59 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sumMa59:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &summa59_)));
          set_has_summa59();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_sumMavol4;
        break;
      }
      
      // required double sumMavol4 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sumMavol4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &summavol4_)));
          set_has_summavol4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_sumMavol9;
        break;
      }
      
      // required double sumMavol9 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sumMavol9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &summavol9_)));
          set_has_summavol9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double sumMa4 = 1;
  if (has_summa4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->summa4(), output);
  }
  
  // required double sumMa9 = 2;
  if (has_summa9()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->summa9(), output);
  }
  
  // required double sumMa19 = 3;
  if (has_summa19()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->summa19(), output);
  }
  
  // required double sumMa59 = 4;
  if (has_summa59()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->summa59(), output);
  }
  
  // required double sumMavol4 = 5;
  if (has_summavol4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->summavol4(), output);
  }
  
  // required double sumMavol9 = 6;
  if (has_summavol9()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->summavol9(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double sumMa4 = 1;
  if (has_summa4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->summa4(), target);
  }
  
  // required double sumMa9 = 2;
  if (has_summa9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->summa9(), target);
  }
  
  // required double sumMa19 = 3;
  if (has_summa19()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->summa19(), target);
  }
  
  // required double sumMa59 = 4;
  if (has_summa59()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->summa59(), target);
  }
  
  // required double sumMavol4 = 5;
  if (has_summavol4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->summavol4(), target);
  }
  
  // required double sumMavol9 = 6;
  if (has_summavol9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->summavol9(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double sumMa4 = 1;
    if (has_summa4()) {
      total_size += 1 + 8;
    }
    
    // required double sumMa9 = 2;
    if (has_summa9()) {
      total_size += 1 + 8;
    }
    
    // required double sumMa19 = 3;
    if (has_summa19()) {
      total_size += 1 + 8;
    }
    
    // required double sumMa59 = 4;
    if (has_summa59()) {
      total_size += 1 + 8;
    }
    
    // required double sumMavol4 = 5;
    if (has_summavol4()) {
      total_size += 1 + 8;
    }
    
    // required double sumMavol9 = 6;
    if (has_summavol9()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MA::MergeFrom(const MA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_summa4()) {
      set_summa4(from.summa4());
    }
    if (from.has_summa9()) {
      set_summa9(from.summa9());
    }
    if (from.has_summa19()) {
      set_summa19(from.summa19());
    }
    if (from.has_summa59()) {
      set_summa59(from.summa59());
    }
    if (from.has_summavol4()) {
      set_summavol4(from.summavol4());
    }
    if (from.has_summavol9()) {
      set_summavol9(from.summavol9());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MA::CopyFrom(const MA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MA::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void MA::Swap(MA* other) {
  if (other != this) {
    std::swap(summa4_, other->summa4_);
    std::swap(summa9_, other->summa9_);
    std::swap(summa19_, other->summa19_);
    std::swap(summa59_, other->summa59_);
    std::swap(summavol4_, other->summavol4_);
    std::swap(summavol9_, other->summavol9_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MA_descriptor_;
  metadata.reflection = MA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MACD::kEmaShortFieldNumber;
const int MACD::kEmaLongFieldNumber;
const int MACD::kDeaFieldNumber;
#endif  // !_MSC_VER

MACD::MACD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MACD::InitAsDefaultInstance() {
}

MACD::MACD(const MACD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MACD::SharedCtor() {
  _cached_size_ = 0;
  emashort_ = 0;
  emalong_ = 0;
  dea_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MACD::~MACD() {
  SharedDtor();
}

void MACD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MACD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MACD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MACD_descriptor_;
}

const MACD& MACD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

MACD* MACD::default_instance_ = NULL;

MACD* MACD::New() const {
  return new MACD;
}

void MACD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    emashort_ = 0;
    emalong_ = 0;
    dea_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MACD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float emaShort = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &emashort_)));
          set_has_emashort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_emaLong;
        break;
      }
      
      // required float emaLong = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_emaLong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &emalong_)));
          set_has_emalong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dea;
        break;
      }
      
      // required float dea = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dea_)));
          set_has_dea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MACD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float emaShort = 1;
  if (has_emashort()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->emashort(), output);
  }
  
  // required float emaLong = 2;
  if (has_emalong()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->emalong(), output);
  }
  
  // required float dea = 3;
  if (has_dea()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dea(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MACD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float emaShort = 1;
  if (has_emashort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->emashort(), target);
  }
  
  // required float emaLong = 2;
  if (has_emalong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->emalong(), target);
  }
  
  // required float dea = 3;
  if (has_dea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dea(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MACD::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float emaShort = 1;
    if (has_emashort()) {
      total_size += 1 + 4;
    }
    
    // required float emaLong = 2;
    if (has_emalong()) {
      total_size += 1 + 4;
    }
    
    // required float dea = 3;
    if (has_dea()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MACD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MACD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MACD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MACD::MergeFrom(const MACD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_emashort()) {
      set_emashort(from.emashort());
    }
    if (from.has_emalong()) {
      set_emalong(from.emalong());
    }
    if (from.has_dea()) {
      set_dea(from.dea());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MACD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MACD::CopyFrom(const MACD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MACD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MACD::Swap(MACD* other) {
  if (other != this) {
    std::swap(emashort_, other->emashort_);
    std::swap(emalong_, other->emalong_);
    std::swap(dea_, other->dea_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MACD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MACD_descriptor_;
  metadata.reflection = MACD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCI::kTypFieldNumber;
#endif  // !_MSC_VER

CCI::CCI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCI::InitAsDefaultInstance() {
}

CCI::CCI(const CCI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCI::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCI::~CCI() {
  SharedDtor();
}

void CCI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCI_descriptor_;
}

const CCI& CCI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

CCI* CCI::default_instance_ = NULL;

CCI* CCI::New() const {
  return new CCI;
}

void CCI::Clear() {
  typ_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float typ = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_typ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_typ())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_typ())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_typ;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float typ = 1;
  for (int i = 0; i < this->typ_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->typ(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float typ = 1;
  for (int i = 0; i < this->typ_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->typ(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCI::ByteSize() const {
  int total_size = 0;
  
  // repeated float typ = 1;
  {
    int data_size = 0;
    data_size = 4 * this->typ_size();
    total_size += 1 * this->typ_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCI::MergeFrom(const CCI& from) {
  GOOGLE_CHECK_NE(&from, this);
  typ_.MergeFrom(from.typ_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCI::CopyFrom(const CCI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCI::IsInitialized() const {
  
  return true;
}

void CCI::Swap(CCI* other) {
  if (other != this) {
    typ_.Swap(&other->typ_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCI_descriptor_;
  metadata.reflection = CCI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BIAS::kSum5FieldNumber;
const int BIAS::kSum11FieldNumber;
const int BIAS::kSum23FieldNumber;
#endif  // !_MSC_VER

BIAS::BIAS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BIAS::InitAsDefaultInstance() {
}

BIAS::BIAS(const BIAS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BIAS::SharedCtor() {
  _cached_size_ = 0;
  sum5_ = 0;
  sum11_ = 0;
  sum23_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BIAS::~BIAS() {
  SharedDtor();
}

void BIAS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BIAS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BIAS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BIAS_descriptor_;
}

const BIAS& BIAS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

BIAS* BIAS::default_instance_ = NULL;

BIAS* BIAS::New() const {
  return new BIAS;
}

void BIAS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sum5_ = 0;
    sum11_ = 0;
    sum23_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BIAS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float sum5 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum5_)));
          set_has_sum5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sum11;
        break;
      }
      
      // required float sum11 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sum11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum11_)));
          set_has_sum11();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_sum23;
        break;
      }
      
      // required float sum23 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sum23:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum23_)));
          set_has_sum23();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BIAS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float sum5 = 1;
  if (has_sum5()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->sum5(), output);
  }
  
  // required float sum11 = 2;
  if (has_sum11()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sum11(), output);
  }
  
  // required float sum23 = 3;
  if (has_sum23()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sum23(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BIAS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float sum5 = 1;
  if (has_sum5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->sum5(), target);
  }
  
  // required float sum11 = 2;
  if (has_sum11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sum11(), target);
  }
  
  // required float sum23 = 3;
  if (has_sum23()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sum23(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BIAS::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float sum5 = 1;
    if (has_sum5()) {
      total_size += 1 + 4;
    }
    
    // required float sum11 = 2;
    if (has_sum11()) {
      total_size += 1 + 4;
    }
    
    // required float sum23 = 3;
    if (has_sum23()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BIAS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BIAS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BIAS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BIAS::MergeFrom(const BIAS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sum5()) {
      set_sum5(from.sum5());
    }
    if (from.has_sum11()) {
      set_sum11(from.sum11());
    }
    if (from.has_sum23()) {
      set_sum23(from.sum23());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BIAS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BIAS::CopyFrom(const BIAS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BIAS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void BIAS::Swap(BIAS* other) {
  if (other != this) {
    std::swap(sum5_, other->sum5_);
    std::swap(sum11_, other->sum11_);
    std::swap(sum23_, other->sum23_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BIAS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BIAS_descriptor_;
  metadata.reflection = BIAS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KDJ::kHhvFieldNumber;
const int KDJ::kLlvFieldNumber;
const int KDJ::kHhvsFieldNumber;
const int KDJ::kLlvsFieldNumber;
const int KDJ::kKFieldNumber;
const int KDJ::kDFieldNumber;
#endif  // !_MSC_VER

KDJ::KDJ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KDJ::InitAsDefaultInstance() {
}

KDJ::KDJ(const KDJ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KDJ::SharedCtor() {
  _cached_size_ = 0;
  hhv_ = 0;
  llv_ = 0;
  k_ = 0;
  d_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KDJ::~KDJ() {
  SharedDtor();
}

void KDJ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KDJ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KDJ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KDJ_descriptor_;
}

const KDJ& KDJ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

KDJ* KDJ::default_instance_ = NULL;

KDJ* KDJ::New() const {
  return new KDJ;
}

void KDJ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hhv_ = 0;
    llv_ = 0;
    k_ = 0;
    d_ = 0;
  }
  hhvs_.Clear();
  llvs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KDJ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float hhv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hhv_)));
          set_has_hhv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_llv;
        break;
      }
      
      // required float llv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_llv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &llv_)));
          set_has_llv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_hhvs;
        break;
      }
      
      // repeated float hhvs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hhvs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_hhvs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_hhvs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_hhvs;
        if (input->ExpectTag(37)) goto parse_llvs;
        break;
      }
      
      // repeated float llvs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_llvs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_llvs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_llvs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_llvs;
        if (input->ExpectTag(45)) goto parse_k;
        break;
      }
      
      // required float k = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_d;
        break;
      }
      
      // required float d = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &d_)));
          set_has_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KDJ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float hhv = 1;
  if (has_hhv()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->hhv(), output);
  }
  
  // required float llv = 2;
  if (has_llv()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->llv(), output);
  }
  
  // repeated float hhvs = 3;
  for (int i = 0; i < this->hhvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->hhvs(i), output);
  }
  
  // repeated float llvs = 4;
  for (int i = 0; i < this->llvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->llvs(i), output);
  }
  
  // required float k = 5;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->k(), output);
  }
  
  // required float d = 6;
  if (has_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->d(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KDJ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float hhv = 1;
  if (has_hhv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->hhv(), target);
  }
  
  // required float llv = 2;
  if (has_llv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->llv(), target);
  }
  
  // repeated float hhvs = 3;
  for (int i = 0; i < this->hhvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->hhvs(i), target);
  }
  
  // repeated float llvs = 4;
  for (int i = 0; i < this->llvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->llvs(i), target);
  }
  
  // required float k = 5;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->k(), target);
  }
  
  // required float d = 6;
  if (has_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->d(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KDJ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float hhv = 1;
    if (has_hhv()) {
      total_size += 1 + 4;
    }
    
    // required float llv = 2;
    if (has_llv()) {
      total_size += 1 + 4;
    }
    
    // required float k = 5;
    if (has_k()) {
      total_size += 1 + 4;
    }
    
    // required float d = 6;
    if (has_d()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated float hhvs = 3;
  {
    int data_size = 0;
    data_size = 4 * this->hhvs_size();
    total_size += 1 * this->hhvs_size() + data_size;
  }
  
  // repeated float llvs = 4;
  {
    int data_size = 0;
    data_size = 4 * this->llvs_size();
    total_size += 1 * this->llvs_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KDJ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KDJ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KDJ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KDJ::MergeFrom(const KDJ& from) {
  GOOGLE_CHECK_NE(&from, this);
  hhvs_.MergeFrom(from.hhvs_);
  llvs_.MergeFrom(from.llvs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hhv()) {
      set_hhv(from.hhv());
    }
    if (from.has_llv()) {
      set_llv(from.llv());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_d()) {
      set_d(from.d());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KDJ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KDJ::CopyFrom(const KDJ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KDJ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000033) != 0x00000033) return false;
  
  return true;
}

void KDJ::Swap(KDJ* other) {
  if (other != this) {
    std::swap(hhv_, other->hhv_);
    std::swap(llv_, other->llv_);
    hhvs_.Swap(&other->hhvs_);
    llvs_.Swap(&other->llvs_);
    std::swap(k_, other->k_);
    std::swap(d_, other->d_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KDJ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KDJ_descriptor_;
  metadata.reflection = KDJ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RSI::kSmaMax1FieldNumber;
const int RSI::kSmaMax2FieldNumber;
const int RSI::kSmaMax3FieldNumber;
const int RSI::kSmaAbs1FieldNumber;
const int RSI::kSmaAbs2FieldNumber;
const int RSI::kSmaAbs3FieldNumber;
#endif  // !_MSC_VER

RSI::RSI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RSI::InitAsDefaultInstance() {
}

RSI::RSI(const RSI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RSI::SharedCtor() {
  _cached_size_ = 0;
  smamax1_ = 0;
  smamax2_ = 0;
  smamax3_ = 0;
  smaabs1_ = 0;
  smaabs2_ = 0;
  smaabs3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RSI::~RSI() {
  SharedDtor();
}

void RSI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RSI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RSI_descriptor_;
}

const RSI& RSI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

RSI* RSI::default_instance_ = NULL;

RSI* RSI::New() const {
  return new RSI;
}

void RSI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    smamax1_ = 0;
    smamax2_ = 0;
    smamax3_ = 0;
    smaabs1_ = 0;
    smaabs2_ = 0;
    smaabs3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RSI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float smaMax1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &smamax1_)));
          set_has_smamax1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_smaMax2;
        break;
      }
      
      // required float smaMax2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_smaMax2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &smamax2_)));
          set_has_smamax2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_smaMax3;
        break;
      }
      
      // required float smaMax3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_smaMax3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &smamax3_)));
          set_has_smamax3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_smaAbs1;
        break;
      }
      
      // required float smaAbs1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_smaAbs1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &smaabs1_)));
          set_has_smaabs1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_smaAbs2;
        break;
      }
      
      // required float smaAbs2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_smaAbs2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &smaabs2_)));
          set_has_smaabs2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_smaAbs3;
        break;
      }
      
      // required float smaAbs3 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_smaAbs3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &smaabs3_)));
          set_has_smaabs3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RSI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float smaMax1 = 1;
  if (has_smamax1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->smamax1(), output);
  }
  
  // required float smaMax2 = 2;
  if (has_smamax2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->smamax2(), output);
  }
  
  // required float smaMax3 = 3;
  if (has_smamax3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->smamax3(), output);
  }
  
  // required float smaAbs1 = 4;
  if (has_smaabs1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->smaabs1(), output);
  }
  
  // required float smaAbs2 = 5;
  if (has_smaabs2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->smaabs2(), output);
  }
  
  // required float smaAbs3 = 6;
  if (has_smaabs3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->smaabs3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RSI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float smaMax1 = 1;
  if (has_smamax1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->smamax1(), target);
  }
  
  // required float smaMax2 = 2;
  if (has_smamax2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->smamax2(), target);
  }
  
  // required float smaMax3 = 3;
  if (has_smamax3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->smamax3(), target);
  }
  
  // required float smaAbs1 = 4;
  if (has_smaabs1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->smaabs1(), target);
  }
  
  // required float smaAbs2 = 5;
  if (has_smaabs2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->smaabs2(), target);
  }
  
  // required float smaAbs3 = 6;
  if (has_smaabs3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->smaabs3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RSI::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float smaMax1 = 1;
    if (has_smamax1()) {
      total_size += 1 + 4;
    }
    
    // required float smaMax2 = 2;
    if (has_smamax2()) {
      total_size += 1 + 4;
    }
    
    // required float smaMax3 = 3;
    if (has_smamax3()) {
      total_size += 1 + 4;
    }
    
    // required float smaAbs1 = 4;
    if (has_smaabs1()) {
      total_size += 1 + 4;
    }
    
    // required float smaAbs2 = 5;
    if (has_smaabs2()) {
      total_size += 1 + 4;
    }
    
    // required float smaAbs3 = 6;
    if (has_smaabs3()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RSI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RSI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RSI::MergeFrom(const RSI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_smamax1()) {
      set_smamax1(from.smamax1());
    }
    if (from.has_smamax2()) {
      set_smamax2(from.smamax2());
    }
    if (from.has_smamax3()) {
      set_smamax3(from.smamax3());
    }
    if (from.has_smaabs1()) {
      set_smaabs1(from.smaabs1());
    }
    if (from.has_smaabs2()) {
      set_smaabs2(from.smaabs2());
    }
    if (from.has_smaabs3()) {
      set_smaabs3(from.smaabs3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RSI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSI::CopyFrom(const RSI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSI::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void RSI::Swap(RSI* other) {
  if (other != this) {
    std::swap(smamax1_, other->smamax1_);
    std::swap(smamax2_, other->smamax2_);
    std::swap(smamax3_, other->smamax3_);
    std::swap(smaabs1_, other->smaabs1_);
    std::swap(smaabs2_, other->smaabs2_);
    std::swap(smaabs3_, other->smaabs3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RSI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RSI_descriptor_;
  metadata.reflection = RSI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OBV::kObvFieldNumber;
const int OBV::kSumObv29FieldNumber;
const int OBV::kObvsFieldNumber;
#endif  // !_MSC_VER

OBV::OBV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OBV::InitAsDefaultInstance() {
}

OBV::OBV(const OBV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OBV::SharedCtor() {
  _cached_size_ = 0;
  obv_ = 0;
  sumobv29_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OBV::~OBV() {
  SharedDtor();
}

void OBV::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OBV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OBV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OBV_descriptor_;
}

const OBV& OBV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

OBV* OBV::default_instance_ = NULL;

OBV* OBV::New() const {
  return new OBV;
}

void OBV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obv_ = 0;
    sumobv29_ = 0;
  }
  obvs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OBV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double obv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obv_)));
          set_has_obv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sumObv29;
        break;
      }
      
      // required double sumObv29 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sumObv29:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sumobv29_)));
          set_has_sumobv29();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_obvs;
        break;
      }
      
      // repeated double obvs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_obvs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_obvs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_obvs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_obvs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OBV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double obv = 1;
  if (has_obv()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->obv(), output);
  }
  
  // required double sumObv29 = 2;
  if (has_sumobv29()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sumobv29(), output);
  }
  
  // repeated double obvs = 3;
  for (int i = 0; i < this->obvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->obvs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OBV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double obv = 1;
  if (has_obv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->obv(), target);
  }
  
  // required double sumObv29 = 2;
  if (has_sumobv29()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sumobv29(), target);
  }
  
  // repeated double obvs = 3;
  for (int i = 0; i < this->obvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->obvs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OBV::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double obv = 1;
    if (has_obv()) {
      total_size += 1 + 8;
    }
    
    // required double sumObv29 = 2;
    if (has_sumobv29()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated double obvs = 3;
  {
    int data_size = 0;
    data_size = 8 * this->obvs_size();
    total_size += 1 * this->obvs_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OBV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OBV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OBV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OBV::MergeFrom(const OBV& from) {
  GOOGLE_CHECK_NE(&from, this);
  obvs_.MergeFrom(from.obvs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obv()) {
      set_obv(from.obv());
    }
    if (from.has_sumobv29()) {
      set_sumobv29(from.sumobv29());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OBV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OBV::CopyFrom(const OBV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBV::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void OBV::Swap(OBV* other) {
  if (other != this) {
    std::swap(obv_, other->obv_);
    std::swap(sumobv29_, other->sumobv29_);
    obvs_.Swap(&other->obvs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OBV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OBV_descriptor_;
  metadata.reflection = OBV_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BOLL::kSumCloseFieldNumber;
const int BOLL::kSumPowCloseFieldNumber;
#endif  // !_MSC_VER

BOLL::BOLL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BOLL::InitAsDefaultInstance() {
}

BOLL::BOLL(const BOLL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BOLL::SharedCtor() {
  _cached_size_ = 0;
  sumclose_ = 0;
  sumpowclose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BOLL::~BOLL() {
  SharedDtor();
}

void BOLL::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BOLL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BOLL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BOLL_descriptor_;
}

const BOLL& BOLL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

BOLL* BOLL::default_instance_ = NULL;

BOLL* BOLL::New() const {
  return new BOLL;
}

void BOLL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sumclose_ = 0;
    sumpowclose_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BOLL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double sumClose = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sumclose_)));
          set_has_sumclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sumPowClose;
        break;
      }
      
      // required double sumPowClose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sumPowClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sumpowclose_)));
          set_has_sumpowclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BOLL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double sumClose = 1;
  if (has_sumclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->sumclose(), output);
  }
  
  // required double sumPowClose = 2;
  if (has_sumpowclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sumpowclose(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BOLL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double sumClose = 1;
  if (has_sumclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->sumclose(), target);
  }
  
  // required double sumPowClose = 2;
  if (has_sumpowclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sumpowclose(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BOLL::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double sumClose = 1;
    if (has_sumclose()) {
      total_size += 1 + 8;
    }
    
    // required double sumPowClose = 2;
    if (has_sumpowclose()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BOLL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BOLL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BOLL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BOLL::MergeFrom(const BOLL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sumclose()) {
      set_sumclose(from.sumclose());
    }
    if (from.has_sumpowclose()) {
      set_sumpowclose(from.sumpowclose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BOLL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BOLL::CopyFrom(const BOLL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BOLL::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BOLL::Swap(BOLL* other) {
  if (other != this) {
    std::swap(sumclose_, other->sumclose_);
    std::swap(sumpowclose_, other->sumpowclose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BOLL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BOLL_descriptor_;
  metadata.reflection = BOLL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PSY::kPsyCount11FieldNumber;
const int PSY::kPsyCountsFieldNumber;
const int PSY::kSumPsyFieldNumber;
const int PSY::kPsysFieldNumber;
#endif  // !_MSC_VER

PSY::PSY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PSY::InitAsDefaultInstance() {
}

PSY::PSY(const PSY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PSY::SharedCtor() {
  _cached_size_ = 0;
  psycount11_ = 0;
  sumpsy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PSY::~PSY() {
  SharedDtor();
}

void PSY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PSY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PSY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PSY_descriptor_;
}

const PSY& PSY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

PSY* PSY::default_instance_ = NULL;

PSY* PSY::New() const {
  return new PSY;
}

void PSY::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    psycount11_ = 0;
    sumpsy_ = 0;
  }
  psycounts_.Clear();
  psys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PSY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 psyCount11 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &psycount11_)));
          set_has_psycount11();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_psyCounts;
        break;
      }
      
      // repeated int32 psyCounts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_psyCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_psycounts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_psycounts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_psyCounts;
        if (input->ExpectTag(29)) goto parse_sumPsy;
        break;
      }
      
      // required float sumPsy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumPsy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumpsy_)));
          set_has_sumpsy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_psys;
        break;
      }
      
      // repeated float psys = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_psys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_psys())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_psys())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_psys;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PSY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 psyCount11 = 1;
  if (has_psycount11()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->psycount11(), output);
  }
  
  // repeated int32 psyCounts = 2;
  for (int i = 0; i < this->psycounts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->psycounts(i), output);
  }
  
  // required float sumPsy = 3;
  if (has_sumpsy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sumpsy(), output);
  }
  
  // repeated float psys = 4;
  for (int i = 0; i < this->psys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->psys(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PSY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 psyCount11 = 1;
  if (has_psycount11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->psycount11(), target);
  }
  
  // repeated int32 psyCounts = 2;
  for (int i = 0; i < this->psycounts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->psycounts(i), target);
  }
  
  // required float sumPsy = 3;
  if (has_sumpsy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sumpsy(), target);
  }
  
  // repeated float psys = 4;
  for (int i = 0; i < this->psys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->psys(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PSY::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 psyCount11 = 1;
    if (has_psycount11()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->psycount11());
    }
    
    // required float sumPsy = 3;
    if (has_sumpsy()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated int32 psyCounts = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->psycounts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->psycounts(i));
    }
    total_size += 1 * this->psycounts_size() + data_size;
  }
  
  // repeated float psys = 4;
  {
    int data_size = 0;
    data_size = 4 * this->psys_size();
    total_size += 1 * this->psys_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PSY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PSY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PSY::MergeFrom(const PSY& from) {
  GOOGLE_CHECK_NE(&from, this);
  psycounts_.MergeFrom(from.psycounts_);
  psys_.MergeFrom(from.psys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_psycount11()) {
      set_psycount11(from.psycount11());
    }
    if (from.has_sumpsy()) {
      set_sumpsy(from.sumpsy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PSY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSY::CopyFrom(const PSY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSY::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void PSY::Swap(PSY* other) {
  if (other != this) {
    std::swap(psycount11_, other->psycount11_);
    psycounts_.Swap(&other->psycounts_);
    std::swap(sumpsy_, other->sumpsy_);
    psys_.Swap(&other->psys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PSY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PSY_descriptor_;
  metadata.reflection = PSY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ROC::kRefClose12FieldNumber;
const int ROC::kSumRocFieldNumber;
const int ROC::kRocsFieldNumber;
#endif  // !_MSC_VER

ROC::ROC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ROC::InitAsDefaultInstance() {
}

ROC::ROC(const ROC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ROC::SharedCtor() {
  _cached_size_ = 0;
  refclose12_ = 0;
  sumroc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ROC::~ROC() {
  SharedDtor();
}

void ROC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ROC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROC_descriptor_;
}

const ROC& ROC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

ROC* ROC::default_instance_ = NULL;

ROC* ROC::New() const {
  return new ROC;
}

void ROC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refclose12_ = 0;
    sumroc_ = 0;
  }
  rocs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ROC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float refClose12 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &refclose12_)));
          set_has_refclose12();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sumRoc;
        break;
      }
      
      // required float sumRoc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumRoc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumroc_)));
          set_has_sumroc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_rocs;
        break;
      }
      
      // repeated float rocs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rocs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_rocs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rocs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_rocs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ROC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float refClose12 = 1;
  if (has_refclose12()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->refclose12(), output);
  }
  
  // required float sumRoc = 2;
  if (has_sumroc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sumroc(), output);
  }
  
  // repeated float rocs = 3;
  for (int i = 0; i < this->rocs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->rocs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ROC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float refClose12 = 1;
  if (has_refclose12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->refclose12(), target);
  }
  
  // required float sumRoc = 2;
  if (has_sumroc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sumroc(), target);
  }
  
  // repeated float rocs = 3;
  for (int i = 0; i < this->rocs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->rocs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ROC::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float refClose12 = 1;
    if (has_refclose12()) {
      total_size += 1 + 4;
    }
    
    // required float sumRoc = 2;
    if (has_sumroc()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated float rocs = 3;
  {
    int data_size = 0;
    data_size = 4 * this->rocs_size();
    total_size += 1 * this->rocs_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ROC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ROC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ROC::MergeFrom(const ROC& from) {
  GOOGLE_CHECK_NE(&from, this);
  rocs_.MergeFrom(from.rocs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refclose12()) {
      set_refclose12(from.refclose12());
    }
    if (from.has_sumroc()) {
      set_sumroc(from.sumroc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ROC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROC::CopyFrom(const ROC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ROC::Swap(ROC* other) {
  if (other != this) {
    std::swap(refclose12_, other->refclose12_);
    std::swap(sumroc_, other->sumroc_);
    rocs_.Swap(&other->rocs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ROC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ROC_descriptor_;
  metadata.reflection = ROC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WR::kLlvFieldNumber;
const int WR::kHhvFieldNumber;
const int WR::kLlv2FieldNumber;
const int WR::kHhv2FieldNumber;
const int WR::kHhvsFieldNumber;
const int WR::kLlvsFieldNumber;
const int WR::kHhvs2FieldNumber;
const int WR::kLlvs2FieldNumber;
#endif  // !_MSC_VER

WR::WR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WR::InitAsDefaultInstance() {
}

WR::WR(const WR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WR::SharedCtor() {
  _cached_size_ = 0;
  llv_ = 0;
  hhv_ = 0;
  llv2_ = 0;
  hhv2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WR::~WR() {
  SharedDtor();
}

void WR::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WR_descriptor_;
}

const WR& WR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

WR* WR::default_instance_ = NULL;

WR* WR::New() const {
  return new WR;
}

void WR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    llv_ = 0;
    hhv_ = 0;
    llv2_ = 0;
    hhv2_ = 0;
  }
  hhvs_.Clear();
  llvs_.Clear();
  hhvs2_.Clear();
  llvs2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float llv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &llv_)));
          set_has_llv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_hhv;
        break;
      }
      
      // required float hhv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hhv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hhv_)));
          set_has_hhv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_llv2;
        break;
      }
      
      // required float llv2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_llv2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &llv2_)));
          set_has_llv2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_hhv2;
        break;
      }
      
      // required float hhv2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hhv2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hhv2_)));
          set_has_hhv2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_hhvs;
        break;
      }
      
      // repeated float hhvs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hhvs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_hhvs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_hhvs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_hhvs;
        if (input->ExpectTag(53)) goto parse_llvs;
        break;
      }
      
      // repeated float llvs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_llvs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_llvs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_llvs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_llvs;
        if (input->ExpectTag(61)) goto parse_hhvs2;
        break;
      }
      
      // repeated float hhvs2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hhvs2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_hhvs2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_hhvs2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_hhvs2;
        if (input->ExpectTag(69)) goto parse_llvs2;
        break;
      }
      
      // repeated float llvs2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_llvs2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69, input, this->mutable_llvs2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_llvs2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_llvs2;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float llv = 1;
  if (has_llv()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->llv(), output);
  }
  
  // required float hhv = 2;
  if (has_hhv()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->hhv(), output);
  }
  
  // required float llv2 = 3;
  if (has_llv2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->llv2(), output);
  }
  
  // required float hhv2 = 4;
  if (has_hhv2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->hhv2(), output);
  }
  
  // repeated float hhvs = 5;
  for (int i = 0; i < this->hhvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->hhvs(i), output);
  }
  
  // repeated float llvs = 6;
  for (int i = 0; i < this->llvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->llvs(i), output);
  }
  
  // repeated float hhvs2 = 7;
  for (int i = 0; i < this->hhvs2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->hhvs2(i), output);
  }
  
  // repeated float llvs2 = 8;
  for (int i = 0; i < this->llvs2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->llvs2(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float llv = 1;
  if (has_llv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->llv(), target);
  }
  
  // required float hhv = 2;
  if (has_hhv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->hhv(), target);
  }
  
  // required float llv2 = 3;
  if (has_llv2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->llv2(), target);
  }
  
  // required float hhv2 = 4;
  if (has_hhv2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->hhv2(), target);
  }
  
  // repeated float hhvs = 5;
  for (int i = 0; i < this->hhvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->hhvs(i), target);
  }
  
  // repeated float llvs = 6;
  for (int i = 0; i < this->llvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->llvs(i), target);
  }
  
  // repeated float hhvs2 = 7;
  for (int i = 0; i < this->hhvs2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->hhvs2(i), target);
  }
  
  // repeated float llvs2 = 8;
  for (int i = 0; i < this->llvs2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(8, this->llvs2(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WR::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float llv = 1;
    if (has_llv()) {
      total_size += 1 + 4;
    }
    
    // required float hhv = 2;
    if (has_hhv()) {
      total_size += 1 + 4;
    }
    
    // required float llv2 = 3;
    if (has_llv2()) {
      total_size += 1 + 4;
    }
    
    // required float hhv2 = 4;
    if (has_hhv2()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated float hhvs = 5;
  {
    int data_size = 0;
    data_size = 4 * this->hhvs_size();
    total_size += 1 * this->hhvs_size() + data_size;
  }
  
  // repeated float llvs = 6;
  {
    int data_size = 0;
    data_size = 4 * this->llvs_size();
    total_size += 1 * this->llvs_size() + data_size;
  }
  
  // repeated float hhvs2 = 7;
  {
    int data_size = 0;
    data_size = 4 * this->hhvs2_size();
    total_size += 1 * this->hhvs2_size() + data_size;
  }
  
  // repeated float llvs2 = 8;
  {
    int data_size = 0;
    data_size = 4 * this->llvs2_size();
    total_size += 1 * this->llvs2_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WR::MergeFrom(const WR& from) {
  GOOGLE_CHECK_NE(&from, this);
  hhvs_.MergeFrom(from.hhvs_);
  llvs_.MergeFrom(from.llvs_);
  hhvs2_.MergeFrom(from.hhvs2_);
  llvs2_.MergeFrom(from.llvs2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_llv()) {
      set_llv(from.llv());
    }
    if (from.has_hhv()) {
      set_hhv(from.hhv());
    }
    if (from.has_llv2()) {
      set_llv2(from.llv2());
    }
    if (from.has_hhv2()) {
      set_hhv2(from.hhv2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WR::CopyFrom(const WR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WR::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void WR::Swap(WR* other) {
  if (other != this) {
    std::swap(llv_, other->llv_);
    std::swap(hhv_, other->hhv_);
    std::swap(llv2_, other->llv2_);
    std::swap(hhv2_, other->hhv2_);
    hhvs_.Swap(&other->hhvs_);
    llvs_.Swap(&other->llvs_);
    hhvs2_.Swap(&other->hhvs2_);
    llvs2_.Swap(&other->llvs2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WR_descriptor_;
  metadata.reflection = WR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VR::kSum1FieldNumber;
const int VR::kSum2FieldNumber;
const int VR::kSumVrFieldNumber;
const int VR::kVrsFieldNumber;
#endif  // !_MSC_VER

VR::VR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VR::InitAsDefaultInstance() {
}

VR::VR(const VR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VR::SharedCtor() {
  _cached_size_ = 0;
  sum1_ = 0;
  sum2_ = 0;
  sumvr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VR::~VR() {
  SharedDtor();
}

void VR::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VR_descriptor_;
}

const VR& VR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

VR* VR::default_instance_ = NULL;

VR* VR::New() const {
  return new VR;
}

void VR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sum1_ = 0;
    sum2_ = 0;
    sumvr_ = 0;
  }
  vrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double sum1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum1_)));
          set_has_sum1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sum2;
        break;
      }
      
      // required double sum2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum2_)));
          set_has_sum2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_sumVr;
        break;
      }
      
      // required double sumVr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sumVr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sumvr_)));
          set_has_sumvr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_vrs;
        break;
      }
      
      // repeated double vrs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vrs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_vrs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_vrs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_vrs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double sum1 = 1;
  if (has_sum1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->sum1(), output);
  }
  
  // required double sum2 = 2;
  if (has_sum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sum2(), output);
  }
  
  // required double sumVr = 3;
  if (has_sumvr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sumvr(), output);
  }
  
  // repeated double vrs = 4;
  for (int i = 0; i < this->vrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->vrs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double sum1 = 1;
  if (has_sum1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->sum1(), target);
  }
  
  // required double sum2 = 2;
  if (has_sum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sum2(), target);
  }
  
  // required double sumVr = 3;
  if (has_sumvr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->sumvr(), target);
  }
  
  // repeated double vrs = 4;
  for (int i = 0; i < this->vrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->vrs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VR::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double sum1 = 1;
    if (has_sum1()) {
      total_size += 1 + 8;
    }
    
    // required double sum2 = 2;
    if (has_sum2()) {
      total_size += 1 + 8;
    }
    
    // required double sumVr = 3;
    if (has_sumvr()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated double vrs = 4;
  {
    int data_size = 0;
    data_size = 8 * this->vrs_size();
    total_size += 1 * this->vrs_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VR::MergeFrom(const VR& from) {
  GOOGLE_CHECK_NE(&from, this);
  vrs_.MergeFrom(from.vrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sum1()) {
      set_sum1(from.sum1());
    }
    if (from.has_sum2()) {
      set_sum2(from.sum2());
    }
    if (from.has_sumvr()) {
      set_sumvr(from.sumvr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VR::CopyFrom(const VR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void VR::Swap(VR* other) {
  if (other != this) {
    std::swap(sum1_, other->sum1_);
    std::swap(sum2_, other->sum2_);
    std::swap(sumvr_, other->sumvr_);
    vrs_.Swap(&other->vrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VR_descriptor_;
  metadata.reflection = VR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EXPMA::kPrevEmaFieldNumber;
#endif  // !_MSC_VER

EXPMA::EXPMA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EXPMA::InitAsDefaultInstance() {
}

EXPMA::EXPMA(const EXPMA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EXPMA::SharedCtor() {
  _cached_size_ = 0;
  prevema_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EXPMA::~EXPMA() {
  SharedDtor();
}

void EXPMA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EXPMA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EXPMA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EXPMA_descriptor_;
}

const EXPMA& EXPMA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

EXPMA* EXPMA::default_instance_ = NULL;

EXPMA* EXPMA::New() const {
  return new EXPMA;
}

void EXPMA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prevema_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EXPMA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float prevEma = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevema_)));
          set_has_prevema();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EXPMA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float prevEma = 1;
  if (has_prevema()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->prevema(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EXPMA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float prevEma = 1;
  if (has_prevema()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->prevema(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EXPMA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float prevEma = 1;
    if (has_prevema()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EXPMA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EXPMA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EXPMA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EXPMA::MergeFrom(const EXPMA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prevema()) {
      set_prevema(from.prevema());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EXPMA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EXPMA::CopyFrom(const EXPMA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EXPMA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EXPMA::Swap(EXPMA* other) {
  if (other != this) {
    std::swap(prevema_, other->prevema_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EXPMA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EXPMA_descriptor_;
  metadata.reflection = EXPMA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ARBR::kSum1FieldNumber;
const int ARBR::kSum2FieldNumber;
const int ARBR::kSum3FieldNumber;
const int ARBR::kSum4FieldNumber;
const int ARBR::kTop1FieldNumber;
const int ARBR::kTop2FieldNumber;
const int ARBR::kTop3FieldNumber;
const int ARBR::kTop4FieldNumber;
const int ARBR::kPrevCloseFieldNumber;
#endif  // !_MSC_VER

ARBR::ARBR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ARBR::InitAsDefaultInstance() {
}

ARBR::ARBR(const ARBR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ARBR::SharedCtor() {
  _cached_size_ = 0;
  sum1_ = 0;
  sum2_ = 0;
  sum3_ = 0;
  sum4_ = 0;
  top1_ = 0;
  top2_ = 0;
  top3_ = 0;
  top4_ = 0;
  prevclose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ARBR::~ARBR() {
  SharedDtor();
}

void ARBR::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ARBR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ARBR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ARBR_descriptor_;
}

const ARBR& ARBR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

ARBR* ARBR::default_instance_ = NULL;

ARBR* ARBR::New() const {
  return new ARBR;
}

void ARBR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sum1_ = 0;
    sum2_ = 0;
    sum3_ = 0;
    sum4_ = 0;
    top1_ = 0;
    top2_ = 0;
    top3_ = 0;
    top4_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    prevclose_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ARBR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float sum1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum1_)));
          set_has_sum1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sum2;
        break;
      }
      
      // required float sum2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum2_)));
          set_has_sum2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_sum3;
        break;
      }
      
      // required float sum3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sum3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum3_)));
          set_has_sum3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_sum4;
        break;
      }
      
      // required float sum4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sum4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum4_)));
          set_has_sum4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_top1;
        break;
      }
      
      // required float top1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top1_)));
          set_has_top1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_top2;
        break;
      }
      
      // required float top2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top2_)));
          set_has_top2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_top3;
        break;
      }
      
      // required float top3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top3_)));
          set_has_top3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_top4;
        break;
      }
      
      // required float top4 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top4_)));
          set_has_top4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_prevClose;
        break;
      }
      
      // required float prevClose = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prevClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevclose_)));
          set_has_prevclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ARBR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float sum1 = 1;
  if (has_sum1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->sum1(), output);
  }
  
  // required float sum2 = 2;
  if (has_sum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sum2(), output);
  }
  
  // required float sum3 = 3;
  if (has_sum3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sum3(), output);
  }
  
  // required float sum4 = 4;
  if (has_sum4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sum4(), output);
  }
  
  // required float top1 = 5;
  if (has_top1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->top1(), output);
  }
  
  // required float top2 = 6;
  if (has_top2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->top2(), output);
  }
  
  // required float top3 = 7;
  if (has_top3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->top3(), output);
  }
  
  // required float top4 = 8;
  if (has_top4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->top4(), output);
  }
  
  // required float prevClose = 9;
  if (has_prevclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->prevclose(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ARBR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float sum1 = 1;
  if (has_sum1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->sum1(), target);
  }
  
  // required float sum2 = 2;
  if (has_sum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sum2(), target);
  }
  
  // required float sum3 = 3;
  if (has_sum3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sum3(), target);
  }
  
  // required float sum4 = 4;
  if (has_sum4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sum4(), target);
  }
  
  // required float top1 = 5;
  if (has_top1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->top1(), target);
  }
  
  // required float top2 = 6;
  if (has_top2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->top2(), target);
  }
  
  // required float top3 = 7;
  if (has_top3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->top3(), target);
  }
  
  // required float top4 = 8;
  if (has_top4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->top4(), target);
  }
  
  // required float prevClose = 9;
  if (has_prevclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->prevclose(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ARBR::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float sum1 = 1;
    if (has_sum1()) {
      total_size += 1 + 4;
    }
    
    // required float sum2 = 2;
    if (has_sum2()) {
      total_size += 1 + 4;
    }
    
    // required float sum3 = 3;
    if (has_sum3()) {
      total_size += 1 + 4;
    }
    
    // required float sum4 = 4;
    if (has_sum4()) {
      total_size += 1 + 4;
    }
    
    // required float top1 = 5;
    if (has_top1()) {
      total_size += 1 + 4;
    }
    
    // required float top2 = 6;
    if (has_top2()) {
      total_size += 1 + 4;
    }
    
    // required float top3 = 7;
    if (has_top3()) {
      total_size += 1 + 4;
    }
    
    // required float top4 = 8;
    if (has_top4()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float prevClose = 9;
    if (has_prevclose()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ARBR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ARBR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ARBR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ARBR::MergeFrom(const ARBR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sum1()) {
      set_sum1(from.sum1());
    }
    if (from.has_sum2()) {
      set_sum2(from.sum2());
    }
    if (from.has_sum3()) {
      set_sum3(from.sum3());
    }
    if (from.has_sum4()) {
      set_sum4(from.sum4());
    }
    if (from.has_top1()) {
      set_top1(from.top1());
    }
    if (from.has_top2()) {
      set_top2(from.top2());
    }
    if (from.has_top3()) {
      set_top3(from.top3());
    }
    if (from.has_top4()) {
      set_top4(from.top4());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_prevclose()) {
      set_prevclose(from.prevclose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ARBR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARBR::CopyFrom(const ARBR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARBR::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void ARBR::Swap(ARBR* other) {
  if (other != this) {
    std::swap(sum1_, other->sum1_);
    std::swap(sum2_, other->sum2_);
    std::swap(sum3_, other->sum3_);
    std::swap(sum4_, other->sum4_);
    std::swap(top1_, other->top1_);
    std::swap(top2_, other->top2_);
    std::swap(top3_, other->top3_);
    std::swap(top4_, other->top4_);
    std::swap(prevclose_, other->prevclose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ARBR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ARBR_descriptor_;
  metadata.reflection = ARBR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CR::kPrevMidFieldNumber;
const int CR::kSum1FieldNumber;
const int CR::kSum2FieldNumber;
const int CR::kTop1FieldNumber;
const int CR::kTop2FieldNumber;
const int CR::kNextMa1FieldNumber;
const int CR::kNextMa2FieldNumber;
const int CR::kNextMa3FieldNumber;
const int CR::kCrsFieldNumber;
#endif  // !_MSC_VER

CR::CR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CR::InitAsDefaultInstance() {
}

CR::CR(const CR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CR::SharedCtor() {
  _cached_size_ = 0;
  prevmid_ = 0;
  sum1_ = 0;
  sum2_ = 0;
  top1_ = 0;
  top2_ = 0;
  nextma1_ = 0;
  nextma2_ = 0;
  nextma3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CR::~CR() {
  SharedDtor();
}

void CR::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CR_descriptor_;
}

const CR& CR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

CR* CR::default_instance_ = NULL;

CR* CR::New() const {
  return new CR;
}

void CR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prevmid_ = 0;
    sum1_ = 0;
    sum2_ = 0;
    top1_ = 0;
    top2_ = 0;
    nextma1_ = 0;
    nextma2_ = 0;
    nextma3_ = 0;
  }
  crs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float prevMid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevmid_)));
          set_has_prevmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sum1;
        break;
      }
      
      // required float sum1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sum1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum1_)));
          set_has_sum1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_sum2;
        break;
      }
      
      // required float sum2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum2_)));
          set_has_sum2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_top1;
        break;
      }
      
      // required float top1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top1_)));
          set_has_top1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_top2;
        break;
      }
      
      // required float top2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top2_)));
          set_has_top2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_nextMa1;
        break;
      }
      
      // required float nextMa1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_nextMa1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nextma1_)));
          set_has_nextma1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_nextMa2;
        break;
      }
      
      // required float nextMa2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_nextMa2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nextma2_)));
          set_has_nextma2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_nextMa3;
        break;
      }
      
      // required float nextMa3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_nextMa3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nextma3_)));
          set_has_nextma3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_crs;
        break;
      }
      
      // repeated float crs = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_crs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77, input, this->mutable_crs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_crs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_crs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float prevMid = 1;
  if (has_prevmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->prevmid(), output);
  }
  
  // required float sum1 = 2;
  if (has_sum1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sum1(), output);
  }
  
  // required float sum2 = 3;
  if (has_sum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sum2(), output);
  }
  
  // required float top1 = 4;
  if (has_top1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->top1(), output);
  }
  
  // required float top2 = 5;
  if (has_top2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->top2(), output);
  }
  
  // required float nextMa1 = 6;
  if (has_nextma1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->nextma1(), output);
  }
  
  // required float nextMa2 = 7;
  if (has_nextma2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->nextma2(), output);
  }
  
  // required float nextMa3 = 8;
  if (has_nextma3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->nextma3(), output);
  }
  
  // repeated float crs = 9;
  for (int i = 0; i < this->crs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->crs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float prevMid = 1;
  if (has_prevmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->prevmid(), target);
  }
  
  // required float sum1 = 2;
  if (has_sum1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sum1(), target);
  }
  
  // required float sum2 = 3;
  if (has_sum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sum2(), target);
  }
  
  // required float top1 = 4;
  if (has_top1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->top1(), target);
  }
  
  // required float top2 = 5;
  if (has_top2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->top2(), target);
  }
  
  // required float nextMa1 = 6;
  if (has_nextma1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->nextma1(), target);
  }
  
  // required float nextMa2 = 7;
  if (has_nextma2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->nextma2(), target);
  }
  
  // required float nextMa3 = 8;
  if (has_nextma3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->nextma3(), target);
  }
  
  // repeated float crs = 9;
  for (int i = 0; i < this->crs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(9, this->crs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CR::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float prevMid = 1;
    if (has_prevmid()) {
      total_size += 1 + 4;
    }
    
    // required float sum1 = 2;
    if (has_sum1()) {
      total_size += 1 + 4;
    }
    
    // required float sum2 = 3;
    if (has_sum2()) {
      total_size += 1 + 4;
    }
    
    // required float top1 = 4;
    if (has_top1()) {
      total_size += 1 + 4;
    }
    
    // required float top2 = 5;
    if (has_top2()) {
      total_size += 1 + 4;
    }
    
    // required float nextMa1 = 6;
    if (has_nextma1()) {
      total_size += 1 + 4;
    }
    
    // required float nextMa2 = 7;
    if (has_nextma2()) {
      total_size += 1 + 4;
    }
    
    // required float nextMa3 = 8;
    if (has_nextma3()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated float crs = 9;
  {
    int data_size = 0;
    data_size = 4 * this->crs_size();
    total_size += 1 * this->crs_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CR::MergeFrom(const CR& from) {
  GOOGLE_CHECK_NE(&from, this);
  crs_.MergeFrom(from.crs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prevmid()) {
      set_prevmid(from.prevmid());
    }
    if (from.has_sum1()) {
      set_sum1(from.sum1());
    }
    if (from.has_sum2()) {
      set_sum2(from.sum2());
    }
    if (from.has_top1()) {
      set_top1(from.top1());
    }
    if (from.has_top2()) {
      set_top2(from.top2());
    }
    if (from.has_nextma1()) {
      set_nextma1(from.nextma1());
    }
    if (from.has_nextma2()) {
      set_nextma2(from.nextma2());
    }
    if (from.has_nextma3()) {
      set_nextma3(from.nextma3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CR::CopyFrom(const CR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CR::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void CR::Swap(CR* other) {
  if (other != this) {
    std::swap(prevmid_, other->prevmid_);
    std::swap(sum1_, other->sum1_);
    std::swap(sum2_, other->sum2_);
    std::swap(top1_, other->top1_);
    std::swap(top2_, other->top2_);
    std::swap(nextma1_, other->nextma1_);
    std::swap(nextma2_, other->nextma2_);
    std::swap(nextma3_, other->nextma3_);
    crs_.Swap(&other->crs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CR_descriptor_;
  metadata.reflection = CR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDP::kPrevHighFieldNumber;
const int CDP::kPrevLowFieldNumber;
const int CDP::kPrevCloseFieldNumber;
#endif  // !_MSC_VER

CDP::CDP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDP::InitAsDefaultInstance() {
}

CDP::CDP(const CDP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDP::SharedCtor() {
  _cached_size_ = 0;
  prevhigh_ = 0;
  prevlow_ = 0;
  prevclose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDP::~CDP() {
  SharedDtor();
}

void CDP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDP_descriptor_;
}

const CDP& CDP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

CDP* CDP::default_instance_ = NULL;

CDP* CDP::New() const {
  return new CDP;
}

void CDP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prevhigh_ = 0;
    prevlow_ = 0;
    prevclose_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float prevHigh = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevhigh_)));
          set_has_prevhigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_prevLow;
        break;
      }
      
      // required float prevLow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prevLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevlow_)));
          set_has_prevlow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_prevClose;
        break;
      }
      
      // required float prevClose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prevClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevclose_)));
          set_has_prevclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float prevHigh = 1;
  if (has_prevhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->prevhigh(), output);
  }
  
  // required float prevLow = 2;
  if (has_prevlow()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->prevlow(), output);
  }
  
  // required float prevClose = 3;
  if (has_prevclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->prevclose(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float prevHigh = 1;
  if (has_prevhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->prevhigh(), target);
  }
  
  // required float prevLow = 2;
  if (has_prevlow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->prevlow(), target);
  }
  
  // required float prevClose = 3;
  if (has_prevclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->prevclose(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float prevHigh = 1;
    if (has_prevhigh()) {
      total_size += 1 + 4;
    }
    
    // required float prevLow = 2;
    if (has_prevlow()) {
      total_size += 1 + 4;
    }
    
    // required float prevClose = 3;
    if (has_prevclose()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDP::MergeFrom(const CDP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prevhigh()) {
      set_prevhigh(from.prevhigh());
    }
    if (from.has_prevlow()) {
      set_prevlow(from.prevlow());
    }
    if (from.has_prevclose()) {
      set_prevclose(from.prevclose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDP::CopyFrom(const CDP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CDP::Swap(CDP* other) {
  if (other != this) {
    std::swap(prevhigh_, other->prevhigh_);
    std::swap(prevlow_, other->prevlow_);
    std::swap(prevclose_, other->prevclose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDP_descriptor_;
  metadata.reflection = CDP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DMA::kSumMa9FieldNumber;
const int DMA::kSumMa49FieldNumber;
const int DMA::kSumDddFieldNumber;
const int DMA::kDddsFieldNumber;
#endif  // !_MSC_VER

DMA::DMA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DMA::InitAsDefaultInstance() {
}

DMA::DMA(const DMA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DMA::SharedCtor() {
  _cached_size_ = 0;
  summa9_ = 0;
  summa49_ = 0;
  sumddd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DMA::~DMA() {
  SharedDtor();
}

void DMA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DMA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DMA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DMA_descriptor_;
}

const DMA& DMA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

DMA* DMA::default_instance_ = NULL;

DMA* DMA::New() const {
  return new DMA;
}

void DMA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    summa9_ = 0;
    summa49_ = 0;
    sumddd_ = 0;
  }
  ddds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DMA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float sumMa9 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &summa9_)));
          set_has_summa9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sumMa49;
        break;
      }
      
      // required float sumMa49 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumMa49:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &summa49_)));
          set_has_summa49();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_sumDdd;
        break;
      }
      
      // required float sumDdd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumDdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumddd_)));
          set_has_sumddd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_ddds;
        break;
      }
      
      // repeated float ddds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ddds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_ddds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ddds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_ddds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DMA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float sumMa9 = 1;
  if (has_summa9()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->summa9(), output);
  }
  
  // required float sumMa49 = 2;
  if (has_summa49()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->summa49(), output);
  }
  
  // required float sumDdd = 3;
  if (has_sumddd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sumddd(), output);
  }
  
  // repeated float ddds = 4;
  for (int i = 0; i < this->ddds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->ddds(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DMA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float sumMa9 = 1;
  if (has_summa9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->summa9(), target);
  }
  
  // required float sumMa49 = 2;
  if (has_summa49()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->summa49(), target);
  }
  
  // required float sumDdd = 3;
  if (has_sumddd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sumddd(), target);
  }
  
  // repeated float ddds = 4;
  for (int i = 0; i < this->ddds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->ddds(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DMA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float sumMa9 = 1;
    if (has_summa9()) {
      total_size += 1 + 4;
    }
    
    // required float sumMa49 = 2;
    if (has_summa49()) {
      total_size += 1 + 4;
    }
    
    // required float sumDdd = 3;
    if (has_sumddd()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated float ddds = 4;
  {
    int data_size = 0;
    data_size = 4 * this->ddds_size();
    total_size += 1 * this->ddds_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DMA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DMA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DMA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DMA::MergeFrom(const DMA& from) {
  GOOGLE_CHECK_NE(&from, this);
  ddds_.MergeFrom(from.ddds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_summa9()) {
      set_summa9(from.summa9());
    }
    if (from.has_summa49()) {
      set_summa49(from.summa49());
    }
    if (from.has_sumddd()) {
      set_sumddd(from.sumddd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DMA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DMA::CopyFrom(const DMA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DMA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void DMA::Swap(DMA* other) {
  if (other != this) {
    std::swap(summa9_, other->summa9_);
    std::swap(summa49_, other->summa49_);
    std::swap(sumddd_, other->sumddd_);
    ddds_.Swap(&other->ddds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DMA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DMA_descriptor_;
  metadata.reflection = DMA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MTM::kClose4FieldNumber;
const int MTM::kSumMtmFieldNumber;
const int MTM::kMtmsFieldNumber;
#endif  // !_MSC_VER

MTM::MTM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MTM::InitAsDefaultInstance() {
}

MTM::MTM(const MTM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MTM::SharedCtor() {
  _cached_size_ = 0;
  close4_ = 0;
  summtm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MTM::~MTM() {
  SharedDtor();
}

void MTM::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MTM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MTM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MTM_descriptor_;
}

const MTM& MTM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

MTM* MTM::default_instance_ = NULL;

MTM* MTM::New() const {
  return new MTM;
}

void MTM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    close4_ = 0;
    summtm_ = 0;
  }
  mtms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MTM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float close4 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &close4_)));
          set_has_close4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sumMtm;
        break;
      }
      
      // required float sumMtm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumMtm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &summtm_)));
          set_has_summtm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_mtms;
        break;
      }
      
      // repeated float mtms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mtms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_mtms())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mtms())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_mtms;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MTM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float close4 = 1;
  if (has_close4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->close4(), output);
  }
  
  // required float sumMtm = 2;
  if (has_summtm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->summtm(), output);
  }
  
  // repeated float mtms = 3;
  for (int i = 0; i < this->mtms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->mtms(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MTM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float close4 = 1;
  if (has_close4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->close4(), target);
  }
  
  // required float sumMtm = 2;
  if (has_summtm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->summtm(), target);
  }
  
  // repeated float mtms = 3;
  for (int i = 0; i < this->mtms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->mtms(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MTM::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float close4 = 1;
    if (has_close4()) {
      total_size += 1 + 4;
    }
    
    // required float sumMtm = 2;
    if (has_summtm()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated float mtms = 3;
  {
    int data_size = 0;
    data_size = 4 * this->mtms_size();
    total_size += 1 * this->mtms_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MTM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MTM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MTM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MTM::MergeFrom(const MTM& from) {
  GOOGLE_CHECK_NE(&from, this);
  mtms_.MergeFrom(from.mtms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_close4()) {
      set_close4(from.close4());
    }
    if (from.has_summtm()) {
      set_summtm(from.summtm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MTM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MTM::CopyFrom(const MTM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MTM::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MTM::Swap(MTM* other) {
  if (other != this) {
    std::swap(close4_, other->close4_);
    std::swap(summtm_, other->summtm_);
    mtms_.Swap(&other->mtms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MTM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MTM_descriptor_;
  metadata.reflection = MTM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BBI::kSum1FieldNumber;
const int BBI::kSum2FieldNumber;
const int BBI::kSum3FieldNumber;
const int BBI::kSum4FieldNumber;
const int BBI::kTop1FieldNumber;
const int BBI::kTop2FieldNumber;
const int BBI::kTop3FieldNumber;
const int BBI::kTop4FieldNumber;
#endif  // !_MSC_VER

BBI::BBI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BBI::InitAsDefaultInstance() {
}

BBI::BBI(const BBI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BBI::SharedCtor() {
  _cached_size_ = 0;
  sum1_ = 0;
  sum2_ = 0;
  sum3_ = 0;
  sum4_ = 0;
  top1_ = 0;
  top2_ = 0;
  top3_ = 0;
  top4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BBI::~BBI() {
  SharedDtor();
}

void BBI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BBI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BBI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BBI_descriptor_;
}

const BBI& BBI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

BBI* BBI::default_instance_ = NULL;

BBI* BBI::New() const {
  return new BBI;
}

void BBI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sum1_ = 0;
    sum2_ = 0;
    sum3_ = 0;
    sum4_ = 0;
    top1_ = 0;
    top2_ = 0;
    top3_ = 0;
    top4_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BBI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float sum1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum1_)));
          set_has_sum1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sum2;
        break;
      }
      
      // required float sum2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum2_)));
          set_has_sum2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_sum3;
        break;
      }
      
      // required float sum3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sum3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum3_)));
          set_has_sum3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_sum4;
        break;
      }
      
      // required float sum4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sum4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum4_)));
          set_has_sum4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_top1;
        break;
      }
      
      // required float top1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top1_)));
          set_has_top1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_top2;
        break;
      }
      
      // required float top2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top2_)));
          set_has_top2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_top3;
        break;
      }
      
      // required float top3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top3_)));
          set_has_top3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_top4;
        break;
      }
      
      // required float top4 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top4_)));
          set_has_top4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BBI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float sum1 = 1;
  if (has_sum1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->sum1(), output);
  }
  
  // required float sum2 = 2;
  if (has_sum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sum2(), output);
  }
  
  // required float sum3 = 3;
  if (has_sum3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sum3(), output);
  }
  
  // required float sum4 = 4;
  if (has_sum4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sum4(), output);
  }
  
  // required float top1 = 5;
  if (has_top1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->top1(), output);
  }
  
  // required float top2 = 6;
  if (has_top2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->top2(), output);
  }
  
  // required float top3 = 7;
  if (has_top3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->top3(), output);
  }
  
  // required float top4 = 8;
  if (has_top4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->top4(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BBI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float sum1 = 1;
  if (has_sum1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->sum1(), target);
  }
  
  // required float sum2 = 2;
  if (has_sum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sum2(), target);
  }
  
  // required float sum3 = 3;
  if (has_sum3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sum3(), target);
  }
  
  // required float sum4 = 4;
  if (has_sum4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sum4(), target);
  }
  
  // required float top1 = 5;
  if (has_top1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->top1(), target);
  }
  
  // required float top2 = 6;
  if (has_top2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->top2(), target);
  }
  
  // required float top3 = 7;
  if (has_top3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->top3(), target);
  }
  
  // required float top4 = 8;
  if (has_top4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->top4(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BBI::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float sum1 = 1;
    if (has_sum1()) {
      total_size += 1 + 4;
    }
    
    // required float sum2 = 2;
    if (has_sum2()) {
      total_size += 1 + 4;
    }
    
    // required float sum3 = 3;
    if (has_sum3()) {
      total_size += 1 + 4;
    }
    
    // required float sum4 = 4;
    if (has_sum4()) {
      total_size += 1 + 4;
    }
    
    // required float top1 = 5;
    if (has_top1()) {
      total_size += 1 + 4;
    }
    
    // required float top2 = 6;
    if (has_top2()) {
      total_size += 1 + 4;
    }
    
    // required float top3 = 7;
    if (has_top3()) {
      total_size += 1 + 4;
    }
    
    // required float top4 = 8;
    if (has_top4()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BBI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BBI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BBI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BBI::MergeFrom(const BBI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sum1()) {
      set_sum1(from.sum1());
    }
    if (from.has_sum2()) {
      set_sum2(from.sum2());
    }
    if (from.has_sum3()) {
      set_sum3(from.sum3());
    }
    if (from.has_sum4()) {
      set_sum4(from.sum4());
    }
    if (from.has_top1()) {
      set_top1(from.top1());
    }
    if (from.has_top2()) {
      set_top2(from.top2());
    }
    if (from.has_top3()) {
      set_top3(from.top3());
    }
    if (from.has_top4()) {
      set_top4(from.top4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BBI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBI::CopyFrom(const BBI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBI::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void BBI::Swap(BBI* other) {
  if (other != this) {
    std::swap(sum1_, other->sum1_);
    std::swap(sum2_, other->sum2_);
    std::swap(sum3_, other->sum3_);
    std::swap(sum4_, other->sum4_);
    std::swap(top1_, other->top1_);
    std::swap(top2_, other->top2_);
    std::swap(top3_, other->top3_);
    std::swap(top4_, other->top4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BBI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BBI_descriptor_;
  metadata.reflection = BBI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRIX::kPrevEma1FieldNumber;
const int TRIX::kPrevEma2FieldNumber;
const int TRIX::kPrevTrFieldNumber;
const int TRIX::kSumTrFieldNumber;
const int TRIX::kTrsFieldNumber;
#endif  // !_MSC_VER

TRIX::TRIX()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TRIX::InitAsDefaultInstance() {
}

TRIX::TRIX(const TRIX& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TRIX::SharedCtor() {
  _cached_size_ = 0;
  prevema1_ = 0;
  prevema2_ = 0;
  prevtr_ = 0;
  sumtr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRIX::~TRIX() {
  SharedDtor();
}

void TRIX::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRIX::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRIX::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRIX_descriptor_;
}

const TRIX& TRIX::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

TRIX* TRIX::default_instance_ = NULL;

TRIX* TRIX::New() const {
  return new TRIX;
}

void TRIX::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prevema1_ = 0;
    prevema2_ = 0;
    prevtr_ = 0;
    sumtr_ = 0;
  }
  trs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRIX::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float prevEma1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevema1_)));
          set_has_prevema1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_prevEma2;
        break;
      }
      
      // required float prevEma2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prevEma2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevema2_)));
          set_has_prevema2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_prevTr;
        break;
      }
      
      // required float prevTr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prevTr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevtr_)));
          set_has_prevtr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_sumTr;
        break;
      }
      
      // required float sumTr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumTr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumtr_)));
          set_has_sumtr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_trs;
        break;
      }
      
      // repeated float trs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_trs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_trs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_trs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_trs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TRIX::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float prevEma1 = 1;
  if (has_prevema1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->prevema1(), output);
  }
  
  // required float prevEma2 = 2;
  if (has_prevema2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->prevema2(), output);
  }
  
  // required float prevTr = 3;
  if (has_prevtr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->prevtr(), output);
  }
  
  // required float sumTr = 4;
  if (has_sumtr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sumtr(), output);
  }
  
  // repeated float trs = 5;
  for (int i = 0; i < this->trs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->trs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TRIX::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float prevEma1 = 1;
  if (has_prevema1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->prevema1(), target);
  }
  
  // required float prevEma2 = 2;
  if (has_prevema2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->prevema2(), target);
  }
  
  // required float prevTr = 3;
  if (has_prevtr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->prevtr(), target);
  }
  
  // required float sumTr = 4;
  if (has_sumtr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sumtr(), target);
  }
  
  // repeated float trs = 5;
  for (int i = 0; i < this->trs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->trs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TRIX::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float prevEma1 = 1;
    if (has_prevema1()) {
      total_size += 1 + 4;
    }
    
    // required float prevEma2 = 2;
    if (has_prevema2()) {
      total_size += 1 + 4;
    }
    
    // required float prevTr = 3;
    if (has_prevtr()) {
      total_size += 1 + 4;
    }
    
    // required float sumTr = 4;
    if (has_sumtr()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated float trs = 5;
  {
    int data_size = 0;
    data_size = 4 * this->trs_size();
    total_size += 1 * this->trs_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRIX::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRIX* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRIX*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRIX::MergeFrom(const TRIX& from) {
  GOOGLE_CHECK_NE(&from, this);
  trs_.MergeFrom(from.trs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prevema1()) {
      set_prevema1(from.prevema1());
    }
    if (from.has_prevema2()) {
      set_prevema2(from.prevema2());
    }
    if (from.has_prevtr()) {
      set_prevtr(from.prevtr());
    }
    if (from.has_sumtr()) {
      set_sumtr(from.sumtr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRIX::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRIX::CopyFrom(const TRIX& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRIX::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void TRIX::Swap(TRIX* other) {
  if (other != this) {
    std::swap(prevema1_, other->prevema1_);
    std::swap(prevema2_, other->prevema2_);
    std::swap(prevtr_, other->prevtr_);
    std::swap(sumtr_, other->sumtr_);
    trs_.Swap(&other->trs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRIX::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRIX_descriptor_;
  metadata.reflection = TRIX_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZLJC::kPrevLowFieldNumber;
const int ZLJC::kPrevJcsFieldNumber;
const int ZLJC::kSumJcmFieldNumber;
const int ZLJC::kSumJclFieldNumber;
const int ZLJC::kJcmsFieldNumber;
const int ZLJC::kJclsFieldNumber;
#endif  // !_MSC_VER

ZLJC::ZLJC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZLJC::InitAsDefaultInstance() {
}

ZLJC::ZLJC(const ZLJC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZLJC::SharedCtor() {
  _cached_size_ = 0;
  prevlow_ = 0;
  prevjcs_ = 0;
  sumjcm_ = 0;
  sumjcl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZLJC::~ZLJC() {
  SharedDtor();
}

void ZLJC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZLJC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZLJC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZLJC_descriptor_;
}

const ZLJC& ZLJC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

ZLJC* ZLJC::default_instance_ = NULL;

ZLJC* ZLJC::New() const {
  return new ZLJC;
}

void ZLJC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prevlow_ = 0;
    prevjcs_ = 0;
    sumjcm_ = 0;
    sumjcl_ = 0;
  }
  jcms_.Clear();
  jcls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZLJC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float prevLow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevlow_)));
          set_has_prevlow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_prevJcs;
        break;
      }
      
      // required float prevJcs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prevJcs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevjcs_)));
          set_has_prevjcs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_sumJcm;
        break;
      }
      
      // required float sumJcm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumJcm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumjcm_)));
          set_has_sumjcm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_sumJcl;
        break;
      }
      
      // required float sumJcl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumJcl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumjcl_)));
          set_has_sumjcl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_jcms;
        break;
      }
      
      // repeated float jcms = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_jcms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_jcms())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_jcms())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_jcms;
        if (input->ExpectTag(53)) goto parse_jcls;
        break;
      }
      
      // repeated float jcls = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_jcls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_jcls())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_jcls())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_jcls;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZLJC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float prevLow = 1;
  if (has_prevlow()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->prevlow(), output);
  }
  
  // required float prevJcs = 2;
  if (has_prevjcs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->prevjcs(), output);
  }
  
  // required float sumJcm = 3;
  if (has_sumjcm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sumjcm(), output);
  }
  
  // required float sumJcl = 4;
  if (has_sumjcl()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sumjcl(), output);
  }
  
  // repeated float jcms = 5;
  for (int i = 0; i < this->jcms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->jcms(i), output);
  }
  
  // repeated float jcls = 6;
  for (int i = 0; i < this->jcls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->jcls(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZLJC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float prevLow = 1;
  if (has_prevlow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->prevlow(), target);
  }
  
  // required float prevJcs = 2;
  if (has_prevjcs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->prevjcs(), target);
  }
  
  // required float sumJcm = 3;
  if (has_sumjcm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sumjcm(), target);
  }
  
  // required float sumJcl = 4;
  if (has_sumjcl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sumjcl(), target);
  }
  
  // repeated float jcms = 5;
  for (int i = 0; i < this->jcms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->jcms(i), target);
  }
  
  // repeated float jcls = 6;
  for (int i = 0; i < this->jcls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->jcls(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZLJC::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float prevLow = 1;
    if (has_prevlow()) {
      total_size += 1 + 4;
    }
    
    // required float prevJcs = 2;
    if (has_prevjcs()) {
      total_size += 1 + 4;
    }
    
    // required float sumJcm = 3;
    if (has_sumjcm()) {
      total_size += 1 + 4;
    }
    
    // required float sumJcl = 4;
    if (has_sumjcl()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated float jcms = 5;
  {
    int data_size = 0;
    data_size = 4 * this->jcms_size();
    total_size += 1 * this->jcms_size() + data_size;
  }
  
  // repeated float jcls = 6;
  {
    int data_size = 0;
    data_size = 4 * this->jcls_size();
    total_size += 1 * this->jcls_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZLJC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZLJC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZLJC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZLJC::MergeFrom(const ZLJC& from) {
  GOOGLE_CHECK_NE(&from, this);
  jcms_.MergeFrom(from.jcms_);
  jcls_.MergeFrom(from.jcls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prevlow()) {
      set_prevlow(from.prevlow());
    }
    if (from.has_prevjcs()) {
      set_prevjcs(from.prevjcs());
    }
    if (from.has_sumjcm()) {
      set_sumjcm(from.sumjcm());
    }
    if (from.has_sumjcl()) {
      set_sumjcl(from.sumjcl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZLJC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZLJC::CopyFrom(const ZLJC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZLJC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ZLJC::Swap(ZLJC* other) {
  if (other != this) {
    std::swap(prevlow_, other->prevlow_);
    std::swap(prevjcs_, other->prevjcs_);
    std::swap(sumjcm_, other->sumjcm_);
    std::swap(sumjcl_, other->sumjcl_);
    jcms_.Swap(&other->jcms_);
    jcls_.Swap(&other->jcls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZLJC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZLJC_descriptor_;
  metadata.reflection = ZLJC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ASI::kPrevCloseFieldNumber;
const int ASI::kPrevLowFieldNumber;
const int ASI::kPrevOpenFieldNumber;
const int ASI::kSumSiFieldNumber;
const int ASI::kSumAsiFieldNumber;
const int ASI::kSisFieldNumber;
const int ASI::kAsisFieldNumber;
#endif  // !_MSC_VER

ASI::ASI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ASI::InitAsDefaultInstance() {
}

ASI::ASI(const ASI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ASI::SharedCtor() {
  _cached_size_ = 0;
  prevclose_ = 0;
  prevlow_ = 0;
  prevopen_ = 0;
  sumsi_ = 0;
  sumasi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ASI::~ASI() {
  SharedDtor();
}

void ASI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ASI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ASI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ASI_descriptor_;
}

const ASI& ASI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

ASI* ASI::default_instance_ = NULL;

ASI* ASI::New() const {
  return new ASI;
}

void ASI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prevclose_ = 0;
    prevlow_ = 0;
    prevopen_ = 0;
    sumsi_ = 0;
    sumasi_ = 0;
  }
  sis_.Clear();
  asis_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ASI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float prevClose = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevclose_)));
          set_has_prevclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_prevLow;
        break;
      }
      
      // required float prevLow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prevLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevlow_)));
          set_has_prevlow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_prevOpen;
        break;
      }
      
      // required float prevOpen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prevOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevopen_)));
          set_has_prevopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_sumSi;
        break;
      }
      
      // required float sumSi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumSi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumsi_)));
          set_has_sumsi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_sumAsi;
        break;
      }
      
      // required float sumAsi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumAsi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumasi_)));
          set_has_sumasi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_sis;
        break;
      }
      
      // repeated float sis = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_sis())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_sis())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_sis;
        if (input->ExpectTag(61)) goto parse_asis;
        break;
      }
      
      // repeated float asis = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_asis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_asis())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_asis())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_asis;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ASI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float prevClose = 1;
  if (has_prevclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->prevclose(), output);
  }
  
  // required float prevLow = 2;
  if (has_prevlow()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->prevlow(), output);
  }
  
  // required float prevOpen = 3;
  if (has_prevopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->prevopen(), output);
  }
  
  // required float sumSi = 4;
  if (has_sumsi()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sumsi(), output);
  }
  
  // required float sumAsi = 5;
  if (has_sumasi()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->sumasi(), output);
  }
  
  // repeated float sis = 6;
  for (int i = 0; i < this->sis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->sis(i), output);
  }
  
  // repeated float asis = 7;
  for (int i = 0; i < this->asis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->asis(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ASI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float prevClose = 1;
  if (has_prevclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->prevclose(), target);
  }
  
  // required float prevLow = 2;
  if (has_prevlow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->prevlow(), target);
  }
  
  // required float prevOpen = 3;
  if (has_prevopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->prevopen(), target);
  }
  
  // required float sumSi = 4;
  if (has_sumsi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sumsi(), target);
  }
  
  // required float sumAsi = 5;
  if (has_sumasi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->sumasi(), target);
  }
  
  // repeated float sis = 6;
  for (int i = 0; i < this->sis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->sis(i), target);
  }
  
  // repeated float asis = 7;
  for (int i = 0; i < this->asis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->asis(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ASI::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float prevClose = 1;
    if (has_prevclose()) {
      total_size += 1 + 4;
    }
    
    // required float prevLow = 2;
    if (has_prevlow()) {
      total_size += 1 + 4;
    }
    
    // required float prevOpen = 3;
    if (has_prevopen()) {
      total_size += 1 + 4;
    }
    
    // required float sumSi = 4;
    if (has_sumsi()) {
      total_size += 1 + 4;
    }
    
    // required float sumAsi = 5;
    if (has_sumasi()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated float sis = 6;
  {
    int data_size = 0;
    data_size = 4 * this->sis_size();
    total_size += 1 * this->sis_size() + data_size;
  }
  
  // repeated float asis = 7;
  {
    int data_size = 0;
    data_size = 4 * this->asis_size();
    total_size += 1 * this->asis_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ASI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ASI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ASI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ASI::MergeFrom(const ASI& from) {
  GOOGLE_CHECK_NE(&from, this);
  sis_.MergeFrom(from.sis_);
  asis_.MergeFrom(from.asis_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prevclose()) {
      set_prevclose(from.prevclose());
    }
    if (from.has_prevlow()) {
      set_prevlow(from.prevlow());
    }
    if (from.has_prevopen()) {
      set_prevopen(from.prevopen());
    }
    if (from.has_sumsi()) {
      set_sumsi(from.sumsi());
    }
    if (from.has_sumasi()) {
      set_sumasi(from.sumasi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ASI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASI::CopyFrom(const ASI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASI::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void ASI::Swap(ASI* other) {
  if (other != this) {
    std::swap(prevclose_, other->prevclose_);
    std::swap(prevlow_, other->prevlow_);
    std::swap(prevopen_, other->prevopen_);
    std::swap(sumsi_, other->sumsi_);
    std::swap(sumasi_, other->sumasi_);
    sis_.Swap(&other->sis_);
    asis_.Swap(&other->asis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ASI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ASI_descriptor_;
  metadata.reflection = ASI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DMI::kPrevCloseFieldNumber;
const int DMI::kPrevLowFieldNumber;
const int DMI::kPrevHighFieldNumber;
const int DMI::kSumTrFieldNumber;
const int DMI::kMidtrsFieldNumber;
const int DMI::kSumDmpFieldNumber;
const int DMI::kMiddmpsFieldNumber;
const int DMI::kSumDmmFieldNumber;
const int DMI::kMiddmmsFieldNumber;
const int DMI::kSumAdxFieldNumber;
const int DMI::kMidadxsFieldNumber;
const int DMI::kAdxsFieldNumber;
#endif  // !_MSC_VER

DMI::DMI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DMI::InitAsDefaultInstance() {
}

DMI::DMI(const DMI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DMI::SharedCtor() {
  _cached_size_ = 0;
  prevclose_ = 0;
  prevlow_ = 0;
  prevhigh_ = 0;
  sumtr_ = 0;
  sumdmp_ = 0;
  sumdmm_ = 0;
  sumadx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DMI::~DMI() {
  SharedDtor();
}

void DMI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DMI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DMI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DMI_descriptor_;
}

const DMI& DMI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

DMI* DMI::default_instance_ = NULL;

DMI* DMI::New() const {
  return new DMI;
}

void DMI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prevclose_ = 0;
    prevlow_ = 0;
    prevhigh_ = 0;
    sumtr_ = 0;
    sumdmp_ = 0;
    sumdmm_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    sumadx_ = 0;
  }
  midtrs_.Clear();
  middmps_.Clear();
  middmms_.Clear();
  midadxs_.Clear();
  adxs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DMI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float prevClose = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevclose_)));
          set_has_prevclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_prevLow;
        break;
      }
      
      // required float prevLow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prevLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevlow_)));
          set_has_prevlow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_prevHigh;
        break;
      }
      
      // required float prevHigh = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prevHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevhigh_)));
          set_has_prevhigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_sumTr;
        break;
      }
      
      // required float sumTr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumTr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumtr_)));
          set_has_sumtr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_midtrs;
        break;
      }
      
      // repeated float midtrs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_midtrs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_midtrs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_midtrs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_midtrs;
        if (input->ExpectTag(53)) goto parse_sumDmp;
        break;
      }
      
      // required float sumDmp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumDmp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumdmp_)));
          set_has_sumdmp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_middmps;
        break;
      }
      
      // repeated float middmps = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_middmps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_middmps())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_middmps())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_middmps;
        if (input->ExpectTag(69)) goto parse_sumDmm;
        break;
      }
      
      // required float sumDmm = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumDmm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumdmm_)));
          set_has_sumdmm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_middmms;
        break;
      }
      
      // repeated float middmms = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_middmms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77, input, this->mutable_middmms())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_middmms())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_middmms;
        if (input->ExpectTag(85)) goto parse_sumAdx;
        break;
      }
      
      // required float sumAdx = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumAdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumadx_)));
          set_has_sumadx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_midadxs;
        break;
      }
      
      // repeated float midadxs = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_midadxs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 93, input, this->mutable_midadxs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_midadxs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_midadxs;
        if (input->ExpectTag(101)) goto parse_adxs;
        break;
      }
      
      // repeated float adxs = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_adxs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 101, input, this->mutable_adxs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_adxs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_adxs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DMI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float prevClose = 1;
  if (has_prevclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->prevclose(), output);
  }
  
  // required float prevLow = 2;
  if (has_prevlow()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->prevlow(), output);
  }
  
  // required float prevHigh = 3;
  if (has_prevhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->prevhigh(), output);
  }
  
  // required float sumTr = 4;
  if (has_sumtr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sumtr(), output);
  }
  
  // repeated float midtrs = 5;
  for (int i = 0; i < this->midtrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->midtrs(i), output);
  }
  
  // required float sumDmp = 6;
  if (has_sumdmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sumdmp(), output);
  }
  
  // repeated float middmps = 7;
  for (int i = 0; i < this->middmps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->middmps(i), output);
  }
  
  // required float sumDmm = 8;
  if (has_sumdmm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->sumdmm(), output);
  }
  
  // repeated float middmms = 9;
  for (int i = 0; i < this->middmms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->middmms(i), output);
  }
  
  // required float sumAdx = 10;
  if (has_sumadx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->sumadx(), output);
  }
  
  // repeated float midadxs = 11;
  for (int i = 0; i < this->midadxs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      11, this->midadxs(i), output);
  }
  
  // repeated float adxs = 12;
  for (int i = 0; i < this->adxs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      12, this->adxs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DMI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float prevClose = 1;
  if (has_prevclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->prevclose(), target);
  }
  
  // required float prevLow = 2;
  if (has_prevlow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->prevlow(), target);
  }
  
  // required float prevHigh = 3;
  if (has_prevhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->prevhigh(), target);
  }
  
  // required float sumTr = 4;
  if (has_sumtr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sumtr(), target);
  }
  
  // repeated float midtrs = 5;
  for (int i = 0; i < this->midtrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->midtrs(i), target);
  }
  
  // required float sumDmp = 6;
  if (has_sumdmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->sumdmp(), target);
  }
  
  // repeated float middmps = 7;
  for (int i = 0; i < this->middmps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->middmps(i), target);
  }
  
  // required float sumDmm = 8;
  if (has_sumdmm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->sumdmm(), target);
  }
  
  // repeated float middmms = 9;
  for (int i = 0; i < this->middmms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(9, this->middmms(i), target);
  }
  
  // required float sumAdx = 10;
  if (has_sumadx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->sumadx(), target);
  }
  
  // repeated float midadxs = 11;
  for (int i = 0; i < this->midadxs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(11, this->midadxs(i), target);
  }
  
  // repeated float adxs = 12;
  for (int i = 0; i < this->adxs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(12, this->adxs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DMI::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float prevClose = 1;
    if (has_prevclose()) {
      total_size += 1 + 4;
    }
    
    // required float prevLow = 2;
    if (has_prevlow()) {
      total_size += 1 + 4;
    }
    
    // required float prevHigh = 3;
    if (has_prevhigh()) {
      total_size += 1 + 4;
    }
    
    // required float sumTr = 4;
    if (has_sumtr()) {
      total_size += 1 + 4;
    }
    
    // required float sumDmp = 6;
    if (has_sumdmp()) {
      total_size += 1 + 4;
    }
    
    // required float sumDmm = 8;
    if (has_sumdmm()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required float sumAdx = 10;
    if (has_sumadx()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated float midtrs = 5;
  {
    int data_size = 0;
    data_size = 4 * this->midtrs_size();
    total_size += 1 * this->midtrs_size() + data_size;
  }
  
  // repeated float middmps = 7;
  {
    int data_size = 0;
    data_size = 4 * this->middmps_size();
    total_size += 1 * this->middmps_size() + data_size;
  }
  
  // repeated float middmms = 9;
  {
    int data_size = 0;
    data_size = 4 * this->middmms_size();
    total_size += 1 * this->middmms_size() + data_size;
  }
  
  // repeated float midadxs = 11;
  {
    int data_size = 0;
    data_size = 4 * this->midadxs_size();
    total_size += 1 * this->midadxs_size() + data_size;
  }
  
  // repeated float adxs = 12;
  {
    int data_size = 0;
    data_size = 4 * this->adxs_size();
    total_size += 1 * this->adxs_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DMI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DMI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DMI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DMI::MergeFrom(const DMI& from) {
  GOOGLE_CHECK_NE(&from, this);
  midtrs_.MergeFrom(from.midtrs_);
  middmps_.MergeFrom(from.middmps_);
  middmms_.MergeFrom(from.middmms_);
  midadxs_.MergeFrom(from.midadxs_);
  adxs_.MergeFrom(from.adxs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prevclose()) {
      set_prevclose(from.prevclose());
    }
    if (from.has_prevlow()) {
      set_prevlow(from.prevlow());
    }
    if (from.has_prevhigh()) {
      set_prevhigh(from.prevhigh());
    }
    if (from.has_sumtr()) {
      set_sumtr(from.sumtr());
    }
    if (from.has_sumdmp()) {
      set_sumdmp(from.sumdmp());
    }
    if (from.has_sumdmm()) {
      set_sumdmm(from.sumdmm());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_sumadx()) {
      set_sumadx(from.sumadx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DMI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DMI::CopyFrom(const DMI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DMI::IsInitialized() const {
  if ((_has_bits_[0] & 0x000002af) != 0x000002af) return false;
  
  return true;
}

void DMI::Swap(DMI* other) {
  if (other != this) {
    std::swap(prevclose_, other->prevclose_);
    std::swap(prevlow_, other->prevlow_);
    std::swap(prevhigh_, other->prevhigh_);
    std::swap(sumtr_, other->sumtr_);
    midtrs_.Swap(&other->midtrs_);
    std::swap(sumdmp_, other->sumdmp_);
    middmps_.Swap(&other->middmps_);
    std::swap(sumdmm_, other->sumdmm_);
    middmms_.Swap(&other->middmms_);
    std::swap(sumadx_, other->sumadx_);
    midadxs_.Swap(&other->midadxs_);
    adxs_.Swap(&other->adxs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DMI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DMI_descriptor_;
  metadata.reflection = DMI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVT::kPrevCloseFieldNumber;
const int PVT::kPrevPvtFieldNumber;
#endif  // !_MSC_VER

PVT::PVT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVT::InitAsDefaultInstance() {
}

PVT::PVT(const PVT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVT::SharedCtor() {
  _cached_size_ = 0;
  prevclose_ = 0;
  prevpvt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVT::~PVT() {
  SharedDtor();
}

void PVT::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVT_descriptor_;
}

const PVT& PVT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

PVT* PVT::default_instance_ = NULL;

PVT* PVT::New() const {
  return new PVT;
}

void PVT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prevclose_ = 0;
    prevpvt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float prevClose = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevclose_)));
          set_has_prevclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_prevPvt;
        break;
      }
      
      // required double prevPvt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_prevPvt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prevpvt_)));
          set_has_prevpvt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float prevClose = 1;
  if (has_prevclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->prevclose(), output);
  }
  
  // required double prevPvt = 2;
  if (has_prevpvt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->prevpvt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float prevClose = 1;
  if (has_prevclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->prevclose(), target);
  }
  
  // required double prevPvt = 2;
  if (has_prevpvt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->prevpvt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVT::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float prevClose = 1;
    if (has_prevclose()) {
      total_size += 1 + 4;
    }
    
    // required double prevPvt = 2;
    if (has_prevpvt()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVT::MergeFrom(const PVT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prevclose()) {
      set_prevclose(from.prevclose());
    }
    if (from.has_prevpvt()) {
      set_prevpvt(from.prevpvt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVT::CopyFrom(const PVT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PVT::Swap(PVT* other) {
  if (other != this) {
    std::swap(prevclose_, other->prevclose_);
    std::swap(prevpvt_, other->prevpvt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVT_descriptor_;
  metadata.reflection = PVT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBX::kPrevEma1FieldNumber;
const int PBX::kPrevEma2FieldNumber;
const int PBX::kPrevEma3FieldNumber;
const int PBX::kPrevEma4FieldNumber;
const int PBX::kPrevEma5FieldNumber;
const int PBX::kPrevEma6FieldNumber;
const int PBX::kSumShort1FieldNumber;
const int PBX::kSumShort2FieldNumber;
const int PBX::kSumShort3FieldNumber;
const int PBX::kSumShort4FieldNumber;
const int PBX::kSumShort5FieldNumber;
const int PBX::kSumShort6FieldNumber;
const int PBX::kSumLong1FieldNumber;
const int PBX::kSumLong2FieldNumber;
const int PBX::kSumLong3FieldNumber;
const int PBX::kSumLong4FieldNumber;
const int PBX::kSumLong5FieldNumber;
const int PBX::kSumLong6FieldNumber;
#endif  // !_MSC_VER

PBX::PBX()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBX::InitAsDefaultInstance() {
}

PBX::PBX(const PBX& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBX::SharedCtor() {
  _cached_size_ = 0;
  prevema1_ = 0;
  prevema2_ = 0;
  prevema3_ = 0;
  prevema4_ = 0;
  prevema5_ = 0;
  prevema6_ = 0;
  sumshort1_ = 0;
  sumshort2_ = 0;
  sumshort3_ = 0;
  sumshort4_ = 0;
  sumshort5_ = 0;
  sumshort6_ = 0;
  sumlong1_ = 0;
  sumlong2_ = 0;
  sumlong3_ = 0;
  sumlong4_ = 0;
  sumlong5_ = 0;
  sumlong6_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBX::~PBX() {
  SharedDtor();
}

void PBX::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBX::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBX::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBX_descriptor_;
}

const PBX& PBX::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

PBX* PBX::default_instance_ = NULL;

PBX* PBX::New() const {
  return new PBX;
}

void PBX::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prevema1_ = 0;
    prevema2_ = 0;
    prevema3_ = 0;
    prevema4_ = 0;
    prevema5_ = 0;
    prevema6_ = 0;
    sumshort1_ = 0;
    sumshort2_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sumshort3_ = 0;
    sumshort4_ = 0;
    sumshort5_ = 0;
    sumshort6_ = 0;
    sumlong1_ = 0;
    sumlong2_ = 0;
    sumlong3_ = 0;
    sumlong4_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    sumlong5_ = 0;
    sumlong6_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBX::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float prevEma1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevema1_)));
          set_has_prevema1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_prevEma2;
        break;
      }
      
      // required float prevEma2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prevEma2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevema2_)));
          set_has_prevema2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_prevEma3;
        break;
      }
      
      // required float prevEma3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prevEma3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevema3_)));
          set_has_prevema3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_prevEma4;
        break;
      }
      
      // required float prevEma4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prevEma4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevema4_)));
          set_has_prevema4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_prevEma5;
        break;
      }
      
      // required float prevEma5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prevEma5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevema5_)));
          set_has_prevema5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_prevEma6;
        break;
      }
      
      // required float prevEma6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prevEma6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prevema6_)));
          set_has_prevema6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_sumShort1;
        break;
      }
      
      // required float sumShort1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumShort1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumshort1_)));
          set_has_sumshort1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_sumShort2;
        break;
      }
      
      // required float sumShort2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumShort2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumshort2_)));
          set_has_sumshort2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_sumShort3;
        break;
      }
      
      // required float sumShort3 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumShort3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumshort3_)));
          set_has_sumshort3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_sumShort4;
        break;
      }
      
      // required float sumShort4 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumShort4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumshort4_)));
          set_has_sumshort4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_sumShort5;
        break;
      }
      
      // required float sumShort5 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumShort5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumshort5_)));
          set_has_sumshort5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_sumShort6;
        break;
      }
      
      // required float sumShort6 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumShort6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumshort6_)));
          set_has_sumshort6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_sumLong1;
        break;
      }
      
      // required float sumLong1 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumLong1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumlong1_)));
          set_has_sumlong1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_sumLong2;
        break;
      }
      
      // required float sumLong2 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumLong2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumlong2_)));
          set_has_sumlong2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_sumLong3;
        break;
      }
      
      // required float sumLong3 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumLong3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumlong3_)));
          set_has_sumlong3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_sumLong4;
        break;
      }
      
      // required float sumLong4 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumLong4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumlong4_)));
          set_has_sumlong4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_sumLong5;
        break;
      }
      
      // required float sumLong5 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumLong5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumlong5_)));
          set_has_sumlong5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_sumLong6;
        break;
      }
      
      // required float sumLong6 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sumLong6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sumlong6_)));
          set_has_sumlong6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBX::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float prevEma1 = 1;
  if (has_prevema1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->prevema1(), output);
  }
  
  // required float prevEma2 = 2;
  if (has_prevema2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->prevema2(), output);
  }
  
  // required float prevEma3 = 3;
  if (has_prevema3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->prevema3(), output);
  }
  
  // required float prevEma4 = 4;
  if (has_prevema4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->prevema4(), output);
  }
  
  // required float prevEma5 = 5;
  if (has_prevema5()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->prevema5(), output);
  }
  
  // required float prevEma6 = 6;
  if (has_prevema6()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->prevema6(), output);
  }
  
  // required float sumShort1 = 7;
  if (has_sumshort1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->sumshort1(), output);
  }
  
  // required float sumShort2 = 8;
  if (has_sumshort2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->sumshort2(), output);
  }
  
  // required float sumShort3 = 9;
  if (has_sumshort3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->sumshort3(), output);
  }
  
  // required float sumShort4 = 10;
  if (has_sumshort4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->sumshort4(), output);
  }
  
  // required float sumShort5 = 11;
  if (has_sumshort5()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->sumshort5(), output);
  }
  
  // required float sumShort6 = 12;
  if (has_sumshort6()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->sumshort6(), output);
  }
  
  // required float sumLong1 = 13;
  if (has_sumlong1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->sumlong1(), output);
  }
  
  // required float sumLong2 = 14;
  if (has_sumlong2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->sumlong2(), output);
  }
  
  // required float sumLong3 = 15;
  if (has_sumlong3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->sumlong3(), output);
  }
  
  // required float sumLong4 = 16;
  if (has_sumlong4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->sumlong4(), output);
  }
  
  // required float sumLong5 = 17;
  if (has_sumlong5()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->sumlong5(), output);
  }
  
  // required float sumLong6 = 18;
  if (has_sumlong6()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->sumlong6(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBX::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float prevEma1 = 1;
  if (has_prevema1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->prevema1(), target);
  }
  
  // required float prevEma2 = 2;
  if (has_prevema2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->prevema2(), target);
  }
  
  // required float prevEma3 = 3;
  if (has_prevema3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->prevema3(), target);
  }
  
  // required float prevEma4 = 4;
  if (has_prevema4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->prevema4(), target);
  }
  
  // required float prevEma5 = 5;
  if (has_prevema5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->prevema5(), target);
  }
  
  // required float prevEma6 = 6;
  if (has_prevema6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->prevema6(), target);
  }
  
  // required float sumShort1 = 7;
  if (has_sumshort1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->sumshort1(), target);
  }
  
  // required float sumShort2 = 8;
  if (has_sumshort2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->sumshort2(), target);
  }
  
  // required float sumShort3 = 9;
  if (has_sumshort3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->sumshort3(), target);
  }
  
  // required float sumShort4 = 10;
  if (has_sumshort4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->sumshort4(), target);
  }
  
  // required float sumShort5 = 11;
  if (has_sumshort5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->sumshort5(), target);
  }
  
  // required float sumShort6 = 12;
  if (has_sumshort6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->sumshort6(), target);
  }
  
  // required float sumLong1 = 13;
  if (has_sumlong1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->sumlong1(), target);
  }
  
  // required float sumLong2 = 14;
  if (has_sumlong2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->sumlong2(), target);
  }
  
  // required float sumLong3 = 15;
  if (has_sumlong3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->sumlong3(), target);
  }
  
  // required float sumLong4 = 16;
  if (has_sumlong4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->sumlong4(), target);
  }
  
  // required float sumLong5 = 17;
  if (has_sumlong5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->sumlong5(), target);
  }
  
  // required float sumLong6 = 18;
  if (has_sumlong6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->sumlong6(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBX::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float prevEma1 = 1;
    if (has_prevema1()) {
      total_size += 1 + 4;
    }
    
    // required float prevEma2 = 2;
    if (has_prevema2()) {
      total_size += 1 + 4;
    }
    
    // required float prevEma3 = 3;
    if (has_prevema3()) {
      total_size += 1 + 4;
    }
    
    // required float prevEma4 = 4;
    if (has_prevema4()) {
      total_size += 1 + 4;
    }
    
    // required float prevEma5 = 5;
    if (has_prevema5()) {
      total_size += 1 + 4;
    }
    
    // required float prevEma6 = 6;
    if (has_prevema6()) {
      total_size += 1 + 4;
    }
    
    // required float sumShort1 = 7;
    if (has_sumshort1()) {
      total_size += 1 + 4;
    }
    
    // required float sumShort2 = 8;
    if (has_sumshort2()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float sumShort3 = 9;
    if (has_sumshort3()) {
      total_size += 1 + 4;
    }
    
    // required float sumShort4 = 10;
    if (has_sumshort4()) {
      total_size += 1 + 4;
    }
    
    // required float sumShort5 = 11;
    if (has_sumshort5()) {
      total_size += 1 + 4;
    }
    
    // required float sumShort6 = 12;
    if (has_sumshort6()) {
      total_size += 1 + 4;
    }
    
    // required float sumLong1 = 13;
    if (has_sumlong1()) {
      total_size += 1 + 4;
    }
    
    // required float sumLong2 = 14;
    if (has_sumlong2()) {
      total_size += 1 + 4;
    }
    
    // required float sumLong3 = 15;
    if (has_sumlong3()) {
      total_size += 1 + 4;
    }
    
    // required float sumLong4 = 16;
    if (has_sumlong4()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required float sumLong5 = 17;
    if (has_sumlong5()) {
      total_size += 2 + 4;
    }
    
    // required float sumLong6 = 18;
    if (has_sumlong6()) {
      total_size += 2 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBX::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBX* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBX*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBX::MergeFrom(const PBX& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prevema1()) {
      set_prevema1(from.prevema1());
    }
    if (from.has_prevema2()) {
      set_prevema2(from.prevema2());
    }
    if (from.has_prevema3()) {
      set_prevema3(from.prevema3());
    }
    if (from.has_prevema4()) {
      set_prevema4(from.prevema4());
    }
    if (from.has_prevema5()) {
      set_prevema5(from.prevema5());
    }
    if (from.has_prevema6()) {
      set_prevema6(from.prevema6());
    }
    if (from.has_sumshort1()) {
      set_sumshort1(from.sumshort1());
    }
    if (from.has_sumshort2()) {
      set_sumshort2(from.sumshort2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sumshort3()) {
      set_sumshort3(from.sumshort3());
    }
    if (from.has_sumshort4()) {
      set_sumshort4(from.sumshort4());
    }
    if (from.has_sumshort5()) {
      set_sumshort5(from.sumshort5());
    }
    if (from.has_sumshort6()) {
      set_sumshort6(from.sumshort6());
    }
    if (from.has_sumlong1()) {
      set_sumlong1(from.sumlong1());
    }
    if (from.has_sumlong2()) {
      set_sumlong2(from.sumlong2());
    }
    if (from.has_sumlong3()) {
      set_sumlong3(from.sumlong3());
    }
    if (from.has_sumlong4()) {
      set_sumlong4(from.sumlong4());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sumlong5()) {
      set_sumlong5(from.sumlong5());
    }
    if (from.has_sumlong6()) {
      set_sumlong6(from.sumlong6());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBX::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBX::CopyFrom(const PBX& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBX::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;
  
  return true;
}

void PBX::Swap(PBX* other) {
  if (other != this) {
    std::swap(prevema1_, other->prevema1_);
    std::swap(prevema2_, other->prevema2_);
    std::swap(prevema3_, other->prevema3_);
    std::swap(prevema4_, other->prevema4_);
    std::swap(prevema5_, other->prevema5_);
    std::swap(prevema6_, other->prevema6_);
    std::swap(sumshort1_, other->sumshort1_);
    std::swap(sumshort2_, other->sumshort2_);
    std::swap(sumshort3_, other->sumshort3_);
    std::swap(sumshort4_, other->sumshort4_);
    std::swap(sumshort5_, other->sumshort5_);
    std::swap(sumshort6_, other->sumshort6_);
    std::swap(sumlong1_, other->sumlong1_);
    std::swap(sumlong2_, other->sumlong2_);
    std::swap(sumlong3_, other->sumlong3_);
    std::swap(sumlong4_, other->sumlong4_);
    std::swap(sumlong5_, other->sumlong5_);
    std::swap(sumlong6_, other->sumlong6_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBX::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBX_descriptor_;
  metadata.reflection = PBX_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SKDJ::kHhvFieldNumber;
const int SKDJ::kLlvFieldNumber;
const int SKDJ::kHhvsFieldNumber;
const int SKDJ::kLlvsFieldNumber;
const int SKDJ::kKFieldNumber;
const int SKDJ::kDFieldNumber;
const int SKDJ::kFastkFieldNumber;
#endif  // !_MSC_VER

SKDJ::SKDJ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SKDJ::InitAsDefaultInstance() {
}

SKDJ::SKDJ(const SKDJ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SKDJ::SharedCtor() {
  _cached_size_ = 0;
  hhv_ = 0;
  llv_ = 0;
  k_ = 0;
  d_ = 0;
  fastk_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SKDJ::~SKDJ() {
  SharedDtor();
}

void SKDJ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SKDJ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SKDJ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SKDJ_descriptor_;
}

const SKDJ& SKDJ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

SKDJ* SKDJ::default_instance_ = NULL;

SKDJ* SKDJ::New() const {
  return new SKDJ;
}

void SKDJ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hhv_ = 0;
    llv_ = 0;
    k_ = 0;
    d_ = 0;
    fastk_ = 0;
  }
  hhvs_.Clear();
  llvs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SKDJ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float hhv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hhv_)));
          set_has_hhv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_llv;
        break;
      }
      
      // required float llv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_llv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &llv_)));
          set_has_llv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_hhvs;
        break;
      }
      
      // repeated float hhvs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hhvs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_hhvs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_hhvs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_hhvs;
        if (input->ExpectTag(37)) goto parse_llvs;
        break;
      }
      
      // repeated float llvs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_llvs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_llvs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_llvs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_llvs;
        if (input->ExpectTag(45)) goto parse_k;
        break;
      }
      
      // required float k = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_d;
        break;
      }
      
      // required float d = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &d_)));
          set_has_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_fastk;
        break;
      }
      
      // required float fastk = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fastk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fastk_)));
          set_has_fastk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SKDJ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float hhv = 1;
  if (has_hhv()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->hhv(), output);
  }
  
  // required float llv = 2;
  if (has_llv()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->llv(), output);
  }
  
  // repeated float hhvs = 3;
  for (int i = 0; i < this->hhvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->hhvs(i), output);
  }
  
  // repeated float llvs = 4;
  for (int i = 0; i < this->llvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->llvs(i), output);
  }
  
  // required float k = 5;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->k(), output);
  }
  
  // required float d = 6;
  if (has_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->d(), output);
  }
  
  // required float fastk = 7;
  if (has_fastk()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fastk(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SKDJ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float hhv = 1;
  if (has_hhv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->hhv(), target);
  }
  
  // required float llv = 2;
  if (has_llv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->llv(), target);
  }
  
  // repeated float hhvs = 3;
  for (int i = 0; i < this->hhvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->hhvs(i), target);
  }
  
  // repeated float llvs = 4;
  for (int i = 0; i < this->llvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->llvs(i), target);
  }
  
  // required float k = 5;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->k(), target);
  }
  
  // required float d = 6;
  if (has_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->d(), target);
  }
  
  // required float fastk = 7;
  if (has_fastk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fastk(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SKDJ::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float hhv = 1;
    if (has_hhv()) {
      total_size += 1 + 4;
    }
    
    // required float llv = 2;
    if (has_llv()) {
      total_size += 1 + 4;
    }
    
    // required float k = 5;
    if (has_k()) {
      total_size += 1 + 4;
    }
    
    // required float d = 6;
    if (has_d()) {
      total_size += 1 + 4;
    }
    
    // required float fastk = 7;
    if (has_fastk()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated float hhvs = 3;
  {
    int data_size = 0;
    data_size = 4 * this->hhvs_size();
    total_size += 1 * this->hhvs_size() + data_size;
  }
  
  // repeated float llvs = 4;
  {
    int data_size = 0;
    data_size = 4 * this->llvs_size();
    total_size += 1 * this->llvs_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SKDJ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SKDJ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SKDJ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SKDJ::MergeFrom(const SKDJ& from) {
  GOOGLE_CHECK_NE(&from, this);
  hhvs_.MergeFrom(from.hhvs_);
  llvs_.MergeFrom(from.llvs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hhv()) {
      set_hhv(from.hhv());
    }
    if (from.has_llv()) {
      set_llv(from.llv());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_d()) {
      set_d(from.d());
    }
    if (from.has_fastk()) {
      set_fastk(from.fastk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SKDJ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKDJ::CopyFrom(const SKDJ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKDJ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000073) != 0x00000073) return false;
  
  return true;
}

void SKDJ::Swap(SKDJ* other) {
  if (other != this) {
    std::swap(hhv_, other->hhv_);
    std::swap(llv_, other->llv_);
    hhvs_.Swap(&other->hhvs_);
    llvs_.Swap(&other->llvs_);
    std::swap(k_, other->k_);
    std::swap(d_, other->d_);
    std::swap(fastk_, other->fastk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SKDJ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SKDJ_descriptor_;
  metadata.reflection = SKDJ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MIDVAL::kDateFieldNumber;
const int MIDVAL::kOpenFieldNumber;
const int MIDVAL::kHighFieldNumber;
const int MIDVAL::kLowFieldNumber;
const int MIDVAL::kCloseFieldNumber;
const int MIDVAL::kZjcjFieldNumber;
const int MIDVAL::kCjslFieldNumber;
const int MIDVAL::kCjjeFieldNumber;
#endif  // !_MSC_VER

MIDVAL::MIDVAL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MIDVAL::InitAsDefaultInstance() {
}

MIDVAL::MIDVAL(const MIDVAL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MIDVAL::SharedCtor() {
  _cached_size_ = 0;
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  zjcj_ = 0;
  cjsl_ = 0;
  cjje_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MIDVAL::~MIDVAL() {
  SharedDtor();
}

void MIDVAL::SharedDtor() {
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (this != default_instance_) {
  }
}

void MIDVAL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MIDVAL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MIDVAL_descriptor_;
}

const MIDVAL& MIDVAL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

MIDVAL* MIDVAL::default_instance_ = NULL;

MIDVAL* MIDVAL::New() const {
  return new MIDVAL;
}

void MIDVAL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::kEmptyString) {
        date_->clear();
      }
    }
    open_ = 0;
    high_ = 0;
    low_ = 0;
    close_ = 0;
    zjcj_ = 0;
    cjsl_ = 0;
    cjje_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MIDVAL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_open;
        break;
      }
      
      // required float open = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_high;
        break;
      }
      
      // required float high = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_low;
        break;
      }
      
      // required float low = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_close;
        break;
      }
      
      // required float close = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_zjcj;
        break;
      }
      
      // required float zjcj = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zjcj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zjcj_)));
          set_has_zjcj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_cjsl;
        break;
      }
      
      // required double cjsl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cjsl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cjsl_)));
          set_has_cjsl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_cjje;
        break;
      }
      
      // required double cjje = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cjje:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cjje_)));
          set_has_cjje();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MIDVAL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->date(), output);
  }
  
  // required float open = 2;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->open(), output);
  }
  
  // required float high = 3;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->high(), output);
  }
  
  // required float low = 4;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->low(), output);
  }
  
  // required float close = 5;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->close(), output);
  }
  
  // required float zjcj = 6;
  if (has_zjcj()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->zjcj(), output);
  }
  
  // required double cjsl = 7;
  if (has_cjsl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->cjsl(), output);
  }
  
  // required double cjje = 8;
  if (has_cjje()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->cjje(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MIDVAL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->date(), target);
  }
  
  // required float open = 2;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->open(), target);
  }
  
  // required float high = 3;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->high(), target);
  }
  
  // required float low = 4;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->low(), target);
  }
  
  // required float close = 5;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->close(), target);
  }
  
  // required float zjcj = 6;
  if (has_zjcj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->zjcj(), target);
  }
  
  // required double cjsl = 7;
  if (has_cjsl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->cjsl(), target);
  }
  
  // required double cjje = 8;
  if (has_cjje()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->cjje(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MIDVAL::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }
    
    // required float open = 2;
    if (has_open()) {
      total_size += 1 + 4;
    }
    
    // required float high = 3;
    if (has_high()) {
      total_size += 1 + 4;
    }
    
    // required float low = 4;
    if (has_low()) {
      total_size += 1 + 4;
    }
    
    // required float close = 5;
    if (has_close()) {
      total_size += 1 + 4;
    }
    
    // required float zjcj = 6;
    if (has_zjcj()) {
      total_size += 1 + 4;
    }
    
    // required double cjsl = 7;
    if (has_cjsl()) {
      total_size += 1 + 8;
    }
    
    // required double cjje = 8;
    if (has_cjje()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MIDVAL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MIDVAL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MIDVAL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MIDVAL::MergeFrom(const MIDVAL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_zjcj()) {
      set_zjcj(from.zjcj());
    }
    if (from.has_cjsl()) {
      set_cjsl(from.cjsl());
    }
    if (from.has_cjje()) {
      set_cjje(from.cjje());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MIDVAL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MIDVAL::CopyFrom(const MIDVAL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MIDVAL::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void MIDVAL::Swap(MIDVAL* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(close_, other->close_);
    std::swap(zjcj_, other->zjcj_);
    std::swap(cjsl_, other->cjsl_);
    std::swap(cjje_, other->cjje_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MIDVAL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MIDVAL_descriptor_;
  metadata.reflection = MIDVAL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KLINEIDX::kDateFieldNumber;
const int KLINEIDX::kOffsetFieldNumber;
#endif  // !_MSC_VER

KLINEIDX::KLINEIDX()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KLINEIDX::InitAsDefaultInstance() {
}

KLINEIDX::KLINEIDX(const KLINEIDX& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KLINEIDX::SharedCtor() {
  _cached_size_ = 0;
  date_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KLINEIDX::~KLINEIDX() {
  SharedDtor();
}

void KLINEIDX::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KLINEIDX::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KLINEIDX::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KLINEIDX_descriptor_;
}

const KLINEIDX& KLINEIDX::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

KLINEIDX* KLINEIDX::default_instance_ = NULL;

KLINEIDX* KLINEIDX::New() const {
  return new KLINEIDX;
}

void KLINEIDX::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    date_ = 0;
    offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KLINEIDX::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }
      
      // required int32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KLINEIDX::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->date(), output);
  }
  
  // required int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KLINEIDX::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 date = 1;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->date(), target);
  }
  
  // required int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KLINEIDX::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }
    
    // required int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KLINEIDX::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KLINEIDX* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KLINEIDX*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KLINEIDX::MergeFrom(const KLINEIDX& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KLINEIDX::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KLINEIDX::CopyFrom(const KLINEIDX& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KLINEIDX::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void KLINEIDX::Swap(KLINEIDX* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KLINEIDX::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KLINEIDX_descriptor_;
  metadata.reflection = KLINEIDX_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEMP::kMaFieldNumber;
const int TEMP::kMacdFieldNumber;
const int TEMP::kCciFieldNumber;
const int TEMP::kBiasFieldNumber;
const int TEMP::kKdjFieldNumber;
const int TEMP::kRsiFieldNumber;
const int TEMP::kObvFieldNumber;
const int TEMP::kBollFieldNumber;
const int TEMP::kPsyFieldNumber;
const int TEMP::kRocFieldNumber;
const int TEMP::kWrFieldNumber;
const int TEMP::kVrFieldNumber;
const int TEMP::kArbrFieldNumber;
const int TEMP::kCrFieldNumber;
const int TEMP::kCdpFieldNumber;
const int TEMP::kDmaFieldNumber;
const int TEMP::kMtmFieldNumber;
const int TEMP::kBbiFieldNumber;
const int TEMP::kTrixFieldNumber;
const int TEMP::kZljcFieldNumber;
const int TEMP::kAsiFieldNumber;
const int TEMP::kEmaFieldNumber;
const int TEMP::kDmiFieldNumber;
const int TEMP::kPvtFieldNumber;
const int TEMP::kPbxFieldNumber;
const int TEMP::kSkdjFieldNumber;
const int TEMP::kFileFieldNumber;
const int TEMP::kQuotetimeFieldNumber;
const int TEMP::kMidvalFieldNumber;
const int TEMP::kLinenumFieldNumber;
const int TEMP::kKlineIdxFieldNumber;
#endif  // !_MSC_VER

TEMP::TEMP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TEMP::InitAsDefaultInstance() {
  ma_ = const_cast< ::cssweb::kline::mid::MA*>(&::cssweb::kline::mid::MA::default_instance());
  macd_ = const_cast< ::cssweb::kline::mid::MACD*>(&::cssweb::kline::mid::MACD::default_instance());
  cci_ = const_cast< ::cssweb::kline::mid::CCI*>(&::cssweb::kline::mid::CCI::default_instance());
  bias_ = const_cast< ::cssweb::kline::mid::BIAS*>(&::cssweb::kline::mid::BIAS::default_instance());
  kdj_ = const_cast< ::cssweb::kline::mid::KDJ*>(&::cssweb::kline::mid::KDJ::default_instance());
  rsi_ = const_cast< ::cssweb::kline::mid::RSI*>(&::cssweb::kline::mid::RSI::default_instance());
  obv_ = const_cast< ::cssweb::kline::mid::OBV*>(&::cssweb::kline::mid::OBV::default_instance());
  boll_ = const_cast< ::cssweb::kline::mid::BOLL*>(&::cssweb::kline::mid::BOLL::default_instance());
  psy_ = const_cast< ::cssweb::kline::mid::PSY*>(&::cssweb::kline::mid::PSY::default_instance());
  roc_ = const_cast< ::cssweb::kline::mid::ROC*>(&::cssweb::kline::mid::ROC::default_instance());
  wr_ = const_cast< ::cssweb::kline::mid::WR*>(&::cssweb::kline::mid::WR::default_instance());
  vr_ = const_cast< ::cssweb::kline::mid::VR*>(&::cssweb::kline::mid::VR::default_instance());
  arbr_ = const_cast< ::cssweb::kline::mid::ARBR*>(&::cssweb::kline::mid::ARBR::default_instance());
  cr_ = const_cast< ::cssweb::kline::mid::CR*>(&::cssweb::kline::mid::CR::default_instance());
  cdp_ = const_cast< ::cssweb::kline::mid::CDP*>(&::cssweb::kline::mid::CDP::default_instance());
  dma_ = const_cast< ::cssweb::kline::mid::DMA*>(&::cssweb::kline::mid::DMA::default_instance());
  mtm_ = const_cast< ::cssweb::kline::mid::MTM*>(&::cssweb::kline::mid::MTM::default_instance());
  bbi_ = const_cast< ::cssweb::kline::mid::BBI*>(&::cssweb::kline::mid::BBI::default_instance());
  trix_ = const_cast< ::cssweb::kline::mid::TRIX*>(&::cssweb::kline::mid::TRIX::default_instance());
  zljc_ = const_cast< ::cssweb::kline::mid::ZLJC*>(&::cssweb::kline::mid::ZLJC::default_instance());
  asi_ = const_cast< ::cssweb::kline::mid::ASI*>(&::cssweb::kline::mid::ASI::default_instance());
  ema_ = const_cast< ::cssweb::kline::mid::EXPMA*>(&::cssweb::kline::mid::EXPMA::default_instance());
  dmi_ = const_cast< ::cssweb::kline::mid::DMI*>(&::cssweb::kline::mid::DMI::default_instance());
  pvt_ = const_cast< ::cssweb::kline::mid::PVT*>(&::cssweb::kline::mid::PVT::default_instance());
  pbx_ = const_cast< ::cssweb::kline::mid::PBX*>(&::cssweb::kline::mid::PBX::default_instance());
  skdj_ = const_cast< ::cssweb::kline::mid::SKDJ*>(&::cssweb::kline::mid::SKDJ::default_instance());
  midval_ = const_cast< ::cssweb::kline::mid::MIDVAL*>(&::cssweb::kline::mid::MIDVAL::default_instance());
}

TEMP::TEMP(const TEMP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TEMP::SharedCtor() {
  _cached_size_ = 0;
  ma_ = NULL;
  macd_ = NULL;
  cci_ = NULL;
  bias_ = NULL;
  kdj_ = NULL;
  rsi_ = NULL;
  obv_ = NULL;
  boll_ = NULL;
  psy_ = NULL;
  roc_ = NULL;
  wr_ = NULL;
  vr_ = NULL;
  arbr_ = NULL;
  cr_ = NULL;
  cdp_ = NULL;
  dma_ = NULL;
  mtm_ = NULL;
  bbi_ = NULL;
  trix_ = NULL;
  zljc_ = NULL;
  asi_ = NULL;
  ema_ = NULL;
  dmi_ = NULL;
  pvt_ = NULL;
  pbx_ = NULL;
  skdj_ = NULL;
  file_ = 0;
  quotetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  midval_ = NULL;
  linenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEMP::~TEMP() {
  SharedDtor();
}

void TEMP::SharedDtor() {
  if (quotetime_ != &::google::protobuf::internal::kEmptyString) {
    delete quotetime_;
  }
  if (this != default_instance_) {
    delete ma_;
    delete macd_;
    delete cci_;
    delete bias_;
    delete kdj_;
    delete rsi_;
    delete obv_;
    delete boll_;
    delete psy_;
    delete roc_;
    delete wr_;
    delete vr_;
    delete arbr_;
    delete cr_;
    delete cdp_;
    delete dma_;
    delete mtm_;
    delete bbi_;
    delete trix_;
    delete zljc_;
    delete asi_;
    delete ema_;
    delete dmi_;
    delete pvt_;
    delete pbx_;
    delete skdj_;
    delete midval_;
  }
}

void TEMP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEMP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEMP_descriptor_;
}

const TEMP& TEMP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idxtemp_2eproto();  return *default_instance_;
}

TEMP* TEMP::default_instance_ = NULL;

TEMP* TEMP::New() const {
  return new TEMP;
}

void TEMP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ma()) {
      if (ma_ != NULL) ma_->::cssweb::kline::mid::MA::Clear();
    }
    if (has_macd()) {
      if (macd_ != NULL) macd_->::cssweb::kline::mid::MACD::Clear();
    }
    if (has_cci()) {
      if (cci_ != NULL) cci_->::cssweb::kline::mid::CCI::Clear();
    }
    if (has_bias()) {
      if (bias_ != NULL) bias_->::cssweb::kline::mid::BIAS::Clear();
    }
    if (has_kdj()) {
      if (kdj_ != NULL) kdj_->::cssweb::kline::mid::KDJ::Clear();
    }
    if (has_rsi()) {
      if (rsi_ != NULL) rsi_->::cssweb::kline::mid::RSI::Clear();
    }
    if (has_obv()) {
      if (obv_ != NULL) obv_->::cssweb::kline::mid::OBV::Clear();
    }
    if (has_boll()) {
      if (boll_ != NULL) boll_->::cssweb::kline::mid::BOLL::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_psy()) {
      if (psy_ != NULL) psy_->::cssweb::kline::mid::PSY::Clear();
    }
    if (has_roc()) {
      if (roc_ != NULL) roc_->::cssweb::kline::mid::ROC::Clear();
    }
    if (has_wr()) {
      if (wr_ != NULL) wr_->::cssweb::kline::mid::WR::Clear();
    }
    if (has_vr()) {
      if (vr_ != NULL) vr_->::cssweb::kline::mid::VR::Clear();
    }
    if (has_arbr()) {
      if (arbr_ != NULL) arbr_->::cssweb::kline::mid::ARBR::Clear();
    }
    if (has_cr()) {
      if (cr_ != NULL) cr_->::cssweb::kline::mid::CR::Clear();
    }
    if (has_cdp()) {
      if (cdp_ != NULL) cdp_->::cssweb::kline::mid::CDP::Clear();
    }
    if (has_dma()) {
      if (dma_ != NULL) dma_->::cssweb::kline::mid::DMA::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_mtm()) {
      if (mtm_ != NULL) mtm_->::cssweb::kline::mid::MTM::Clear();
    }
    if (has_bbi()) {
      if (bbi_ != NULL) bbi_->::cssweb::kline::mid::BBI::Clear();
    }
    if (has_trix()) {
      if (trix_ != NULL) trix_->::cssweb::kline::mid::TRIX::Clear();
    }
    if (has_zljc()) {
      if (zljc_ != NULL) zljc_->::cssweb::kline::mid::ZLJC::Clear();
    }
    if (has_asi()) {
      if (asi_ != NULL) asi_->::cssweb::kline::mid::ASI::Clear();
    }
    if (has_ema()) {
      if (ema_ != NULL) ema_->::cssweb::kline::mid::EXPMA::Clear();
    }
    if (has_dmi()) {
      if (dmi_ != NULL) dmi_->::cssweb::kline::mid::DMI::Clear();
    }
    if (has_pvt()) {
      if (pvt_ != NULL) pvt_->::cssweb::kline::mid::PVT::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_pbx()) {
      if (pbx_ != NULL) pbx_->::cssweb::kline::mid::PBX::Clear();
    }
    if (has_skdj()) {
      if (skdj_ != NULL) skdj_->::cssweb::kline::mid::SKDJ::Clear();
    }
    file_ = 0;
    if (has_quotetime()) {
      if (quotetime_ != &::google::protobuf::internal::kEmptyString) {
        quotetime_->clear();
      }
    }
    if (has_midval()) {
      if (midval_ != NULL) midval_->::cssweb::kline::mid::MIDVAL::Clear();
    }
    linenum_ = 0;
  }
  klineidx_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEMP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cssweb.kline.mid.MA ma = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ma()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_macd;
        break;
      }
      
      // optional .cssweb.kline.mid.MACD macd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_macd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_macd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cci;
        break;
      }
      
      // optional .cssweb.kline.mid.CCI cci = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cci:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cci()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bias;
        break;
      }
      
      // optional .cssweb.kline.mid.BIAS bias = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_kdj;
        break;
      }
      
      // optional .cssweb.kline.mid.KDJ kdj = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kdj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kdj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rsi;
        break;
      }
      
      // optional .cssweb.kline.mid.RSI rsi = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rsi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_obv;
        break;
      }
      
      // optional .cssweb.kline.mid.OBV obv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_boll;
        break;
      }
      
      // optional .cssweb.kline.mid.BOLL boll = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_psy;
        break;
      }
      
      // optional .cssweb.kline.mid.PSY psy = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_psy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_roc;
        break;
      }
      
      // optional .cssweb.kline.mid.ROC roc = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_wr;
        break;
      }
      
      // optional .cssweb.kline.mid.WR wr = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_vr;
        break;
      }
      
      // optional .cssweb.kline.mid.VR vr = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_arbr;
        break;
      }
      
      // optional .cssweb.kline.mid.ARBR arbr = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arbr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arbr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_cr;
        break;
      }
      
      // optional .cssweb.kline.mid.CR cr = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_cdp;
        break;
      }
      
      // optional .cssweb.kline.mid.CDP cdp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cdp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cdp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_dma;
        break;
      }
      
      // optional .cssweb.kline.mid.DMA dma = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dma:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dma()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_mtm;
        break;
      }
      
      // optional .cssweb.kline.mid.MTM mtm = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mtm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mtm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_bbi;
        break;
      }
      
      // optional .cssweb.kline.mid.BBI bbi = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bbi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bbi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_trix;
        break;
      }
      
      // optional .cssweb.kline.mid.TRIX trix = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_zljc;
        break;
      }
      
      // optional .cssweb.kline.mid.ZLJC zljc = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zljc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zljc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_asi;
        break;
      }
      
      // optional .cssweb.kline.mid.ASI asi = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_asi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_ema;
        break;
      }
      
      // optional .cssweb.kline.mid.EXPMA ema = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_dmi;
        break;
      }
      
      // optional .cssweb.kline.mid.DMI dmi = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dmi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dmi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_pvt;
        break;
      }
      
      // optional .cssweb.kline.mid.PVT pvt = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_pbx;
        break;
      }
      
      // optional .cssweb.kline.mid.PBX pbx = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_skdj;
        break;
      }
      
      // optional .cssweb.kline.mid.SKDJ skdj = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skdj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skdj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_file;
        break;
      }
      
      // optional int32 file = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_)));
          set_has_file();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_quotetime;
        break;
      }
      
      // optional string quotetime = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quotetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quotetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->quotetime().data(), this->quotetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_midval;
        break;
      }
      
      // optional .cssweb.kline.mid.MIDVAL midval = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_midval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_midval()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_linenum;
        break;
      }
      
      // optional int32 linenum = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_linenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linenum_)));
          set_has_linenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_klineIdx;
        break;
      }
      
      // repeated .cssweb.kline.mid.KLINEIDX klineIdx = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_klineIdx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_klineidx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_klineIdx;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TEMP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cssweb.kline.mid.MA ma = 1;
  if (has_ma()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ma(), output);
  }
  
  // optional .cssweb.kline.mid.MACD macd = 2;
  if (has_macd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->macd(), output);
  }
  
  // optional .cssweb.kline.mid.CCI cci = 3;
  if (has_cci()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cci(), output);
  }
  
  // optional .cssweb.kline.mid.BIAS bias = 4;
  if (has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bias(), output);
  }
  
  // optional .cssweb.kline.mid.KDJ kdj = 5;
  if (has_kdj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->kdj(), output);
  }
  
  // optional .cssweb.kline.mid.RSI rsi = 6;
  if (has_rsi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rsi(), output);
  }
  
  // optional .cssweb.kline.mid.OBV obv = 7;
  if (has_obv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->obv(), output);
  }
  
  // optional .cssweb.kline.mid.BOLL boll = 8;
  if (has_boll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->boll(), output);
  }
  
  // optional .cssweb.kline.mid.PSY psy = 9;
  if (has_psy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->psy(), output);
  }
  
  // optional .cssweb.kline.mid.ROC roc = 10;
  if (has_roc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->roc(), output);
  }
  
  // optional .cssweb.kline.mid.WR wr = 11;
  if (has_wr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->wr(), output);
  }
  
  // optional .cssweb.kline.mid.VR vr = 12;
  if (has_vr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->vr(), output);
  }
  
  // optional .cssweb.kline.mid.ARBR arbr = 13;
  if (has_arbr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->arbr(), output);
  }
  
  // optional .cssweb.kline.mid.CR cr = 14;
  if (has_cr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->cr(), output);
  }
  
  // optional .cssweb.kline.mid.CDP cdp = 15;
  if (has_cdp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->cdp(), output);
  }
  
  // optional .cssweb.kline.mid.DMA dma = 16;
  if (has_dma()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->dma(), output);
  }
  
  // optional .cssweb.kline.mid.MTM mtm = 17;
  if (has_mtm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->mtm(), output);
  }
  
  // optional .cssweb.kline.mid.BBI bbi = 18;
  if (has_bbi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->bbi(), output);
  }
  
  // optional .cssweb.kline.mid.TRIX trix = 19;
  if (has_trix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->trix(), output);
  }
  
  // optional .cssweb.kline.mid.ZLJC zljc = 20;
  if (has_zljc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->zljc(), output);
  }
  
  // optional .cssweb.kline.mid.ASI asi = 21;
  if (has_asi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->asi(), output);
  }
  
  // optional .cssweb.kline.mid.EXPMA ema = 22;
  if (has_ema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->ema(), output);
  }
  
  // optional .cssweb.kline.mid.DMI dmi = 23;
  if (has_dmi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->dmi(), output);
  }
  
  // optional .cssweb.kline.mid.PVT pvt = 24;
  if (has_pvt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->pvt(), output);
  }
  
  // optional .cssweb.kline.mid.PBX pbx = 25;
  if (has_pbx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->pbx(), output);
  }
  
  // optional .cssweb.kline.mid.SKDJ skdj = 26;
  if (has_skdj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->skdj(), output);
  }
  
  // optional int32 file = 27;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->file(), output);
  }
  
  // optional string quotetime = 28;
  if (has_quotetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quotetime().data(), this->quotetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->quotetime(), output);
  }
  
  // optional .cssweb.kline.mid.MIDVAL midval = 29;
  if (has_midval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->midval(), output);
  }
  
  // optional int32 linenum = 30;
  if (has_linenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->linenum(), output);
  }
  
  // repeated .cssweb.kline.mid.KLINEIDX klineIdx = 31;
  for (int i = 0; i < this->klineidx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->klineidx(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TEMP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cssweb.kline.mid.MA ma = 1;
  if (has_ma()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ma(), target);
  }
  
  // optional .cssweb.kline.mid.MACD macd = 2;
  if (has_macd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->macd(), target);
  }
  
  // optional .cssweb.kline.mid.CCI cci = 3;
  if (has_cci()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cci(), target);
  }
  
  // optional .cssweb.kline.mid.BIAS bias = 4;
  if (has_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bias(), target);
  }
  
  // optional .cssweb.kline.mid.KDJ kdj = 5;
  if (has_kdj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->kdj(), target);
  }
  
  // optional .cssweb.kline.mid.RSI rsi = 6;
  if (has_rsi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rsi(), target);
  }
  
  // optional .cssweb.kline.mid.OBV obv = 7;
  if (has_obv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->obv(), target);
  }
  
  // optional .cssweb.kline.mid.BOLL boll = 8;
  if (has_boll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->boll(), target);
  }
  
  // optional .cssweb.kline.mid.PSY psy = 9;
  if (has_psy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->psy(), target);
  }
  
  // optional .cssweb.kline.mid.ROC roc = 10;
  if (has_roc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->roc(), target);
  }
  
  // optional .cssweb.kline.mid.WR wr = 11;
  if (has_wr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->wr(), target);
  }
  
  // optional .cssweb.kline.mid.VR vr = 12;
  if (has_vr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->vr(), target);
  }
  
  // optional .cssweb.kline.mid.ARBR arbr = 13;
  if (has_arbr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->arbr(), target);
  }
  
  // optional .cssweb.kline.mid.CR cr = 14;
  if (has_cr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->cr(), target);
  }
  
  // optional .cssweb.kline.mid.CDP cdp = 15;
  if (has_cdp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->cdp(), target);
  }
  
  // optional .cssweb.kline.mid.DMA dma = 16;
  if (has_dma()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->dma(), target);
  }
  
  // optional .cssweb.kline.mid.MTM mtm = 17;
  if (has_mtm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->mtm(), target);
  }
  
  // optional .cssweb.kline.mid.BBI bbi = 18;
  if (has_bbi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->bbi(), target);
  }
  
  // optional .cssweb.kline.mid.TRIX trix = 19;
  if (has_trix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->trix(), target);
  }
  
  // optional .cssweb.kline.mid.ZLJC zljc = 20;
  if (has_zljc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->zljc(), target);
  }
  
  // optional .cssweb.kline.mid.ASI asi = 21;
  if (has_asi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->asi(), target);
  }
  
  // optional .cssweb.kline.mid.EXPMA ema = 22;
  if (has_ema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->ema(), target);
  }
  
  // optional .cssweb.kline.mid.DMI dmi = 23;
  if (has_dmi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->dmi(), target);
  }
  
  // optional .cssweb.kline.mid.PVT pvt = 24;
  if (has_pvt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->pvt(), target);
  }
  
  // optional .cssweb.kline.mid.PBX pbx = 25;
  if (has_pbx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->pbx(), target);
  }
  
  // optional .cssweb.kline.mid.SKDJ skdj = 26;
  if (has_skdj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->skdj(), target);
  }
  
  // optional int32 file = 27;
  if (has_file()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->file(), target);
  }
  
  // optional string quotetime = 28;
  if (has_quotetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quotetime().data(), this->quotetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->quotetime(), target);
  }
  
  // optional .cssweb.kline.mid.MIDVAL midval = 29;
  if (has_midval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->midval(), target);
  }
  
  // optional int32 linenum = 30;
  if (has_linenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->linenum(), target);
  }
  
  // repeated .cssweb.kline.mid.KLINEIDX klineIdx = 31;
  for (int i = 0; i < this->klineidx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->klineidx(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TEMP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cssweb.kline.mid.MA ma = 1;
    if (has_ma()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ma());
    }
    
    // optional .cssweb.kline.mid.MACD macd = 2;
    if (has_macd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->macd());
    }
    
    // optional .cssweb.kline.mid.CCI cci = 3;
    if (has_cci()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cci());
    }
    
    // optional .cssweb.kline.mid.BIAS bias = 4;
    if (has_bias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bias());
    }
    
    // optional .cssweb.kline.mid.KDJ kdj = 5;
    if (has_kdj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kdj());
    }
    
    // optional .cssweb.kline.mid.RSI rsi = 6;
    if (has_rsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsi());
    }
    
    // optional .cssweb.kline.mid.OBV obv = 7;
    if (has_obv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obv());
    }
    
    // optional .cssweb.kline.mid.BOLL boll = 8;
    if (has_boll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boll());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .cssweb.kline.mid.PSY psy = 9;
    if (has_psy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->psy());
    }
    
    // optional .cssweb.kline.mid.ROC roc = 10;
    if (has_roc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roc());
    }
    
    // optional .cssweb.kline.mid.WR wr = 11;
    if (has_wr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wr());
    }
    
    // optional .cssweb.kline.mid.VR vr = 12;
    if (has_vr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vr());
    }
    
    // optional .cssweb.kline.mid.ARBR arbr = 13;
    if (has_arbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arbr());
    }
    
    // optional .cssweb.kline.mid.CR cr = 14;
    if (has_cr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cr());
    }
    
    // optional .cssweb.kline.mid.CDP cdp = 15;
    if (has_cdp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cdp());
    }
    
    // optional .cssweb.kline.mid.DMA dma = 16;
    if (has_dma()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dma());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .cssweb.kline.mid.MTM mtm = 17;
    if (has_mtm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mtm());
    }
    
    // optional .cssweb.kline.mid.BBI bbi = 18;
    if (has_bbi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bbi());
    }
    
    // optional .cssweb.kline.mid.TRIX trix = 19;
    if (has_trix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trix());
    }
    
    // optional .cssweb.kline.mid.ZLJC zljc = 20;
    if (has_zljc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zljc());
    }
    
    // optional .cssweb.kline.mid.ASI asi = 21;
    if (has_asi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->asi());
    }
    
    // optional .cssweb.kline.mid.EXPMA ema = 22;
    if (has_ema()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ema());
    }
    
    // optional .cssweb.kline.mid.DMI dmi = 23;
    if (has_dmi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dmi());
    }
    
    // optional .cssweb.kline.mid.PVT pvt = 24;
    if (has_pvt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvt());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .cssweb.kline.mid.PBX pbx = 25;
    if (has_pbx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbx());
    }
    
    // optional .cssweb.kline.mid.SKDJ skdj = 26;
    if (has_skdj()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skdj());
    }
    
    // optional int32 file = 27;
    if (has_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file());
    }
    
    // optional string quotetime = 28;
    if (has_quotetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quotetime());
    }
    
    // optional .cssweb.kline.mid.MIDVAL midval = 29;
    if (has_midval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->midval());
    }
    
    // optional int32 linenum = 30;
    if (has_linenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linenum());
    }
    
  }
  // repeated .cssweb.kline.mid.KLINEIDX klineIdx = 31;
  total_size += 2 * this->klineidx_size();
  for (int i = 0; i < this->klineidx_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->klineidx(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEMP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEMP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEMP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEMP::MergeFrom(const TEMP& from) {
  GOOGLE_CHECK_NE(&from, this);
  klineidx_.MergeFrom(from.klineidx_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ma()) {
      mutable_ma()->::cssweb::kline::mid::MA::MergeFrom(from.ma());
    }
    if (from.has_macd()) {
      mutable_macd()->::cssweb::kline::mid::MACD::MergeFrom(from.macd());
    }
    if (from.has_cci()) {
      mutable_cci()->::cssweb::kline::mid::CCI::MergeFrom(from.cci());
    }
    if (from.has_bias()) {
      mutable_bias()->::cssweb::kline::mid::BIAS::MergeFrom(from.bias());
    }
    if (from.has_kdj()) {
      mutable_kdj()->::cssweb::kline::mid::KDJ::MergeFrom(from.kdj());
    }
    if (from.has_rsi()) {
      mutable_rsi()->::cssweb::kline::mid::RSI::MergeFrom(from.rsi());
    }
    if (from.has_obv()) {
      mutable_obv()->::cssweb::kline::mid::OBV::MergeFrom(from.obv());
    }
    if (from.has_boll()) {
      mutable_boll()->::cssweb::kline::mid::BOLL::MergeFrom(from.boll());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_psy()) {
      mutable_psy()->::cssweb::kline::mid::PSY::MergeFrom(from.psy());
    }
    if (from.has_roc()) {
      mutable_roc()->::cssweb::kline::mid::ROC::MergeFrom(from.roc());
    }
    if (from.has_wr()) {
      mutable_wr()->::cssweb::kline::mid::WR::MergeFrom(from.wr());
    }
    if (from.has_vr()) {
      mutable_vr()->::cssweb::kline::mid::VR::MergeFrom(from.vr());
    }
    if (from.has_arbr()) {
      mutable_arbr()->::cssweb::kline::mid::ARBR::MergeFrom(from.arbr());
    }
    if (from.has_cr()) {
      mutable_cr()->::cssweb::kline::mid::CR::MergeFrom(from.cr());
    }
    if (from.has_cdp()) {
      mutable_cdp()->::cssweb::kline::mid::CDP::MergeFrom(from.cdp());
    }
    if (from.has_dma()) {
      mutable_dma()->::cssweb::kline::mid::DMA::MergeFrom(from.dma());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mtm()) {
      mutable_mtm()->::cssweb::kline::mid::MTM::MergeFrom(from.mtm());
    }
    if (from.has_bbi()) {
      mutable_bbi()->::cssweb::kline::mid::BBI::MergeFrom(from.bbi());
    }
    if (from.has_trix()) {
      mutable_trix()->::cssweb::kline::mid::TRIX::MergeFrom(from.trix());
    }
    if (from.has_zljc()) {
      mutable_zljc()->::cssweb::kline::mid::ZLJC::MergeFrom(from.zljc());
    }
    if (from.has_asi()) {
      mutable_asi()->::cssweb::kline::mid::ASI::MergeFrom(from.asi());
    }
    if (from.has_ema()) {
      mutable_ema()->::cssweb::kline::mid::EXPMA::MergeFrom(from.ema());
    }
    if (from.has_dmi()) {
      mutable_dmi()->::cssweb::kline::mid::DMI::MergeFrom(from.dmi());
    }
    if (from.has_pvt()) {
      mutable_pvt()->::cssweb::kline::mid::PVT::MergeFrom(from.pvt());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_pbx()) {
      mutable_pbx()->::cssweb::kline::mid::PBX::MergeFrom(from.pbx());
    }
    if (from.has_skdj()) {
      mutable_skdj()->::cssweb::kline::mid::SKDJ::MergeFrom(from.skdj());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_quotetime()) {
      set_quotetime(from.quotetime());
    }
    if (from.has_midval()) {
      mutable_midval()->::cssweb::kline::mid::MIDVAL::MergeFrom(from.midval());
    }
    if (from.has_linenum()) {
      set_linenum(from.linenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEMP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEMP::CopyFrom(const TEMP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEMP::IsInitialized() const {
  
  if (has_ma()) {
    if (!this->ma().IsInitialized()) return false;
  }
  if (has_macd()) {
    if (!this->macd().IsInitialized()) return false;
  }
  if (has_bias()) {
    if (!this->bias().IsInitialized()) return false;
  }
  if (has_kdj()) {
    if (!this->kdj().IsInitialized()) return false;
  }
  if (has_rsi()) {
    if (!this->rsi().IsInitialized()) return false;
  }
  if (has_obv()) {
    if (!this->obv().IsInitialized()) return false;
  }
  if (has_boll()) {
    if (!this->boll().IsInitialized()) return false;
  }
  if (has_psy()) {
    if (!this->psy().IsInitialized()) return false;
  }
  if (has_roc()) {
    if (!this->roc().IsInitialized()) return false;
  }
  if (has_wr()) {
    if (!this->wr().IsInitialized()) return false;
  }
  if (has_vr()) {
    if (!this->vr().IsInitialized()) return false;
  }
  if (has_arbr()) {
    if (!this->arbr().IsInitialized()) return false;
  }
  if (has_cr()) {
    if (!this->cr().IsInitialized()) return false;
  }
  if (has_cdp()) {
    if (!this->cdp().IsInitialized()) return false;
  }
  if (has_dma()) {
    if (!this->dma().IsInitialized()) return false;
  }
  if (has_mtm()) {
    if (!this->mtm().IsInitialized()) return false;
  }
  if (has_bbi()) {
    if (!this->bbi().IsInitialized()) return false;
  }
  if (has_trix()) {
    if (!this->trix().IsInitialized()) return false;
  }
  if (has_zljc()) {
    if (!this->zljc().IsInitialized()) return false;
  }
  if (has_asi()) {
    if (!this->asi().IsInitialized()) return false;
  }
  if (has_ema()) {
    if (!this->ema().IsInitialized()) return false;
  }
  if (has_dmi()) {
    if (!this->dmi().IsInitialized()) return false;
  }
  if (has_pvt()) {
    if (!this->pvt().IsInitialized()) return false;
  }
  if (has_pbx()) {
    if (!this->pbx().IsInitialized()) return false;
  }
  if (has_skdj()) {
    if (!this->skdj().IsInitialized()) return false;
  }
  if (has_midval()) {
    if (!this->midval().IsInitialized()) return false;
  }
  for (int i = 0; i < klineidx_size(); i++) {
    if (!this->klineidx(i).IsInitialized()) return false;
  }
  return true;
}

void TEMP::Swap(TEMP* other) {
  if (other != this) {
    std::swap(ma_, other->ma_);
    std::swap(macd_, other->macd_);
    std::swap(cci_, other->cci_);
    std::swap(bias_, other->bias_);
    std::swap(kdj_, other->kdj_);
    std::swap(rsi_, other->rsi_);
    std::swap(obv_, other->obv_);
    std::swap(boll_, other->boll_);
    std::swap(psy_, other->psy_);
    std::swap(roc_, other->roc_);
    std::swap(wr_, other->wr_);
    std::swap(vr_, other->vr_);
    std::swap(arbr_, other->arbr_);
    std::swap(cr_, other->cr_);
    std::swap(cdp_, other->cdp_);
    std::swap(dma_, other->dma_);
    std::swap(mtm_, other->mtm_);
    std::swap(bbi_, other->bbi_);
    std::swap(trix_, other->trix_);
    std::swap(zljc_, other->zljc_);
    std::swap(asi_, other->asi_);
    std::swap(ema_, other->ema_);
    std::swap(dmi_, other->dmi_);
    std::swap(pvt_, other->pvt_);
    std::swap(pbx_, other->pbx_);
    std::swap(skdj_, other->skdj_);
    std::swap(file_, other->file_);
    std::swap(quotetime_, other->quotetime_);
    std::swap(midval_, other->midval_);
    std::swap(linenum_, other->linenum_);
    klineidx_.Swap(&other->klineidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEMP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEMP_descriptor_;
  metadata.reflection = TEMP_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mid
}  // namespace kline
}  // namespace cssweb

// @@protoc_insertion_point(global_scope)
