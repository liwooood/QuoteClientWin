// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communication.proto

#ifndef PROTOBUF_communication_2eproto__INCLUDED
#define PROTOBUF_communication_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace quote {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_communication_2eproto();
void protobuf_AssignDesc_communication_2eproto();
void protobuf_ShutdownFile_communication_2eproto();

class RealTimeRequest;
class RealTimeResponse;
class RealTimeResponse_RealTime;
class Grid;
class GridRequest;
class GridResponse;
class GridSortRequest;
class GridSortResponse;
class DetailRequest;
class MinRequest;
class StatusRequest;
class StatusResponse;
class StatusResponse_Status;
class ZhpmRequest;
class ZhpmResponse;
class ZhpmResponse_Zhpm;
class ZhpmResponse_Zhpm_ZhpmStock;
class CandleRequest;
class StockRequest;
class FinanceRequest;
class WeightRequest;
class BlockRequest;
class LargeRequest;
class PriceRequest;
class PriceResponse;
class PriceResponse_Price;

enum GridRequest_Field {
  GridRequest_Field_ZQDM = 1,
  GridRequest_Field_JRKP = 2,
  GridRequest_Field_ZGCJ = 3,
  GridRequest_Field_ZDCJ = 4,
  GridRequest_Field_ZJCJ = 5,
  GridRequest_Field_CJSL = 6,
  GridRequest_Field_CJJE = 7,
  GridRequest_Field_BJW1 = 8,
  GridRequest_Field_SJW1 = 9,
  GridRequest_Field_ZF = 10,
  GridRequest_Field_ZD = 11,
  GridRequest_Field_HS = 12,
  GridRequest_Field_AMP = 13,
  GridRequest_Field_LB = 14,
  GridRequest_Field_WB = 15,
  GridRequest_Field_WC = 16,
  GridRequest_Field_ZRSP = 17,
  GridRequest_Field_XS = 18
};
bool GridRequest_Field_IsValid(int value);
const GridRequest_Field GridRequest_Field_Field_MIN = GridRequest_Field_ZQDM;
const GridRequest_Field GridRequest_Field_Field_MAX = GridRequest_Field_XS;
const int GridRequest_Field_Field_ARRAYSIZE = GridRequest_Field_Field_MAX + 1;

const ::google::protobuf::EnumDescriptor* GridRequest_Field_descriptor();
inline const ::std::string& GridRequest_Field_Name(GridRequest_Field value) {
  return ::google::protobuf::internal::NameOfEnum(
    GridRequest_Field_descriptor(), value);
}
inline bool GridRequest_Field_Parse(
    const ::std::string& name, GridRequest_Field* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GridRequest_Field>(
    GridRequest_Field_descriptor(), name, value);
}
enum GridRequest_Sort {
  GridRequest_Sort_ASC = 1,
  GridRequest_Sort_DESC = 2
};
bool GridRequest_Sort_IsValid(int value);
const GridRequest_Sort GridRequest_Sort_Sort_MIN = GridRequest_Sort_ASC;
const GridRequest_Sort GridRequest_Sort_Sort_MAX = GridRequest_Sort_DESC;
const int GridRequest_Sort_Sort_ARRAYSIZE = GridRequest_Sort_Sort_MAX + 1;

const ::google::protobuf::EnumDescriptor* GridRequest_Sort_descriptor();
inline const ::std::string& GridRequest_Sort_Name(GridRequest_Sort value) {
  return ::google::protobuf::internal::NameOfEnum(
    GridRequest_Sort_descriptor(), value);
}
inline bool GridRequest_Sort_Parse(
    const ::std::string& name, GridRequest_Sort* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GridRequest_Sort>(
    GridRequest_Sort_descriptor(), name, value);
}
enum GridSortRequest_Field {
  GridSortRequest_Field_ZQDM = 1,
  GridSortRequest_Field_JRKP = 2,
  GridSortRequest_Field_ZGCJ = 3,
  GridSortRequest_Field_ZDCJ = 4,
  GridSortRequest_Field_ZJCJ = 5,
  GridSortRequest_Field_CJSL = 6,
  GridSortRequest_Field_CJJE = 7,
  GridSortRequest_Field_BJW1 = 8,
  GridSortRequest_Field_SJW1 = 9,
  GridSortRequest_Field_ZF = 10,
  GridSortRequest_Field_ZD = 11,
  GridSortRequest_Field_HS = 12,
  GridSortRequest_Field_AMP = 13,
  GridSortRequest_Field_LB = 14,
  GridSortRequest_Field_WB = 15,
  GridSortRequest_Field_WC = 16,
  GridSortRequest_Field_ZRSP = 17,
  GridSortRequest_Field_XS = 18
};
bool GridSortRequest_Field_IsValid(int value);
const GridSortRequest_Field GridSortRequest_Field_Field_MIN = GridSortRequest_Field_ZQDM;
const GridSortRequest_Field GridSortRequest_Field_Field_MAX = GridSortRequest_Field_XS;
const int GridSortRequest_Field_Field_ARRAYSIZE = GridSortRequest_Field_Field_MAX + 1;

const ::google::protobuf::EnumDescriptor* GridSortRequest_Field_descriptor();
inline const ::std::string& GridSortRequest_Field_Name(GridSortRequest_Field value) {
  return ::google::protobuf::internal::NameOfEnum(
    GridSortRequest_Field_descriptor(), value);
}
inline bool GridSortRequest_Field_Parse(
    const ::std::string& name, GridSortRequest_Field* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GridSortRequest_Field>(
    GridSortRequest_Field_descriptor(), name, value);
}
enum GridSortRequest_Sort {
  GridSortRequest_Sort_ASC = 1,
  GridSortRequest_Sort_DESC = 2
};
bool GridSortRequest_Sort_IsValid(int value);
const GridSortRequest_Sort GridSortRequest_Sort_Sort_MIN = GridSortRequest_Sort_ASC;
const GridSortRequest_Sort GridSortRequest_Sort_Sort_MAX = GridSortRequest_Sort_DESC;
const int GridSortRequest_Sort_Sort_ARRAYSIZE = GridSortRequest_Sort_Sort_MAX + 1;

const ::google::protobuf::EnumDescriptor* GridSortRequest_Sort_descriptor();
inline const ::std::string& GridSortRequest_Sort_Name(GridSortRequest_Sort value) {
  return ::google::protobuf::internal::NameOfEnum(
    GridSortRequest_Sort_descriptor(), value);
}
inline bool GridSortRequest_Sort_Parse(
    const ::std::string& name, GridSortRequest_Sort* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GridSortRequest_Sort>(
    GridSortRequest_Sort_descriptor(), name, value);
}
enum DetailRequest_Direction {
  DetailRequest_Direction_FORWARD = 1,
  DetailRequest_Direction_BACKWARD = 2
};
bool DetailRequest_Direction_IsValid(int value);
const DetailRequest_Direction DetailRequest_Direction_Direction_MIN = DetailRequest_Direction_FORWARD;
const DetailRequest_Direction DetailRequest_Direction_Direction_MAX = DetailRequest_Direction_BACKWARD;
const int DetailRequest_Direction_Direction_ARRAYSIZE = DetailRequest_Direction_Direction_MAX + 1;

const ::google::protobuf::EnumDescriptor* DetailRequest_Direction_descriptor();
inline const ::std::string& DetailRequest_Direction_Name(DetailRequest_Direction value) {
  return ::google::protobuf::internal::NameOfEnum(
    DetailRequest_Direction_descriptor(), value);
}
inline bool DetailRequest_Direction_Parse(
    const ::std::string& name, DetailRequest_Direction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DetailRequest_Direction>(
    DetailRequest_Direction_descriptor(), name, value);
}
enum CandleRequest_CandleCycle {
  CandleRequest_CandleCycle_DAY = 1,
  CandleRequest_CandleCycle_WEEK = 2,
  CandleRequest_CandleCycle_MONTH = 3,
  CandleRequest_CandleCycle_YEAR = 4,
  CandleRequest_CandleCycle_MIN1 = 5,
  CandleRequest_CandleCycle_MIN5 = 6,
  CandleRequest_CandleCycle_MIN15 = 7,
  CandleRequest_CandleCycle_MIN30 = 8,
  CandleRequest_CandleCycle_MIN60 = 9
};
bool CandleRequest_CandleCycle_IsValid(int value);
const CandleRequest_CandleCycle CandleRequest_CandleCycle_CandleCycle_MIN = CandleRequest_CandleCycle_DAY;
const CandleRequest_CandleCycle CandleRequest_CandleCycle_CandleCycle_MAX = CandleRequest_CandleCycle_MIN60;
const int CandleRequest_CandleCycle_CandleCycle_ARRAYSIZE = CandleRequest_CandleCycle_CandleCycle_MAX + 1;

const ::google::protobuf::EnumDescriptor* CandleRequest_CandleCycle_descriptor();
inline const ::std::string& CandleRequest_CandleCycle_Name(CandleRequest_CandleCycle value) {
  return ::google::protobuf::internal::NameOfEnum(
    CandleRequest_CandleCycle_descriptor(), value);
}
inline bool CandleRequest_CandleCycle_Parse(
    const ::std::string& name, CandleRequest_CandleCycle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CandleRequest_CandleCycle>(
    CandleRequest_CandleCycle_descriptor(), name, value);
}
enum CandleRequest_Direction {
  CandleRequest_Direction_FORWARD = 1,
  CandleRequest_Direction_BACKWARD = 2
};
bool CandleRequest_Direction_IsValid(int value);
const CandleRequest_Direction CandleRequest_Direction_Direction_MIN = CandleRequest_Direction_FORWARD;
const CandleRequest_Direction CandleRequest_Direction_Direction_MAX = CandleRequest_Direction_BACKWARD;
const int CandleRequest_Direction_Direction_ARRAYSIZE = CandleRequest_Direction_Direction_MAX + 1;

const ::google::protobuf::EnumDescriptor* CandleRequest_Direction_descriptor();
inline const ::std::string& CandleRequest_Direction_Name(CandleRequest_Direction value) {
  return ::google::protobuf::internal::NameOfEnum(
    CandleRequest_Direction_descriptor(), value);
}
inline bool CandleRequest_Direction_Parse(
    const ::std::string& name, CandleRequest_Direction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CandleRequest_Direction>(
    CandleRequest_Direction_descriptor(), name, value);
}
enum BlockRequest_Block {
  BlockRequest_Block_BLOCK = 1,
  BlockRequest_Block_BLOCKDETAIL = 2
};
bool BlockRequest_Block_IsValid(int value);
const BlockRequest_Block BlockRequest_Block_Block_MIN = BlockRequest_Block_BLOCK;
const BlockRequest_Block BlockRequest_Block_Block_MAX = BlockRequest_Block_BLOCKDETAIL;
const int BlockRequest_Block_Block_ARRAYSIZE = BlockRequest_Block_Block_MAX + 1;

const ::google::protobuf::EnumDescriptor* BlockRequest_Block_descriptor();
inline const ::std::string& BlockRequest_Block_Name(BlockRequest_Block value) {
  return ::google::protobuf::internal::NameOfEnum(
    BlockRequest_Block_descriptor(), value);
}
inline bool BlockRequest_Block_Parse(
    const ::std::string& name, BlockRequest_Block* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlockRequest_Block>(
    BlockRequest_Block_descriptor(), name, value);
}
enum PriceRequest_Direction {
  PriceRequest_Direction_FORWARD = 1,
  PriceRequest_Direction_BACKWARD = 2
};
bool PriceRequest_Direction_IsValid(int value);
const PriceRequest_Direction PriceRequest_Direction_Direction_MIN = PriceRequest_Direction_FORWARD;
const PriceRequest_Direction PriceRequest_Direction_Direction_MAX = PriceRequest_Direction_BACKWARD;
const int PriceRequest_Direction_Direction_ARRAYSIZE = PriceRequest_Direction_Direction_MAX + 1;

const ::google::protobuf::EnumDescriptor* PriceRequest_Direction_descriptor();
inline const ::std::string& PriceRequest_Direction_Name(PriceRequest_Direction value) {
  return ::google::protobuf::internal::NameOfEnum(
    PriceRequest_Direction_descriptor(), value);
}
inline bool PriceRequest_Direction_Parse(
    const ::std::string& name, PriceRequest_Direction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PriceRequest_Direction>(
    PriceRequest_Direction_descriptor(), name, value);
}
// ===================================================================

class RealTimeRequest : public ::google::protobuf::Message {
 public:
  RealTimeRequest();
  virtual ~RealTimeRequest();
  
  RealTimeRequest(const RealTimeRequest& from);
  
  inline RealTimeRequest& operator=(const RealTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealTimeRequest& default_instance();
  
  void Swap(RealTimeRequest* other);
  
  // implements Message ----------------------------------------------
  
  RealTimeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RealTimeRequest& from);
  void MergeFrom(const RealTimeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string stockcode = 1;
  inline int stockcode_size() const;
  inline void clear_stockcode();
  static const int kStockcodeFieldNumber = 1;
  inline const ::std::string& stockcode(int index) const;
  inline ::std::string* mutable_stockcode(int index);
  inline void set_stockcode(int index, const ::std::string& value);
  inline void set_stockcode(int index, const char* value);
  inline void set_stockcode(int index, const char* value, size_t size);
  inline ::std::string* add_stockcode();
  inline void add_stockcode(const ::std::string& value);
  inline void add_stockcode(const char* value);
  inline void add_stockcode(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stockcode() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stockcode();
  
  // @@protoc_insertion_point(class_scope:quote.RealTimeRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> stockcode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static RealTimeRequest* default_instance_;
};
// -------------------------------------------------------------------

class RealTimeResponse_RealTime : public ::google::protobuf::Message {
 public:
  RealTimeResponse_RealTime();
  virtual ~RealTimeResponse_RealTime();
  
  RealTimeResponse_RealTime(const RealTimeResponse_RealTime& from);
  
  inline RealTimeResponse_RealTime& operator=(const RealTimeResponse_RealTime& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealTimeResponse_RealTime& default_instance();
  
  void Swap(RealTimeResponse_RealTime* other);
  
  // implements Message ----------------------------------------------
  
  RealTimeResponse_RealTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RealTimeResponse_RealTime& from);
  void MergeFrom(const RealTimeResponse_RealTime& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string quotetime = 1;
  inline bool has_quotetime() const;
  inline void clear_quotetime();
  static const int kQuotetimeFieldNumber = 1;
  inline const ::std::string& quotetime() const;
  inline void set_quotetime(const ::std::string& value);
  inline void set_quotetime(const char* value);
  inline void set_quotetime(const char* value, size_t size);
  inline ::std::string* mutable_quotetime();
  inline ::std::string* release_quotetime();
  
  // required string markettime = 2;
  inline bool has_markettime() const;
  inline void clear_markettime();
  static const int kMarkettimeFieldNumber = 2;
  inline const ::std::string& markettime() const;
  inline void set_markettime(const ::std::string& value);
  inline void set_markettime(const char* value);
  inline void set_markettime(const char* value, size_t size);
  inline ::std::string* mutable_markettime();
  inline ::std::string* release_markettime();
  
  // required string secucode = 3;
  inline bool has_secucode() const;
  inline void clear_secucode();
  static const int kSecucodeFieldNumber = 3;
  inline const ::std::string& secucode() const;
  inline void set_secucode(const ::std::string& value);
  inline void set_secucode(const char* value);
  inline void set_secucode(const char* value, size_t size);
  inline ::std::string* mutable_secucode();
  inline ::std::string* release_secucode();
  
  // required int32 exchange = 4;
  inline bool has_exchange() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 4;
  inline ::google::protobuf::int32 exchange() const;
  inline void set_exchange(::google::protobuf::int32 value);
  
  // required bool tp = 5;
  inline bool has_tp() const;
  inline void clear_tp();
  static const int kTpFieldNumber = 5;
  inline bool tp() const;
  inline void set_tp(bool value);
  
  // required float open = 6;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 6;
  inline float open() const;
  inline void set_open(float value);
  
  // required float high = 7;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 7;
  inline float high() const;
  inline void set_high(float value);
  
  // required float low = 8;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 8;
  inline float low() const;
  inline void set_low(float value);
  
  // required float close = 9;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 9;
  inline float close() const;
  inline void set_close(float value);
  
  // required int64 vol = 10;
  inline bool has_vol() const;
  inline void clear_vol();
  static const int kVolFieldNumber = 10;
  inline ::google::protobuf::int64 vol() const;
  inline void set_vol(::google::protobuf::int64 value);
  
  // required double amt = 11;
  inline bool has_amt() const;
  inline void clear_amt();
  static const int kAmtFieldNumber = 11;
  inline double amt() const;
  inline void set_amt(double value);
  
  // optional float askprice5 = 12;
  inline bool has_askprice5() const;
  inline void clear_askprice5();
  static const int kAskprice5FieldNumber = 12;
  inline float askprice5() const;
  inline void set_askprice5(float value);
  
  // optional int32 askvol5 = 13;
  inline bool has_askvol5() const;
  inline void clear_askvol5();
  static const int kAskvol5FieldNumber = 13;
  inline ::google::protobuf::int32 askvol5() const;
  inline void set_askvol5(::google::protobuf::int32 value);
  
  // optional float askprice4 = 14;
  inline bool has_askprice4() const;
  inline void clear_askprice4();
  static const int kAskprice4FieldNumber = 14;
  inline float askprice4() const;
  inline void set_askprice4(float value);
  
  // optional int32 askvol4 = 15;
  inline bool has_askvol4() const;
  inline void clear_askvol4();
  static const int kAskvol4FieldNumber = 15;
  inline ::google::protobuf::int32 askvol4() const;
  inline void set_askvol4(::google::protobuf::int32 value);
  
  // required float askprice3 = 16;
  inline bool has_askprice3() const;
  inline void clear_askprice3();
  static const int kAskprice3FieldNumber = 16;
  inline float askprice3() const;
  inline void set_askprice3(float value);
  
  // required int32 askvol3 = 17;
  inline bool has_askvol3() const;
  inline void clear_askvol3();
  static const int kAskvol3FieldNumber = 17;
  inline ::google::protobuf::int32 askvol3() const;
  inline void set_askvol3(::google::protobuf::int32 value);
  
  // required float askprice2 = 18;
  inline bool has_askprice2() const;
  inline void clear_askprice2();
  static const int kAskprice2FieldNumber = 18;
  inline float askprice2() const;
  inline void set_askprice2(float value);
  
  // required int32 askvol2 = 19;
  inline bool has_askvol2() const;
  inline void clear_askvol2();
  static const int kAskvol2FieldNumber = 19;
  inline ::google::protobuf::int32 askvol2() const;
  inline void set_askvol2(::google::protobuf::int32 value);
  
  // required float askprice1 = 20;
  inline bool has_askprice1() const;
  inline void clear_askprice1();
  static const int kAskprice1FieldNumber = 20;
  inline float askprice1() const;
  inline void set_askprice1(float value);
  
  // required int32 askvol1 = 21;
  inline bool has_askvol1() const;
  inline void clear_askvol1();
  static const int kAskvol1FieldNumber = 21;
  inline ::google::protobuf::int32 askvol1() const;
  inline void set_askvol1(::google::protobuf::int32 value);
  
  // required float bidprice1 = 22;
  inline bool has_bidprice1() const;
  inline void clear_bidprice1();
  static const int kBidprice1FieldNumber = 22;
  inline float bidprice1() const;
  inline void set_bidprice1(float value);
  
  // required int32 bidvol1 = 23;
  inline bool has_bidvol1() const;
  inline void clear_bidvol1();
  static const int kBidvol1FieldNumber = 23;
  inline ::google::protobuf::int32 bidvol1() const;
  inline void set_bidvol1(::google::protobuf::int32 value);
  
  // required float bidprice2 = 24;
  inline bool has_bidprice2() const;
  inline void clear_bidprice2();
  static const int kBidprice2FieldNumber = 24;
  inline float bidprice2() const;
  inline void set_bidprice2(float value);
  
  // required int32 bidvol2 = 25;
  inline bool has_bidvol2() const;
  inline void clear_bidvol2();
  static const int kBidvol2FieldNumber = 25;
  inline ::google::protobuf::int32 bidvol2() const;
  inline void set_bidvol2(::google::protobuf::int32 value);
  
  // required float bidprice3 = 26;
  inline bool has_bidprice3() const;
  inline void clear_bidprice3();
  static const int kBidprice3FieldNumber = 26;
  inline float bidprice3() const;
  inline void set_bidprice3(float value);
  
  // required int32 bidvol3 = 27;
  inline bool has_bidvol3() const;
  inline void clear_bidvol3();
  static const int kBidvol3FieldNumber = 27;
  inline ::google::protobuf::int32 bidvol3() const;
  inline void set_bidvol3(::google::protobuf::int32 value);
  
  // optional float bidprice4 = 28;
  inline bool has_bidprice4() const;
  inline void clear_bidprice4();
  static const int kBidprice4FieldNumber = 28;
  inline float bidprice4() const;
  inline void set_bidprice4(float value);
  
  // optional int32 bidvol4 = 29;
  inline bool has_bidvol4() const;
  inline void clear_bidvol4();
  static const int kBidvol4FieldNumber = 29;
  inline ::google::protobuf::int32 bidvol4() const;
  inline void set_bidvol4(::google::protobuf::int32 value);
  
  // optional float bidprice5 = 30;
  inline bool has_bidprice5() const;
  inline void clear_bidprice5();
  static const int kBidprice5FieldNumber = 30;
  inline float bidprice5() const;
  inline void set_bidprice5(float value);
  
  // optional int32 bidvol5 = 31;
  inline bool has_bidvol5() const;
  inline void clear_bidvol5();
  static const int kBidvol5FieldNumber = 31;
  inline ::google::protobuf::int32 bidvol5() const;
  inline void set_bidvol5(::google::protobuf::int32 value);
  
  // required float zf = 32;
  inline bool has_zf() const;
  inline void clear_zf();
  static const int kZfFieldNumber = 32;
  inline float zf() const;
  inline void set_zf(float value);
  
  // required float zd = 33;
  inline bool has_zd() const;
  inline void clear_zd();
  static const int kZdFieldNumber = 33;
  inline float zd() const;
  inline void set_zd(float value);
  
  // required float zt = 34;
  inline bool has_zt() const;
  inline void clear_zt();
  static const int kZtFieldNumber = 34;
  inline float zt() const;
  inline void set_zt(float value);
  
  // required float dt = 35;
  inline bool has_dt() const;
  inline void clear_dt();
  static const int kDtFieldNumber = 35;
  inline float dt() const;
  inline void set_dt(float value);
  
  // required float hs = 36;
  inline bool has_hs() const;
  inline void clear_hs();
  static const int kHsFieldNumber = 36;
  inline float hs() const;
  inline void set_hs(float value);
  
  // required float amp = 37;
  inline bool has_amp() const;
  inline void clear_amp();
  static const int kAmpFieldNumber = 37;
  inline float amp() const;
  inline void set_amp(float value);
  
  // required float lb = 38;
  inline bool has_lb() const;
  inline void clear_lb();
  static const int kLbFieldNumber = 38;
  inline float lb() const;
  inline void set_lb(float value);
  
  // required float wb = 39;
  inline bool has_wb() const;
  inline void clear_wb();
  static const int kWbFieldNumber = 39;
  inline float wb() const;
  inline void set_wb(float value);
  
  // required int32 wc = 40;
  inline bool has_wc() const;
  inline void clear_wc();
  static const int kWcFieldNumber = 40;
  inline ::google::protobuf::int32 wc() const;
  inline void set_wc(::google::protobuf::int32 value);
  
  // required string nwp = 41;
  inline bool has_nwp() const;
  inline void clear_nwp();
  static const int kNwpFieldNumber = 41;
  inline const ::std::string& nwp() const;
  inline void set_nwp(const ::std::string& value);
  inline void set_nwp(const char* value);
  inline void set_nwp(const char* value, size_t size);
  inline ::std::string* mutable_nwp();
  inline ::std::string* release_nwp();
  
  // required int32 np = 42;
  inline bool has_np() const;
  inline void clear_np();
  static const int kNpFieldNumber = 42;
  inline ::google::protobuf::int32 np() const;
  inline void set_np(::google::protobuf::int32 value);
  
  // required int32 wp = 43;
  inline bool has_wp() const;
  inline void clear_wp();
  static const int kWpFieldNumber = 43;
  inline ::google::protobuf::int32 wp() const;
  inline void set_wp(::google::protobuf::int32 value);
  
  // required int32 sp = 44;
  inline bool has_sp() const;
  inline void clear_sp();
  static const int kSpFieldNumber = 44;
  inline ::google::protobuf::int32 sp() const;
  inline void set_sp(::google::protobuf::int32 value);
  
  // required int32 xs = 45;
  inline bool has_xs() const;
  inline void clear_xs();
  static const int kXsFieldNumber = 45;
  inline ::google::protobuf::int32 xs() const;
  inline void set_xs(::google::protobuf::int32 value);
  
  // required int32 actualxs = 46;
  inline bool has_actualxs() const;
  inline void clear_actualxs();
  static const int kActualxsFieldNumber = 46;
  inline ::google::protobuf::int32 actualxs() const;
  inline void set_actualxs(::google::protobuf::int32 value);
  
  // required float xe = 47;
  inline bool has_xe() const;
  inline void clear_xe();
  static const int kXeFieldNumber = 47;
  inline float xe() const;
  inline void set_xe(float value);
  
  // required int32 detailid = 48;
  inline bool has_detailid() const;
  inline void clear_detailid();
  static const int kDetailidFieldNumber = 48;
  inline ::google::protobuf::int32 detailid() const;
  inline void set_detailid(::google::protobuf::int32 value);
  
  // required bool sg = 49;
  inline bool has_sg() const;
  inline void clear_sg();
  static const int kSgFieldNumber = 49;
  inline bool sg() const;
  inline void set_sg(bool value);
  
  // optional double a = 50;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 50;
  inline double a() const;
  inline void set_a(double value);
  
  // optional double b = 51;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 51;
  inline double b() const;
  inline void set_b(double value);
  
  // optional double fund = 52;
  inline bool has_fund() const;
  inline void clear_fund();
  static const int kFundFieldNumber = 52;
  inline double fund() const;
  inline void set_fund(double value);
  
  // optional double warrant = 53;
  inline bool has_warrant() const;
  inline void clear_warrant();
  static const int kWarrantFieldNumber = 53;
  inline double warrant() const;
  inline void set_warrant(double value);
  
  // optional double bond = 54;
  inline bool has_bond() const;
  inline void clear_bond();
  static const int kBondFieldNumber = 54;
  inline double bond() const;
  inline void set_bond(double value);
  
  // optional double govbond = 55;
  inline bool has_govbond() const;
  inline void clear_govbond();
  static const int kGovbondFieldNumber = 55;
  inline double govbond() const;
  inline void set_govbond(double value);
  
  // optional int32 zj = 56;
  inline bool has_zj() const;
  inline void clear_zj();
  static const int kZjFieldNumber = 56;
  inline ::google::protobuf::int32 zj() const;
  inline void set_zj(::google::protobuf::int32 value);
  
  // optional int32 pj = 57;
  inline bool has_pj() const;
  inline void clear_pj();
  static const int kPjFieldNumber = 57;
  inline ::google::protobuf::int32 pj() const;
  inline void set_pj(::google::protobuf::int32 value);
  
  // optional int32 dj = 58;
  inline bool has_dj() const;
  inline void clear_dj();
  static const int kDjFieldNumber = 58;
  inline ::google::protobuf::int32 dj() const;
  inline void set_dj(::google::protobuf::int32 value);
  
  // optional int32 zja = 59;
  inline bool has_zja() const;
  inline void clear_zja();
  static const int kZjaFieldNumber = 59;
  inline ::google::protobuf::int32 zja() const;
  inline void set_zja(::google::protobuf::int32 value);
  
  // optional int32 pja = 60;
  inline bool has_pja() const;
  inline void clear_pja();
  static const int kPjaFieldNumber = 60;
  inline ::google::protobuf::int32 pja() const;
  inline void set_pja(::google::protobuf::int32 value);
  
  // optional int32 dja = 61;
  inline bool has_dja() const;
  inline void clear_dja();
  static const int kDjaFieldNumber = 61;
  inline ::google::protobuf::int32 dja() const;
  inline void set_dja(::google::protobuf::int32 value);
  
  // optional int32 zjb = 62;
  inline bool has_zjb() const;
  inline void clear_zjb();
  static const int kZjbFieldNumber = 62;
  inline ::google::protobuf::int32 zjb() const;
  inline void set_zjb(::google::protobuf::int32 value);
  
  // optional int32 pjb = 63;
  inline bool has_pjb() const;
  inline void clear_pjb();
  static const int kPjbFieldNumber = 63;
  inline ::google::protobuf::int32 pjb() const;
  inline void set_pjb(::google::protobuf::int32 value);
  
  // optional int32 djb = 64;
  inline bool has_djb() const;
  inline void clear_djb();
  static const int kDjbFieldNumber = 64;
  inline ::google::protobuf::int32 djb() const;
  inline void set_djb(::google::protobuf::int32 value);
  
  // optional int32 zjfund = 65;
  inline bool has_zjfund() const;
  inline void clear_zjfund();
  static const int kZjfundFieldNumber = 65;
  inline ::google::protobuf::int32 zjfund() const;
  inline void set_zjfund(::google::protobuf::int32 value);
  
  // optional int32 pjfund = 66;
  inline bool has_pjfund() const;
  inline void clear_pjfund();
  static const int kPjfundFieldNumber = 66;
  inline ::google::protobuf::int32 pjfund() const;
  inline void set_pjfund(::google::protobuf::int32 value);
  
  // optional int32 djfund = 67;
  inline bool has_djfund() const;
  inline void clear_djfund();
  static const int kDjfundFieldNumber = 67;
  inline ::google::protobuf::int32 djfund() const;
  inline void set_djfund(::google::protobuf::int32 value);
  
  // optional int32 zjmid = 68;
  inline bool has_zjmid() const;
  inline void clear_zjmid();
  static const int kZjmidFieldNumber = 68;
  inline ::google::protobuf::int32 zjmid() const;
  inline void set_zjmid(::google::protobuf::int32 value);
  
  // optional int32 pjmid = 69;
  inline bool has_pjmid() const;
  inline void clear_pjmid();
  static const int kPjmidFieldNumber = 69;
  inline ::google::protobuf::int32 pjmid() const;
  inline void set_pjmid(::google::protobuf::int32 value);
  
  // optional int32 djmid = 70;
  inline bool has_djmid() const;
  inline void clear_djmid();
  static const int kDjmidFieldNumber = 70;
  inline ::google::protobuf::int32 djmid() const;
  inline void set_djmid(::google::protobuf::int32 value);
  
  // optional int32 zjtrad = 71;
  inline bool has_zjtrad() const;
  inline void clear_zjtrad();
  static const int kZjtradFieldNumber = 71;
  inline ::google::protobuf::int32 zjtrad() const;
  inline void set_zjtrad(::google::protobuf::int32 value);
  
  // optional int32 pjtrad = 72;
  inline bool has_pjtrad() const;
  inline void clear_pjtrad();
  static const int kPjtradFieldNumber = 72;
  inline ::google::protobuf::int32 pjtrad() const;
  inline void set_pjtrad(::google::protobuf::int32 value);
  
  // optional int32 djtrad = 73;
  inline bool has_djtrad() const;
  inline void clear_djtrad();
  static const int kDjtradFieldNumber = 73;
  inline ::google::protobuf::int32 djtrad() const;
  inline void set_djtrad(::google::protobuf::int32 value);
  
  // optional float dpdksp1 = 74;
  inline bool has_dpdksp1() const;
  inline void clear_dpdksp1();
  static const int kDpdksp1FieldNumber = 74;
  inline float dpdksp1() const;
  inline void set_dpdksp1(float value);
  
  // optional float dpdksp = 75;
  inline bool has_dpdksp() const;
  inline void clear_dpdksp();
  static const int kDpdkspFieldNumber = 75;
  inline float dpdksp() const;
  inline void set_dpdksp(float value);
  
  // optional float dpdkbp1 = 76;
  inline bool has_dpdkbp1() const;
  inline void clear_dpdkbp1();
  static const int kDpdkbp1FieldNumber = 76;
  inline float dpdkbp1() const;
  inline void set_dpdkbp1(float value);
  
  // optional float dpdkbp = 77;
  inline bool has_dpdkbp() const;
  inline void clear_dpdkbp();
  static const int kDpdkbpFieldNumber = 77;
  inline float dpdkbp() const;
  inline void set_dpdkbp(float value);
  
  // optional float leadingindex = 78;
  inline bool has_leadingindex() const;
  inline void clear_leadingindex();
  static const int kLeadingindexFieldNumber = 78;
  inline float leadingindex() const;
  inline void set_leadingindex(float value);
  
  // @@protoc_insertion_point(class_scope:quote.RealTimeResponse.RealTime)
 private:
  inline void set_has_quotetime();
  inline void clear_has_quotetime();
  inline void set_has_markettime();
  inline void clear_has_markettime();
  inline void set_has_secucode();
  inline void clear_has_secucode();
  inline void set_has_exchange();
  inline void clear_has_exchange();
  inline void set_has_tp();
  inline void clear_has_tp();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_vol();
  inline void clear_has_vol();
  inline void set_has_amt();
  inline void clear_has_amt();
  inline void set_has_askprice5();
  inline void clear_has_askprice5();
  inline void set_has_askvol5();
  inline void clear_has_askvol5();
  inline void set_has_askprice4();
  inline void clear_has_askprice4();
  inline void set_has_askvol4();
  inline void clear_has_askvol4();
  inline void set_has_askprice3();
  inline void clear_has_askprice3();
  inline void set_has_askvol3();
  inline void clear_has_askvol3();
  inline void set_has_askprice2();
  inline void clear_has_askprice2();
  inline void set_has_askvol2();
  inline void clear_has_askvol2();
  inline void set_has_askprice1();
  inline void clear_has_askprice1();
  inline void set_has_askvol1();
  inline void clear_has_askvol1();
  inline void set_has_bidprice1();
  inline void clear_has_bidprice1();
  inline void set_has_bidvol1();
  inline void clear_has_bidvol1();
  inline void set_has_bidprice2();
  inline void clear_has_bidprice2();
  inline void set_has_bidvol2();
  inline void clear_has_bidvol2();
  inline void set_has_bidprice3();
  inline void clear_has_bidprice3();
  inline void set_has_bidvol3();
  inline void clear_has_bidvol3();
  inline void set_has_bidprice4();
  inline void clear_has_bidprice4();
  inline void set_has_bidvol4();
  inline void clear_has_bidvol4();
  inline void set_has_bidprice5();
  inline void clear_has_bidprice5();
  inline void set_has_bidvol5();
  inline void clear_has_bidvol5();
  inline void set_has_zf();
  inline void clear_has_zf();
  inline void set_has_zd();
  inline void clear_has_zd();
  inline void set_has_zt();
  inline void clear_has_zt();
  inline void set_has_dt();
  inline void clear_has_dt();
  inline void set_has_hs();
  inline void clear_has_hs();
  inline void set_has_amp();
  inline void clear_has_amp();
  inline void set_has_lb();
  inline void clear_has_lb();
  inline void set_has_wb();
  inline void clear_has_wb();
  inline void set_has_wc();
  inline void clear_has_wc();
  inline void set_has_nwp();
  inline void clear_has_nwp();
  inline void set_has_np();
  inline void clear_has_np();
  inline void set_has_wp();
  inline void clear_has_wp();
  inline void set_has_sp();
  inline void clear_has_sp();
  inline void set_has_xs();
  inline void clear_has_xs();
  inline void set_has_actualxs();
  inline void clear_has_actualxs();
  inline void set_has_xe();
  inline void clear_has_xe();
  inline void set_has_detailid();
  inline void clear_has_detailid();
  inline void set_has_sg();
  inline void clear_has_sg();
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_fund();
  inline void clear_has_fund();
  inline void set_has_warrant();
  inline void clear_has_warrant();
  inline void set_has_bond();
  inline void clear_has_bond();
  inline void set_has_govbond();
  inline void clear_has_govbond();
  inline void set_has_zj();
  inline void clear_has_zj();
  inline void set_has_pj();
  inline void clear_has_pj();
  inline void set_has_dj();
  inline void clear_has_dj();
  inline void set_has_zja();
  inline void clear_has_zja();
  inline void set_has_pja();
  inline void clear_has_pja();
  inline void set_has_dja();
  inline void clear_has_dja();
  inline void set_has_zjb();
  inline void clear_has_zjb();
  inline void set_has_pjb();
  inline void clear_has_pjb();
  inline void set_has_djb();
  inline void clear_has_djb();
  inline void set_has_zjfund();
  inline void clear_has_zjfund();
  inline void set_has_pjfund();
  inline void clear_has_pjfund();
  inline void set_has_djfund();
  inline void clear_has_djfund();
  inline void set_has_zjmid();
  inline void clear_has_zjmid();
  inline void set_has_pjmid();
  inline void clear_has_pjmid();
  inline void set_has_djmid();
  inline void clear_has_djmid();
  inline void set_has_zjtrad();
  inline void clear_has_zjtrad();
  inline void set_has_pjtrad();
  inline void clear_has_pjtrad();
  inline void set_has_djtrad();
  inline void clear_has_djtrad();
  inline void set_has_dpdksp1();
  inline void clear_has_dpdksp1();
  inline void set_has_dpdksp();
  inline void clear_has_dpdksp();
  inline void set_has_dpdkbp1();
  inline void clear_has_dpdkbp1();
  inline void set_has_dpdkbp();
  inline void clear_has_dpdkbp();
  inline void set_has_leadingindex();
  inline void clear_has_leadingindex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* quotetime_;
  ::std::string* markettime_;
  ::std::string* secucode_;
  ::google::protobuf::int32 exchange_;
  float open_;
  float high_;
  float low_;
  ::google::protobuf::int64 vol_;
  float close_;
  float askprice5_;
  double amt_;
  ::google::protobuf::int32 askvol5_;
  float askprice4_;
  ::google::protobuf::int32 askvol4_;
  float askprice3_;
  ::google::protobuf::int32 askvol3_;
  float askprice2_;
  ::google::protobuf::int32 askvol2_;
  float askprice1_;
  ::google::protobuf::int32 askvol1_;
  float bidprice1_;
  ::google::protobuf::int32 bidvol1_;
  float bidprice2_;
  ::google::protobuf::int32 bidvol2_;
  float bidprice3_;
  ::google::protobuf::int32 bidvol3_;
  bool tp_;
  bool sg_;
  float bidprice4_;
  ::google::protobuf::int32 bidvol4_;
  float bidprice5_;
  ::google::protobuf::int32 bidvol5_;
  float zf_;
  float zd_;
  float zt_;
  float dt_;
  float hs_;
  float amp_;
  float lb_;
  float wb_;
  ::std::string* nwp_;
  ::google::protobuf::int32 wc_;
  ::google::protobuf::int32 np_;
  ::google::protobuf::int32 wp_;
  ::google::protobuf::int32 sp_;
  ::google::protobuf::int32 xs_;
  ::google::protobuf::int32 actualxs_;
  float xe_;
  ::google::protobuf::int32 detailid_;
  double a_;
  double b_;
  double fund_;
  double warrant_;
  double bond_;
  double govbond_;
  ::google::protobuf::int32 zj_;
  ::google::protobuf::int32 pj_;
  ::google::protobuf::int32 dj_;
  ::google::protobuf::int32 zja_;
  ::google::protobuf::int32 pja_;
  ::google::protobuf::int32 dja_;
  ::google::protobuf::int32 zjb_;
  ::google::protobuf::int32 pjb_;
  ::google::protobuf::int32 djb_;
  ::google::protobuf::int32 zjfund_;
  ::google::protobuf::int32 pjfund_;
  ::google::protobuf::int32 djfund_;
  ::google::protobuf::int32 zjmid_;
  ::google::protobuf::int32 pjmid_;
  ::google::protobuf::int32 djmid_;
  ::google::protobuf::int32 zjtrad_;
  ::google::protobuf::int32 pjtrad_;
  ::google::protobuf::int32 djtrad_;
  float dpdksp1_;
  float dpdksp_;
  float dpdkbp1_;
  float dpdkbp_;
  float leadingindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(78 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static RealTimeResponse_RealTime* default_instance_;
};
// -------------------------------------------------------------------

class RealTimeResponse : public ::google::protobuf::Message {
 public:
  RealTimeResponse();
  virtual ~RealTimeResponse();
  
  RealTimeResponse(const RealTimeResponse& from);
  
  inline RealTimeResponse& operator=(const RealTimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealTimeResponse& default_instance();
  
  void Swap(RealTimeResponse* other);
  
  // implements Message ----------------------------------------------
  
  RealTimeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RealTimeResponse& from);
  void MergeFrom(const RealTimeResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RealTimeResponse_RealTime RealTime;
  
  // accessors -------------------------------------------------------
  
  // repeated .quote.RealTimeResponse.RealTime realtime = 1;
  inline int realtime_size() const;
  inline void clear_realtime();
  static const int kRealtimeFieldNumber = 1;
  inline const ::quote::RealTimeResponse_RealTime& realtime(int index) const;
  inline ::quote::RealTimeResponse_RealTime* mutable_realtime(int index);
  inline ::quote::RealTimeResponse_RealTime* add_realtime();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::RealTimeResponse_RealTime >&
      realtime() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::RealTimeResponse_RealTime >*
      mutable_realtime();
  
  // @@protoc_insertion_point(class_scope:quote.RealTimeResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::quote::RealTimeResponse_RealTime > realtime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static RealTimeResponse* default_instance_;
};
// -------------------------------------------------------------------

class Grid : public ::google::protobuf::Message {
 public:
  Grid();
  virtual ~Grid();
  
  Grid(const Grid& from);
  
  inline Grid& operator=(const Grid& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Grid& default_instance();
  
  void Swap(Grid* other);
  
  // implements Message ----------------------------------------------
  
  Grid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Grid& from);
  void MergeFrom(const Grid& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string secucode = 1;
  inline bool has_secucode() const;
  inline void clear_secucode();
  static const int kSecucodeFieldNumber = 1;
  inline const ::std::string& secucode() const;
  inline void set_secucode(const ::std::string& value);
  inline void set_secucode(const char* value);
  inline void set_secucode(const char* value, size_t size);
  inline ::std::string* mutable_secucode();
  inline ::std::string* release_secucode();
  
  // required int32 exchange = 2;
  inline bool has_exchange() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  inline ::google::protobuf::int32 exchange() const;
  inline void set_exchange(::google::protobuf::int32 value);
  
  // required int32 secutype = 3;
  inline bool has_secutype() const;
  inline void clear_secutype();
  static const int kSecutypeFieldNumber = 3;
  inline ::google::protobuf::int32 secutype() const;
  inline void set_secutype(::google::protobuf::int32 value);
  
  // required int32 tp = 4;
  inline bool has_tp() const;
  inline void clear_tp();
  static const int kTpFieldNumber = 4;
  inline ::google::protobuf::int32 tp() const;
  inline void set_tp(::google::protobuf::int32 value);
  
  // required float open = 5;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 5;
  inline float open() const;
  inline void set_open(float value);
  
  // required float high = 6;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 6;
  inline float high() const;
  inline void set_high(float value);
  
  // required float low = 7;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 7;
  inline float low() const;
  inline void set_low(float value);
  
  // required float close = 8;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 8;
  inline float close() const;
  inline void set_close(float value);
  
  // required int64 vol = 9;
  inline bool has_vol() const;
  inline void clear_vol();
  static const int kVolFieldNumber = 9;
  inline ::google::protobuf::int64 vol() const;
  inline void set_vol(::google::protobuf::int64 value);
  
  // required double amt = 10;
  inline bool has_amt() const;
  inline void clear_amt();
  static const int kAmtFieldNumber = 10;
  inline double amt() const;
  inline void set_amt(double value);
  
  // required float askprice1 = 11;
  inline bool has_askprice1() const;
  inline void clear_askprice1();
  static const int kAskprice1FieldNumber = 11;
  inline float askprice1() const;
  inline void set_askprice1(float value);
  
  // required float bidprice1 = 12;
  inline bool has_bidprice1() const;
  inline void clear_bidprice1();
  static const int kBidprice1FieldNumber = 12;
  inline float bidprice1() const;
  inline void set_bidprice1(float value);
  
  // required float zf = 13;
  inline bool has_zf() const;
  inline void clear_zf();
  static const int kZfFieldNumber = 13;
  inline float zf() const;
  inline void set_zf(float value);
  
  // required float zd = 14;
  inline bool has_zd() const;
  inline void clear_zd();
  static const int kZdFieldNumber = 14;
  inline float zd() const;
  inline void set_zd(float value);
  
  // required float hs = 15;
  inline bool has_hs() const;
  inline void clear_hs();
  static const int kHsFieldNumber = 15;
  inline float hs() const;
  inline void set_hs(float value);
  
  // required float amp = 16;
  inline bool has_amp() const;
  inline void clear_amp();
  static const int kAmpFieldNumber = 16;
  inline float amp() const;
  inline void set_amp(float value);
  
  // required float lb = 17;
  inline bool has_lb() const;
  inline void clear_lb();
  static const int kLbFieldNumber = 17;
  inline float lb() const;
  inline void set_lb(float value);
  
  // required float wb = 18;
  inline bool has_wb() const;
  inline void clear_wb();
  static const int kWbFieldNumber = 18;
  inline float wb() const;
  inline void set_wb(float value);
  
  // required int32 wc = 19;
  inline bool has_wc() const;
  inline void clear_wc();
  static const int kWcFieldNumber = 19;
  inline ::google::protobuf::int32 wc() const;
  inline void set_wc(::google::protobuf::int32 value);
  
  // required int32 xs = 20;
  inline bool has_xs() const;
  inline void clear_xs();
  static const int kXsFieldNumber = 20;
  inline ::google::protobuf::int32 xs() const;
  inline void set_xs(::google::protobuf::int32 value);
  
  // required string nwp = 21;
  inline bool has_nwp() const;
  inline void clear_nwp();
  static const int kNwpFieldNumber = 21;
  inline const ::std::string& nwp() const;
  inline void set_nwp(const ::std::string& value);
  inline void set_nwp(const char* value);
  inline void set_nwp(const char* value, size_t size);
  inline ::std::string* mutable_nwp();
  inline ::std::string* release_nwp();
  
  // @@protoc_insertion_point(class_scope:quote.Grid)
 private:
  inline void set_has_secucode();
  inline void clear_has_secucode();
  inline void set_has_exchange();
  inline void clear_has_exchange();
  inline void set_has_secutype();
  inline void clear_has_secutype();
  inline void set_has_tp();
  inline void clear_has_tp();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_vol();
  inline void clear_has_vol();
  inline void set_has_amt();
  inline void clear_has_amt();
  inline void set_has_askprice1();
  inline void clear_has_askprice1();
  inline void set_has_bidprice1();
  inline void clear_has_bidprice1();
  inline void set_has_zf();
  inline void clear_has_zf();
  inline void set_has_zd();
  inline void clear_has_zd();
  inline void set_has_hs();
  inline void clear_has_hs();
  inline void set_has_amp();
  inline void clear_has_amp();
  inline void set_has_lb();
  inline void clear_has_lb();
  inline void set_has_wb();
  inline void clear_has_wb();
  inline void set_has_wc();
  inline void clear_has_wc();
  inline void set_has_xs();
  inline void clear_has_xs();
  inline void set_has_nwp();
  inline void clear_has_nwp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* secucode_;
  ::google::protobuf::int32 exchange_;
  ::google::protobuf::int32 secutype_;
  ::google::protobuf::int32 tp_;
  float open_;
  float high_;
  float low_;
  ::google::protobuf::int64 vol_;
  float close_;
  float askprice1_;
  double amt_;
  float bidprice1_;
  float zf_;
  float zd_;
  float hs_;
  float amp_;
  float lb_;
  float wb_;
  ::google::protobuf::int32 wc_;
  ::std::string* nwp_;
  ::google::protobuf::int32 xs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static Grid* default_instance_;
};
// -------------------------------------------------------------------

class GridRequest : public ::google::protobuf::Message {
 public:
  GridRequest();
  virtual ~GridRequest();
  
  GridRequest(const GridRequest& from);
  
  inline GridRequest& operator=(const GridRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GridRequest& default_instance();
  
  void Swap(GridRequest* other);
  
  // implements Message ----------------------------------------------
  
  GridRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GridRequest& from);
  void MergeFrom(const GridRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef GridRequest_Field Field;
  static const Field ZQDM = GridRequest_Field_ZQDM;
  static const Field JRKP = GridRequest_Field_JRKP;
  static const Field ZGCJ = GridRequest_Field_ZGCJ;
  static const Field ZDCJ = GridRequest_Field_ZDCJ;
  static const Field ZJCJ = GridRequest_Field_ZJCJ;
  static const Field CJSL = GridRequest_Field_CJSL;
  static const Field CJJE = GridRequest_Field_CJJE;
  static const Field BJW1 = GridRequest_Field_BJW1;
  static const Field SJW1 = GridRequest_Field_SJW1;
  static const Field ZF = GridRequest_Field_ZF;
  static const Field ZD = GridRequest_Field_ZD;
  static const Field HS = GridRequest_Field_HS;
  static const Field AMP = GridRequest_Field_AMP;
  static const Field LB = GridRequest_Field_LB;
  static const Field WB = GridRequest_Field_WB;
  static const Field WC = GridRequest_Field_WC;
  static const Field ZRSP = GridRequest_Field_ZRSP;
  static const Field XS = GridRequest_Field_XS;
  static inline bool Field_IsValid(int value) {
    return GridRequest_Field_IsValid(value);
  }
  static const Field Field_MIN =
    GridRequest_Field_Field_MIN;
  static const Field Field_MAX =
    GridRequest_Field_Field_MAX;
  static const int Field_ARRAYSIZE =
    GridRequest_Field_Field_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Field_descriptor() {
    return GridRequest_Field_descriptor();
  }
  static inline const ::std::string& Field_Name(Field value) {
    return GridRequest_Field_Name(value);
  }
  static inline bool Field_Parse(const ::std::string& name,
      Field* value) {
    return GridRequest_Field_Parse(name, value);
  }
  
  typedef GridRequest_Sort Sort;
  static const Sort ASC = GridRequest_Sort_ASC;
  static const Sort DESC = GridRequest_Sort_DESC;
  static inline bool Sort_IsValid(int value) {
    return GridRequest_Sort_IsValid(value);
  }
  static const Sort Sort_MIN =
    GridRequest_Sort_Sort_MIN;
  static const Sort Sort_MAX =
    GridRequest_Sort_Sort_MAX;
  static const int Sort_ARRAYSIZE =
    GridRequest_Sort_Sort_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sort_descriptor() {
    return GridRequest_Sort_descriptor();
  }
  static inline const ::std::string& Sort_Name(Sort value) {
    return GridRequest_Sort_Name(value);
  }
  static inline bool Sort_Parse(const ::std::string& name,
      Sort* value) {
    return GridRequest_Sort_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated string stockcode = 1;
  inline int stockcode_size() const;
  inline void clear_stockcode();
  static const int kStockcodeFieldNumber = 1;
  inline const ::std::string& stockcode(int index) const;
  inline ::std::string* mutable_stockcode(int index);
  inline void set_stockcode(int index, const ::std::string& value);
  inline void set_stockcode(int index, const char* value);
  inline void set_stockcode(int index, const char* value, size_t size);
  inline ::std::string* add_stockcode();
  inline void add_stockcode(const ::std::string& value);
  inline void add_stockcode(const char* value);
  inline void add_stockcode(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stockcode() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stockcode();
  
  // optional .quote.GridRequest.Field field = 2;
  inline bool has_field() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 2;
  inline ::quote::GridRequest_Field field() const;
  inline void set_field(::quote::GridRequest_Field value);
  
  // optional .quote.GridRequest.Sort sort = 3;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 3;
  inline ::quote::GridRequest_Sort sort() const;
  inline void set_sort(::quote::GridRequest_Sort value);
  
  // @@protoc_insertion_point(class_scope:quote.GridRequest)
 private:
  inline void set_has_field();
  inline void clear_has_field();
  inline void set_has_sort();
  inline void clear_has_sort();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> stockcode_;
  int field_;
  int sort_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static GridRequest* default_instance_;
};
// -------------------------------------------------------------------

class GridResponse : public ::google::protobuf::Message {
 public:
  GridResponse();
  virtual ~GridResponse();
  
  GridResponse(const GridResponse& from);
  
  inline GridResponse& operator=(const GridResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GridResponse& default_instance();
  
  void Swap(GridResponse* other);
  
  // implements Message ----------------------------------------------
  
  GridResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GridResponse& from);
  void MergeFrom(const GridResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .quote.Grid grid = 1;
  inline int grid_size() const;
  inline void clear_grid();
  static const int kGridFieldNumber = 1;
  inline const ::quote::Grid& grid(int index) const;
  inline ::quote::Grid* mutable_grid(int index);
  inline ::quote::Grid* add_grid();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::Grid >&
      grid() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::Grid >*
      mutable_grid();
  
  // @@protoc_insertion_point(class_scope:quote.GridResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::quote::Grid > grid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static GridResponse* default_instance_;
};
// -------------------------------------------------------------------

class GridSortRequest : public ::google::protobuf::Message {
 public:
  GridSortRequest();
  virtual ~GridSortRequest();
  
  GridSortRequest(const GridSortRequest& from);
  
  inline GridSortRequest& operator=(const GridSortRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GridSortRequest& default_instance();
  
  void Swap(GridSortRequest* other);
  
  // implements Message ----------------------------------------------
  
  GridSortRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GridSortRequest& from);
  void MergeFrom(const GridSortRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef GridSortRequest_Field Field;
  static const Field ZQDM = GridSortRequest_Field_ZQDM;
  static const Field JRKP = GridSortRequest_Field_JRKP;
  static const Field ZGCJ = GridSortRequest_Field_ZGCJ;
  static const Field ZDCJ = GridSortRequest_Field_ZDCJ;
  static const Field ZJCJ = GridSortRequest_Field_ZJCJ;
  static const Field CJSL = GridSortRequest_Field_CJSL;
  static const Field CJJE = GridSortRequest_Field_CJJE;
  static const Field BJW1 = GridSortRequest_Field_BJW1;
  static const Field SJW1 = GridSortRequest_Field_SJW1;
  static const Field ZF = GridSortRequest_Field_ZF;
  static const Field ZD = GridSortRequest_Field_ZD;
  static const Field HS = GridSortRequest_Field_HS;
  static const Field AMP = GridSortRequest_Field_AMP;
  static const Field LB = GridSortRequest_Field_LB;
  static const Field WB = GridSortRequest_Field_WB;
  static const Field WC = GridSortRequest_Field_WC;
  static const Field ZRSP = GridSortRequest_Field_ZRSP;
  static const Field XS = GridSortRequest_Field_XS;
  static inline bool Field_IsValid(int value) {
    return GridSortRequest_Field_IsValid(value);
  }
  static const Field Field_MIN =
    GridSortRequest_Field_Field_MIN;
  static const Field Field_MAX =
    GridSortRequest_Field_Field_MAX;
  static const int Field_ARRAYSIZE =
    GridSortRequest_Field_Field_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Field_descriptor() {
    return GridSortRequest_Field_descriptor();
  }
  static inline const ::std::string& Field_Name(Field value) {
    return GridSortRequest_Field_Name(value);
  }
  static inline bool Field_Parse(const ::std::string& name,
      Field* value) {
    return GridSortRequest_Field_Parse(name, value);
  }
  
  typedef GridSortRequest_Sort Sort;
  static const Sort ASC = GridSortRequest_Sort_ASC;
  static const Sort DESC = GridSortRequest_Sort_DESC;
  static inline bool Sort_IsValid(int value) {
    return GridSortRequest_Sort_IsValid(value);
  }
  static const Sort Sort_MIN =
    GridSortRequest_Sort_Sort_MIN;
  static const Sort Sort_MAX =
    GridSortRequest_Sort_Sort_MAX;
  static const int Sort_ARRAYSIZE =
    GridSortRequest_Sort_Sort_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sort_descriptor() {
    return GridSortRequest_Sort_descriptor();
  }
  static inline const ::std::string& Sort_Name(Sort value) {
    return GridSortRequest_Sort_Name(value);
  }
  static inline bool Sort_Parse(const ::std::string& name,
      Sort* value) {
    return GridSortRequest_Sort_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated int32 secutype = 1;
  inline int secutype_size() const;
  inline void clear_secutype();
  static const int kSecutypeFieldNumber = 1;
  inline ::google::protobuf::int32 secutype(int index) const;
  inline void set_secutype(int index, ::google::protobuf::int32 value);
  inline void add_secutype(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      secutype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_secutype();
  
  // required bool block = 2;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 2;
  inline bool block() const;
  inline void set_block(bool value);
  
  // optional int32 page = 3;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 3;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);
  
  // optional int32 startidx = 4;
  inline bool has_startidx() const;
  inline void clear_startidx();
  static const int kStartidxFieldNumber = 4;
  inline ::google::protobuf::int32 startidx() const;
  inline void set_startidx(::google::protobuf::int32 value);
  
  // required int32 len = 5;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 5;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);
  
  // required .quote.GridSortRequest.Field field = 6;
  inline bool has_field() const;
  inline void clear_field();
  static const int kFieldFieldNumber = 6;
  inline ::quote::GridSortRequest_Field field() const;
  inline void set_field(::quote::GridSortRequest_Field value);
  
  // required .quote.GridSortRequest.Sort sort = 7;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 7;
  inline ::quote::GridSortRequest_Sort sort() const;
  inline void set_sort(::quote::GridSortRequest_Sort value);
  
  // @@protoc_insertion_point(class_scope:quote.GridSortRequest)
 private:
  inline void set_has_block();
  inline void clear_has_block();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_startidx();
  inline void clear_has_startidx();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_field();
  inline void clear_has_field();
  inline void set_has_sort();
  inline void clear_has_sort();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > secutype_;
  bool block_;
  ::google::protobuf::int32 page_;
  ::google::protobuf::int32 startidx_;
  ::google::protobuf::int32 len_;
  int field_;
  int sort_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static GridSortRequest* default_instance_;
};
// -------------------------------------------------------------------

class GridSortResponse : public ::google::protobuf::Message {
 public:
  GridSortResponse();
  virtual ~GridSortResponse();
  
  GridSortResponse(const GridSortResponse& from);
  
  inline GridSortResponse& operator=(const GridSortResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GridSortResponse& default_instance();
  
  void Swap(GridSortResponse* other);
  
  // implements Message ----------------------------------------------
  
  GridSortResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GridSortResponse& from);
  void MergeFrom(const GridSortResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .quote.Grid grid = 1;
  inline int grid_size() const;
  inline void clear_grid();
  static const int kGridFieldNumber = 1;
  inline const ::quote::Grid& grid(int index) const;
  inline ::quote::Grid* mutable_grid(int index);
  inline ::quote::Grid* add_grid();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::Grid >&
      grid() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::Grid >*
      mutable_grid();
  
  // @@protoc_insertion_point(class_scope:quote.GridSortResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::quote::Grid > grid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static GridSortResponse* default_instance_;
};
// -------------------------------------------------------------------

class DetailRequest : public ::google::protobuf::Message {
 public:
  DetailRequest();
  virtual ~DetailRequest();
  
  DetailRequest(const DetailRequest& from);
  
  inline DetailRequest& operator=(const DetailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DetailRequest& default_instance();
  
  void Swap(DetailRequest* other);
  
  // implements Message ----------------------------------------------
  
  DetailRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetailRequest& from);
  void MergeFrom(const DetailRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DetailRequest_Direction Direction;
  static const Direction FORWARD = DetailRequest_Direction_FORWARD;
  static const Direction BACKWARD = DetailRequest_Direction_BACKWARD;
  static inline bool Direction_IsValid(int value) {
    return DetailRequest_Direction_IsValid(value);
  }
  static const Direction Direction_MIN =
    DetailRequest_Direction_Direction_MIN;
  static const Direction Direction_MAX =
    DetailRequest_Direction_Direction_MAX;
  static const int Direction_ARRAYSIZE =
    DetailRequest_Direction_Direction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Direction_descriptor() {
    return DetailRequest_Direction_descriptor();
  }
  static inline const ::std::string& Direction_Name(Direction value) {
    return DetailRequest_Direction_Name(value);
  }
  static inline bool Direction_Parse(const ::std::string& name,
      Direction* value) {
    return DetailRequest_Direction_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string stockcode = 1;
  inline bool has_stockcode() const;
  inline void clear_stockcode();
  static const int kStockcodeFieldNumber = 1;
  inline const ::std::string& stockcode() const;
  inline void set_stockcode(const ::std::string& value);
  inline void set_stockcode(const char* value);
  inline void set_stockcode(const char* value, size_t size);
  inline ::std::string* mutable_stockcode();
  inline ::std::string* release_stockcode();
  
  // required int32 len = 2;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 2;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);
  
  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional .quote.DetailRequest.Direction direction = 4;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 4;
  inline ::quote::DetailRequest_Direction direction() const;
  inline void set_direction(::quote::DetailRequest_Direction value);
  
  // @@protoc_insertion_point(class_scope:quote.DetailRequest)
 private:
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_direction();
  inline void clear_has_direction();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stockcode_;
  ::google::protobuf::int32 len_;
  ::google::protobuf::int32 id_;
  int direction_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static DetailRequest* default_instance_;
};
// -------------------------------------------------------------------

class MinRequest : public ::google::protobuf::Message {
 public:
  MinRequest();
  virtual ~MinRequest();
  
  MinRequest(const MinRequest& from);
  
  inline MinRequest& operator=(const MinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MinRequest& default_instance();
  
  void Swap(MinRequest* other);
  
  // implements Message ----------------------------------------------
  
  MinRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MinRequest& from);
  void MergeFrom(const MinRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string stockcode = 1;
  inline bool has_stockcode() const;
  inline void clear_stockcode();
  static const int kStockcodeFieldNumber = 1;
  inline const ::std::string& stockcode() const;
  inline void set_stockcode(const ::std::string& value);
  inline void set_stockcode(const char* value);
  inline void set_stockcode(const char* value, size_t size);
  inline ::std::string* mutable_stockcode();
  inline ::std::string* release_stockcode();
  
  // repeated int32 day = 2;
  inline int day_size() const;
  inline void clear_day();
  static const int kDayFieldNumber = 2;
  inline ::google::protobuf::int32 day(int index) const;
  inline void set_day(int index, ::google::protobuf::int32 value);
  inline void add_day(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      day() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_day();
  
  // @@protoc_insertion_point(class_scope:quote.MinRequest)
 private:
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stockcode_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > day_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static MinRequest* default_instance_;
};
// -------------------------------------------------------------------

class StatusRequest : public ::google::protobuf::Message {
 public:
  StatusRequest();
  virtual ~StatusRequest();
  
  StatusRequest(const StatusRequest& from);
  
  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusRequest& default_instance();
  
  void Swap(StatusRequest* other);
  
  // implements Message ----------------------------------------------
  
  StatusRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusRequest& from);
  void MergeFrom(const StatusRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string stockcode = 1;
  inline int stockcode_size() const;
  inline void clear_stockcode();
  static const int kStockcodeFieldNumber = 1;
  inline const ::std::string& stockcode(int index) const;
  inline ::std::string* mutable_stockcode(int index);
  inline void set_stockcode(int index, const ::std::string& value);
  inline void set_stockcode(int index, const char* value);
  inline void set_stockcode(int index, const char* value, size_t size);
  inline ::std::string* add_stockcode();
  inline void add_stockcode(const ::std::string& value);
  inline void add_stockcode(const char* value);
  inline void add_stockcode(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stockcode() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stockcode();
  
  // @@protoc_insertion_point(class_scope:quote.StatusRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> stockcode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static StatusRequest* default_instance_;
};
// -------------------------------------------------------------------

class StatusResponse_Status : public ::google::protobuf::Message {
 public:
  StatusResponse_Status();
  virtual ~StatusResponse_Status();
  
  StatusResponse_Status(const StatusResponse_Status& from);
  
  inline StatusResponse_Status& operator=(const StatusResponse_Status& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusResponse_Status& default_instance();
  
  void Swap(StatusResponse_Status* other);
  
  // implements Message ----------------------------------------------
  
  StatusResponse_Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusResponse_Status& from);
  void MergeFrom(const StatusResponse_Status& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string secucode = 1;
  inline bool has_secucode() const;
  inline void clear_secucode();
  static const int kSecucodeFieldNumber = 1;
  inline const ::std::string& secucode() const;
  inline void set_secucode(const ::std::string& value);
  inline void set_secucode(const char* value);
  inline void set_secucode(const char* value, size_t size);
  inline ::std::string* mutable_secucode();
  inline ::std::string* release_secucode();
  
  // required int32 exchange = 2;
  inline bool has_exchange() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  inline ::google::protobuf::int32 exchange() const;
  inline void set_exchange(::google::protobuf::int32 value);
  
  // required float close = 3;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 3;
  inline float close() const;
  inline void set_close(float value);
  
  // required float zf = 4;
  inline bool has_zf() const;
  inline void clear_zf();
  static const int kZfFieldNumber = 4;
  inline float zf() const;
  inline void set_zf(float value);
  
  // required float zd = 5;
  inline bool has_zd() const;
  inline void clear_zd();
  static const int kZdFieldNumber = 5;
  inline float zd() const;
  inline void set_zd(float value);
  
  // required double amt = 6;
  inline bool has_amt() const;
  inline void clear_amt();
  static const int kAmtFieldNumber = 6;
  inline double amt() const;
  inline void set_amt(double value);
  
  // @@protoc_insertion_point(class_scope:quote.StatusResponse.Status)
 private:
  inline void set_has_secucode();
  inline void clear_has_secucode();
  inline void set_has_exchange();
  inline void clear_has_exchange();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_zf();
  inline void clear_has_zf();
  inline void set_has_zd();
  inline void clear_has_zd();
  inline void set_has_amt();
  inline void clear_has_amt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* secucode_;
  ::google::protobuf::int32 exchange_;
  float close_;
  float zf_;
  float zd_;
  double amt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static StatusResponse_Status* default_instance_;
};
// -------------------------------------------------------------------

class StatusResponse : public ::google::protobuf::Message {
 public:
  StatusResponse();
  virtual ~StatusResponse();
  
  StatusResponse(const StatusResponse& from);
  
  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusResponse& default_instance();
  
  void Swap(StatusResponse* other);
  
  // implements Message ----------------------------------------------
  
  StatusResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusResponse& from);
  void MergeFrom(const StatusResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef StatusResponse_Status Status;
  
  // accessors -------------------------------------------------------
  
  // repeated .quote.StatusResponse.Status status = 1;
  inline int status_size() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::quote::StatusResponse_Status& status(int index) const;
  inline ::quote::StatusResponse_Status* mutable_status(int index);
  inline ::quote::StatusResponse_Status* add_status();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::StatusResponse_Status >&
      status() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::StatusResponse_Status >*
      mutable_status();
  
  // @@protoc_insertion_point(class_scope:quote.StatusResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::quote::StatusResponse_Status > status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static StatusResponse* default_instance_;
};
// -------------------------------------------------------------------

class ZhpmRequest : public ::google::protobuf::Message {
 public:
  ZhpmRequest();
  virtual ~ZhpmRequest();
  
  ZhpmRequest(const ZhpmRequest& from);
  
  inline ZhpmRequest& operator=(const ZhpmRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZhpmRequest& default_instance();
  
  void Swap(ZhpmRequest* other);
  
  // implements Message ----------------------------------------------
  
  ZhpmRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZhpmRequest& from);
  void MergeFrom(const ZhpmRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 secutype = 1;
  inline int secutype_size() const;
  inline void clear_secutype();
  static const int kSecutypeFieldNumber = 1;
  inline ::google::protobuf::int32 secutype(int index) const;
  inline void set_secutype(int index, ::google::protobuf::int32 value);
  inline void add_secutype(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      secutype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_secutype();
  
  // repeated int32 zhpmtype = 2;
  inline int zhpmtype_size() const;
  inline void clear_zhpmtype();
  static const int kZhpmtypeFieldNumber = 2;
  inline ::google::protobuf::int32 zhpmtype(int index) const;
  inline void set_zhpmtype(int index, ::google::protobuf::int32 value);
  inline void add_zhpmtype(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      zhpmtype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_zhpmtype();
  
  // required int32 len = 3;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 3;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:quote.ZhpmRequest)
 private:
  inline void set_has_len();
  inline void clear_has_len();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > secutype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > zhpmtype_;
  ::google::protobuf::int32 len_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static ZhpmRequest* default_instance_;
};
// -------------------------------------------------------------------

class ZhpmResponse_Zhpm_ZhpmStock : public ::google::protobuf::Message {
 public:
  ZhpmResponse_Zhpm_ZhpmStock();
  virtual ~ZhpmResponse_Zhpm_ZhpmStock();
  
  ZhpmResponse_Zhpm_ZhpmStock(const ZhpmResponse_Zhpm_ZhpmStock& from);
  
  inline ZhpmResponse_Zhpm_ZhpmStock& operator=(const ZhpmResponse_Zhpm_ZhpmStock& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZhpmResponse_Zhpm_ZhpmStock& default_instance();
  
  void Swap(ZhpmResponse_Zhpm_ZhpmStock* other);
  
  // implements Message ----------------------------------------------
  
  ZhpmResponse_Zhpm_ZhpmStock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZhpmResponse_Zhpm_ZhpmStock& from);
  void MergeFrom(const ZhpmResponse_Zhpm_ZhpmStock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string secucode = 1;
  inline bool has_secucode() const;
  inline void clear_secucode();
  static const int kSecucodeFieldNumber = 1;
  inline const ::std::string& secucode() const;
  inline void set_secucode(const ::std::string& value);
  inline void set_secucode(const char* value);
  inline void set_secucode(const char* value, size_t size);
  inline ::std::string* mutable_secucode();
  inline ::std::string* release_secucode();
  
  // required int32 exchange = 2;
  inline bool has_exchange() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  inline ::google::protobuf::int32 exchange() const;
  inline void set_exchange(::google::protobuf::int32 value);
  
  // required float close = 3;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 3;
  inline float close() const;
  inline void set_close(float value);
  
  // required float zf = 4;
  inline bool has_zf() const;
  inline void clear_zf();
  static const int kZfFieldNumber = 4;
  inline float zf() const;
  inline void set_zf(float value);
  
  // required double value = 5;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline double value() const;
  inline void set_value(double value);
  
  // @@protoc_insertion_point(class_scope:quote.ZhpmResponse.Zhpm.ZhpmStock)
 private:
  inline void set_has_secucode();
  inline void clear_has_secucode();
  inline void set_has_exchange();
  inline void clear_has_exchange();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_zf();
  inline void clear_has_zf();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* secucode_;
  ::google::protobuf::int32 exchange_;
  float close_;
  double value_;
  float zf_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static ZhpmResponse_Zhpm_ZhpmStock* default_instance_;
};
// -------------------------------------------------------------------

class ZhpmResponse_Zhpm : public ::google::protobuf::Message {
 public:
  ZhpmResponse_Zhpm();
  virtual ~ZhpmResponse_Zhpm();
  
  ZhpmResponse_Zhpm(const ZhpmResponse_Zhpm& from);
  
  inline ZhpmResponse_Zhpm& operator=(const ZhpmResponse_Zhpm& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZhpmResponse_Zhpm& default_instance();
  
  void Swap(ZhpmResponse_Zhpm* other);
  
  // implements Message ----------------------------------------------
  
  ZhpmResponse_Zhpm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZhpmResponse_Zhpm& from);
  void MergeFrom(const ZhpmResponse_Zhpm& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ZhpmResponse_Zhpm_ZhpmStock ZhpmStock;
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // repeated .quote.ZhpmResponse.Zhpm.ZhpmStock zhpmstock = 2;
  inline int zhpmstock_size() const;
  inline void clear_zhpmstock();
  static const int kZhpmstockFieldNumber = 2;
  inline const ::quote::ZhpmResponse_Zhpm_ZhpmStock& zhpmstock(int index) const;
  inline ::quote::ZhpmResponse_Zhpm_ZhpmStock* mutable_zhpmstock(int index);
  inline ::quote::ZhpmResponse_Zhpm_ZhpmStock* add_zhpmstock();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::ZhpmResponse_Zhpm_ZhpmStock >&
      zhpmstock() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::ZhpmResponse_Zhpm_ZhpmStock >*
      mutable_zhpmstock();
  
  // @@protoc_insertion_point(class_scope:quote.ZhpmResponse.Zhpm)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::quote::ZhpmResponse_Zhpm_ZhpmStock > zhpmstock_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static ZhpmResponse_Zhpm* default_instance_;
};
// -------------------------------------------------------------------

class ZhpmResponse : public ::google::protobuf::Message {
 public:
  ZhpmResponse();
  virtual ~ZhpmResponse();
  
  ZhpmResponse(const ZhpmResponse& from);
  
  inline ZhpmResponse& operator=(const ZhpmResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZhpmResponse& default_instance();
  
  void Swap(ZhpmResponse* other);
  
  // implements Message ----------------------------------------------
  
  ZhpmResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZhpmResponse& from);
  void MergeFrom(const ZhpmResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ZhpmResponse_Zhpm Zhpm;
  
  // accessors -------------------------------------------------------
  
  // repeated .quote.ZhpmResponse.Zhpm zhpm = 1;
  inline int zhpm_size() const;
  inline void clear_zhpm();
  static const int kZhpmFieldNumber = 1;
  inline const ::quote::ZhpmResponse_Zhpm& zhpm(int index) const;
  inline ::quote::ZhpmResponse_Zhpm* mutable_zhpm(int index);
  inline ::quote::ZhpmResponse_Zhpm* add_zhpm();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::ZhpmResponse_Zhpm >&
      zhpm() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::ZhpmResponse_Zhpm >*
      mutable_zhpm();
  
  // @@protoc_insertion_point(class_scope:quote.ZhpmResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::quote::ZhpmResponse_Zhpm > zhpm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static ZhpmResponse* default_instance_;
};
// -------------------------------------------------------------------

class CandleRequest : public ::google::protobuf::Message {
 public:
  CandleRequest();
  virtual ~CandleRequest();
  
  CandleRequest(const CandleRequest& from);
  
  inline CandleRequest& operator=(const CandleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CandleRequest& default_instance();
  
  void Swap(CandleRequest* other);
  
  // implements Message ----------------------------------------------
  
  CandleRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CandleRequest& from);
  void MergeFrom(const CandleRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CandleRequest_CandleCycle CandleCycle;
  static const CandleCycle DAY = CandleRequest_CandleCycle_DAY;
  static const CandleCycle WEEK = CandleRequest_CandleCycle_WEEK;
  static const CandleCycle MONTH = CandleRequest_CandleCycle_MONTH;
  static const CandleCycle YEAR = CandleRequest_CandleCycle_YEAR;
  static const CandleCycle MIN1 = CandleRequest_CandleCycle_MIN1;
  static const CandleCycle MIN5 = CandleRequest_CandleCycle_MIN5;
  static const CandleCycle MIN15 = CandleRequest_CandleCycle_MIN15;
  static const CandleCycle MIN30 = CandleRequest_CandleCycle_MIN30;
  static const CandleCycle MIN60 = CandleRequest_CandleCycle_MIN60;
  static inline bool CandleCycle_IsValid(int value) {
    return CandleRequest_CandleCycle_IsValid(value);
  }
  static const CandleCycle CandleCycle_MIN =
    CandleRequest_CandleCycle_CandleCycle_MIN;
  static const CandleCycle CandleCycle_MAX =
    CandleRequest_CandleCycle_CandleCycle_MAX;
  static const int CandleCycle_ARRAYSIZE =
    CandleRequest_CandleCycle_CandleCycle_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CandleCycle_descriptor() {
    return CandleRequest_CandleCycle_descriptor();
  }
  static inline const ::std::string& CandleCycle_Name(CandleCycle value) {
    return CandleRequest_CandleCycle_Name(value);
  }
  static inline bool CandleCycle_Parse(const ::std::string& name,
      CandleCycle* value) {
    return CandleRequest_CandleCycle_Parse(name, value);
  }
  
  typedef CandleRequest_Direction Direction;
  static const Direction FORWARD = CandleRequest_Direction_FORWARD;
  static const Direction BACKWARD = CandleRequest_Direction_BACKWARD;
  static inline bool Direction_IsValid(int value) {
    return CandleRequest_Direction_IsValid(value);
  }
  static const Direction Direction_MIN =
    CandleRequest_Direction_Direction_MIN;
  static const Direction Direction_MAX =
    CandleRequest_Direction_Direction_MAX;
  static const int Direction_ARRAYSIZE =
    CandleRequest_Direction_Direction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Direction_descriptor() {
    return CandleRequest_Direction_descriptor();
  }
  static inline const ::std::string& Direction_Name(Direction value) {
    return CandleRequest_Direction_Name(value);
  }
  static inline bool Direction_Parse(const ::std::string& name,
      Direction* value) {
    return CandleRequest_Direction_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string stockcode = 1;
  inline bool has_stockcode() const;
  inline void clear_stockcode();
  static const int kStockcodeFieldNumber = 1;
  inline const ::std::string& stockcode() const;
  inline void set_stockcode(const ::std::string& value);
  inline void set_stockcode(const char* value);
  inline void set_stockcode(const char* value, size_t size);
  inline ::std::string* mutable_stockcode();
  inline ::std::string* release_stockcode();
  
  // required .quote.CandleRequest.CandleCycle candlecycle = 2;
  inline bool has_candlecycle() const;
  inline void clear_candlecycle();
  static const int kCandlecycleFieldNumber = 2;
  inline ::quote::CandleRequest_CandleCycle candlecycle() const;
  inline void set_candlecycle(::quote::CandleRequest_CandleCycle value);
  
  // required int32 len = 3;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 3;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);
  
  // optional string date = 4;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 4;
  inline const ::std::string& date() const;
  inline void set_date(const ::std::string& value);
  inline void set_date(const char* value);
  inline void set_date(const char* value, size_t size);
  inline ::std::string* mutable_date();
  inline ::std::string* release_date();
  
  // optional int32 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required .quote.CandleRequest.Direction direction = 6;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 6;
  inline ::quote::CandleRequest_Direction direction() const;
  inline void set_direction(::quote::CandleRequest_Direction value);
  
  // @@protoc_insertion_point(class_scope:quote.CandleRequest)
 private:
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_candlecycle();
  inline void clear_has_candlecycle();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_direction();
  inline void clear_has_direction();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stockcode_;
  int candlecycle_;
  ::google::protobuf::int32 len_;
  ::std::string* date_;
  ::google::protobuf::int32 id_;
  int direction_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static CandleRequest* default_instance_;
};
// -------------------------------------------------------------------

class StockRequest : public ::google::protobuf::Message {
 public:
  StockRequest();
  virtual ~StockRequest();
  
  StockRequest(const StockRequest& from);
  
  inline StockRequest& operator=(const StockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StockRequest& default_instance();
  
  void Swap(StockRequest* other);
  
  // implements Message ----------------------------------------------
  
  StockRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockRequest& from);
  void MergeFrom(const StockRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 exchange = 1;
  inline bool has_exchange() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  inline ::google::protobuf::int32 exchange() const;
  inline void set_exchange(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:quote.StockRequest)
 private:
  inline void set_has_exchange();
  inline void clear_has_exchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 exchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static StockRequest* default_instance_;
};
// -------------------------------------------------------------------

class FinanceRequest : public ::google::protobuf::Message {
 public:
  FinanceRequest();
  virtual ~FinanceRequest();
  
  FinanceRequest(const FinanceRequest& from);
  
  inline FinanceRequest& operator=(const FinanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FinanceRequest& default_instance();
  
  void Swap(FinanceRequest* other);
  
  // implements Message ----------------------------------------------
  
  FinanceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FinanceRequest& from);
  void MergeFrom(const FinanceRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 exchange = 1;
  inline bool has_exchange() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  inline ::google::protobuf::int32 exchange() const;
  inline void set_exchange(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:quote.FinanceRequest)
 private:
  inline void set_has_exchange();
  inline void clear_has_exchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 exchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static FinanceRequest* default_instance_;
};
// -------------------------------------------------------------------

class WeightRequest : public ::google::protobuf::Message {
 public:
  WeightRequest();
  virtual ~WeightRequest();
  
  WeightRequest(const WeightRequest& from);
  
  inline WeightRequest& operator=(const WeightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WeightRequest& default_instance();
  
  void Swap(WeightRequest* other);
  
  // implements Message ----------------------------------------------
  
  WeightRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeightRequest& from);
  void MergeFrom(const WeightRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string secucode = 1;
  inline bool has_secucode() const;
  inline void clear_secucode();
  static const int kSecucodeFieldNumber = 1;
  inline const ::std::string& secucode() const;
  inline void set_secucode(const ::std::string& value);
  inline void set_secucode(const char* value);
  inline void set_secucode(const char* value, size_t size);
  inline ::std::string* mutable_secucode();
  inline ::std::string* release_secucode();
  
  // @@protoc_insertion_point(class_scope:quote.WeightRequest)
 private:
  inline void set_has_secucode();
  inline void clear_has_secucode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* secucode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static WeightRequest* default_instance_;
};
// -------------------------------------------------------------------

class BlockRequest : public ::google::protobuf::Message {
 public:
  BlockRequest();
  virtual ~BlockRequest();
  
  BlockRequest(const BlockRequest& from);
  
  inline BlockRequest& operator=(const BlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockRequest& default_instance();
  
  void Swap(BlockRequest* other);
  
  // implements Message ----------------------------------------------
  
  BlockRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockRequest& from);
  void MergeFrom(const BlockRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef BlockRequest_Block Block;
  static const Block BLOCK = BlockRequest_Block_BLOCK;
  static const Block BLOCKDETAIL = BlockRequest_Block_BLOCKDETAIL;
  static inline bool Block_IsValid(int value) {
    return BlockRequest_Block_IsValid(value);
  }
  static const Block Block_MIN =
    BlockRequest_Block_Block_MIN;
  static const Block Block_MAX =
    BlockRequest_Block_Block_MAX;
  static const int Block_ARRAYSIZE =
    BlockRequest_Block_Block_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Block_descriptor() {
    return BlockRequest_Block_descriptor();
  }
  static inline const ::std::string& Block_Name(Block value) {
    return BlockRequest_Block_Name(value);
  }
  static inline bool Block_Parse(const ::std::string& name,
      Block* value) {
    return BlockRequest_Block_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .quote.BlockRequest.Block block = 1;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 1;
  inline ::quote::BlockRequest_Block block() const;
  inline void set_block(::quote::BlockRequest_Block value);
  
  // @@protoc_insertion_point(class_scope:quote.BlockRequest)
 private:
  inline void set_has_block();
  inline void clear_has_block();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int block_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static BlockRequest* default_instance_;
};
// -------------------------------------------------------------------

class LargeRequest : public ::google::protobuf::Message {
 public:
  LargeRequest();
  virtual ~LargeRequest();
  
  LargeRequest(const LargeRequest& from);
  
  inline LargeRequest& operator=(const LargeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LargeRequest& default_instance();
  
  void Swap(LargeRequest* other);
  
  // implements Message ----------------------------------------------
  
  LargeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LargeRequest& from);
  void MergeFrom(const LargeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 len = 1;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 1;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:quote.LargeRequest)
 private:
  inline void set_has_len();
  inline void clear_has_len();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 len_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static LargeRequest* default_instance_;
};
// -------------------------------------------------------------------

class PriceRequest : public ::google::protobuf::Message {
 public:
  PriceRequest();
  virtual ~PriceRequest();
  
  PriceRequest(const PriceRequest& from);
  
  inline PriceRequest& operator=(const PriceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PriceRequest& default_instance();
  
  void Swap(PriceRequest* other);
  
  // implements Message ----------------------------------------------
  
  PriceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PriceRequest& from);
  void MergeFrom(const PriceRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PriceRequest_Direction Direction;
  static const Direction FORWARD = PriceRequest_Direction_FORWARD;
  static const Direction BACKWARD = PriceRequest_Direction_BACKWARD;
  static inline bool Direction_IsValid(int value) {
    return PriceRequest_Direction_IsValid(value);
  }
  static const Direction Direction_MIN =
    PriceRequest_Direction_Direction_MIN;
  static const Direction Direction_MAX =
    PriceRequest_Direction_Direction_MAX;
  static const int Direction_ARRAYSIZE =
    PriceRequest_Direction_Direction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Direction_descriptor() {
    return PriceRequest_Direction_descriptor();
  }
  static inline const ::std::string& Direction_Name(Direction value) {
    return PriceRequest_Direction_Name(value);
  }
  static inline bool Direction_Parse(const ::std::string& name,
      Direction* value) {
    return PriceRequest_Direction_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string stockcode = 1;
  inline bool has_stockcode() const;
  inline void clear_stockcode();
  static const int kStockcodeFieldNumber = 1;
  inline const ::std::string& stockcode() const;
  inline void set_stockcode(const ::std::string& value);
  inline void set_stockcode(const char* value);
  inline void set_stockcode(const char* value, size_t size);
  inline ::std::string* mutable_stockcode();
  inline ::std::string* release_stockcode();
  
  // required int32 len = 2;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 2;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);
  
  // optional float close = 3;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 3;
  inline float close() const;
  inline void set_close(float value);
  
  // optional .quote.PriceRequest.Direction direction = 4;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 4;
  inline ::quote::PriceRequest_Direction direction() const;
  inline void set_direction(::quote::PriceRequest_Direction value);
  
  // @@protoc_insertion_point(class_scope:quote.PriceRequest)
 private:
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_direction();
  inline void clear_has_direction();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stockcode_;
  ::google::protobuf::int32 len_;
  float close_;
  int direction_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static PriceRequest* default_instance_;
};
// -------------------------------------------------------------------

class PriceResponse_Price : public ::google::protobuf::Message {
 public:
  PriceResponse_Price();
  virtual ~PriceResponse_Price();
  
  PriceResponse_Price(const PriceResponse_Price& from);
  
  inline PriceResponse_Price& operator=(const PriceResponse_Price& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PriceResponse_Price& default_instance();
  
  void Swap(PriceResponse_Price* other);
  
  // implements Message ----------------------------------------------
  
  PriceResponse_Price* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PriceResponse_Price& from);
  void MergeFrom(const PriceResponse_Price& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float close = 1;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 1;
  inline float close() const;
  inline void set_close(float value);
  
  // required double sumxsb = 2;
  inline bool has_sumxsb() const;
  inline void clear_sumxsb();
  static const int kSumxsbFieldNumber = 2;
  inline double sumxsb() const;
  inline void set_sumxsb(double value);
  
  // required double sumxeb = 3;
  inline bool has_sumxeb() const;
  inline void clear_sumxeb();
  static const int kSumxebFieldNumber = 3;
  inline double sumxeb() const;
  inline void set_sumxeb(double value);
  
  // required double sumxs = 4;
  inline bool has_sumxs() const;
  inline void clear_sumxs();
  static const int kSumxsFieldNumber = 4;
  inline double sumxs() const;
  inline void set_sumxs(double value);
  
  // required double sumxe = 5;
  inline bool has_sumxe() const;
  inline void clear_sumxe();
  static const int kSumxeFieldNumber = 5;
  inline double sumxe() const;
  inline void set_sumxe(double value);
  
  // @@protoc_insertion_point(class_scope:quote.PriceResponse.Price)
 private:
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_sumxsb();
  inline void clear_has_sumxsb();
  inline void set_has_sumxeb();
  inline void clear_has_sumxeb();
  inline void set_has_sumxs();
  inline void clear_has_sumxs();
  inline void set_has_sumxe();
  inline void clear_has_sumxe();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double sumxsb_;
  double sumxeb_;
  double sumxs_;
  double sumxe_;
  float close_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static PriceResponse_Price* default_instance_;
};
// -------------------------------------------------------------------

class PriceResponse : public ::google::protobuf::Message {
 public:
  PriceResponse();
  virtual ~PriceResponse();
  
  PriceResponse(const PriceResponse& from);
  
  inline PriceResponse& operator=(const PriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PriceResponse& default_instance();
  
  void Swap(PriceResponse* other);
  
  // implements Message ----------------------------------------------
  
  PriceResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PriceResponse& from);
  void MergeFrom(const PriceResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PriceResponse_Price Price;
  
  // accessors -------------------------------------------------------
  
  // required double maxsumxs = 1;
  inline bool has_maxsumxs() const;
  inline void clear_maxsumxs();
  static const int kMaxsumxsFieldNumber = 1;
  inline double maxsumxs() const;
  inline void set_maxsumxs(double value);
  
  // required double maxsumxe = 2;
  inline bool has_maxsumxe() const;
  inline void clear_maxsumxe();
  static const int kMaxsumxeFieldNumber = 2;
  inline double maxsumxe() const;
  inline void set_maxsumxe(double value);
  
  // repeated .quote.PriceResponse.Price price = 3;
  inline int price_size() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline const ::quote::PriceResponse_Price& price(int index) const;
  inline ::quote::PriceResponse_Price* mutable_price(int index);
  inline ::quote::PriceResponse_Price* add_price();
  inline const ::google::protobuf::RepeatedPtrField< ::quote::PriceResponse_Price >&
      price() const;
  inline ::google::protobuf::RepeatedPtrField< ::quote::PriceResponse_Price >*
      mutable_price();
  
  // @@protoc_insertion_point(class_scope:quote.PriceResponse)
 private:
  inline void set_has_maxsumxs();
  inline void clear_has_maxsumxs();
  inline void set_has_maxsumxe();
  inline void clear_has_maxsumxe();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double maxsumxs_;
  double maxsumxe_;
  ::google::protobuf::RepeatedPtrField< ::quote::PriceResponse_Price > price_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_communication_2eproto();
  friend void protobuf_AssignDesc_communication_2eproto();
  friend void protobuf_ShutdownFile_communication_2eproto();
  
  void InitAsDefaultInstance();
  static PriceResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// RealTimeRequest

// repeated string stockcode = 1;
inline int RealTimeRequest::stockcode_size() const {
  return stockcode_.size();
}
inline void RealTimeRequest::clear_stockcode() {
  stockcode_.Clear();
}
inline const ::std::string& RealTimeRequest::stockcode(int index) const {
  return stockcode_.Get(index);
}
inline ::std::string* RealTimeRequest::mutable_stockcode(int index) {
  return stockcode_.Mutable(index);
}
inline void RealTimeRequest::set_stockcode(int index, const ::std::string& value) {
  stockcode_.Mutable(index)->assign(value);
}
inline void RealTimeRequest::set_stockcode(int index, const char* value) {
  stockcode_.Mutable(index)->assign(value);
}
inline void RealTimeRequest::set_stockcode(int index, const char* value, size_t size) {
  stockcode_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RealTimeRequest::add_stockcode() {
  return stockcode_.Add();
}
inline void RealTimeRequest::add_stockcode(const ::std::string& value) {
  stockcode_.Add()->assign(value);
}
inline void RealTimeRequest::add_stockcode(const char* value) {
  stockcode_.Add()->assign(value);
}
inline void RealTimeRequest::add_stockcode(const char* value, size_t size) {
  stockcode_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RealTimeRequest::stockcode() const {
  return stockcode_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RealTimeRequest::mutable_stockcode() {
  return &stockcode_;
}

// -------------------------------------------------------------------

// RealTimeResponse_RealTime

// required string quotetime = 1;
inline bool RealTimeResponse_RealTime::has_quotetime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_quotetime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RealTimeResponse_RealTime::clear_has_quotetime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RealTimeResponse_RealTime::clear_quotetime() {
  if (quotetime_ != &::google::protobuf::internal::kEmptyString) {
    quotetime_->clear();
  }
  clear_has_quotetime();
}
inline const ::std::string& RealTimeResponse_RealTime::quotetime() const {
  return *quotetime_;
}
inline void RealTimeResponse_RealTime::set_quotetime(const ::std::string& value) {
  set_has_quotetime();
  if (quotetime_ == &::google::protobuf::internal::kEmptyString) {
    quotetime_ = new ::std::string;
  }
  quotetime_->assign(value);
}
inline void RealTimeResponse_RealTime::set_quotetime(const char* value) {
  set_has_quotetime();
  if (quotetime_ == &::google::protobuf::internal::kEmptyString) {
    quotetime_ = new ::std::string;
  }
  quotetime_->assign(value);
}
inline void RealTimeResponse_RealTime::set_quotetime(const char* value, size_t size) {
  set_has_quotetime();
  if (quotetime_ == &::google::protobuf::internal::kEmptyString) {
    quotetime_ = new ::std::string;
  }
  quotetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RealTimeResponse_RealTime::mutable_quotetime() {
  set_has_quotetime();
  if (quotetime_ == &::google::protobuf::internal::kEmptyString) {
    quotetime_ = new ::std::string;
  }
  return quotetime_;
}
inline ::std::string* RealTimeResponse_RealTime::release_quotetime() {
  clear_has_quotetime();
  if (quotetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = quotetime_;
    quotetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string markettime = 2;
inline bool RealTimeResponse_RealTime::has_markettime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_markettime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RealTimeResponse_RealTime::clear_has_markettime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RealTimeResponse_RealTime::clear_markettime() {
  if (markettime_ != &::google::protobuf::internal::kEmptyString) {
    markettime_->clear();
  }
  clear_has_markettime();
}
inline const ::std::string& RealTimeResponse_RealTime::markettime() const {
  return *markettime_;
}
inline void RealTimeResponse_RealTime::set_markettime(const ::std::string& value) {
  set_has_markettime();
  if (markettime_ == &::google::protobuf::internal::kEmptyString) {
    markettime_ = new ::std::string;
  }
  markettime_->assign(value);
}
inline void RealTimeResponse_RealTime::set_markettime(const char* value) {
  set_has_markettime();
  if (markettime_ == &::google::protobuf::internal::kEmptyString) {
    markettime_ = new ::std::string;
  }
  markettime_->assign(value);
}
inline void RealTimeResponse_RealTime::set_markettime(const char* value, size_t size) {
  set_has_markettime();
  if (markettime_ == &::google::protobuf::internal::kEmptyString) {
    markettime_ = new ::std::string;
  }
  markettime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RealTimeResponse_RealTime::mutable_markettime() {
  set_has_markettime();
  if (markettime_ == &::google::protobuf::internal::kEmptyString) {
    markettime_ = new ::std::string;
  }
  return markettime_;
}
inline ::std::string* RealTimeResponse_RealTime::release_markettime() {
  clear_has_markettime();
  if (markettime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = markettime_;
    markettime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string secucode = 3;
inline bool RealTimeResponse_RealTime::has_secucode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_secucode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RealTimeResponse_RealTime::clear_has_secucode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RealTimeResponse_RealTime::clear_secucode() {
  if (secucode_ != &::google::protobuf::internal::kEmptyString) {
    secucode_->clear();
  }
  clear_has_secucode();
}
inline const ::std::string& RealTimeResponse_RealTime::secucode() const {
  return *secucode_;
}
inline void RealTimeResponse_RealTime::set_secucode(const ::std::string& value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void RealTimeResponse_RealTime::set_secucode(const char* value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void RealTimeResponse_RealTime::set_secucode(const char* value, size_t size) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RealTimeResponse_RealTime::mutable_secucode() {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  return secucode_;
}
inline ::std::string* RealTimeResponse_RealTime::release_secucode() {
  clear_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secucode_;
    secucode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 exchange = 4;
inline bool RealTimeResponse_RealTime::has_exchange() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_exchange() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RealTimeResponse_RealTime::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RealTimeResponse_RealTime::clear_exchange() {
  exchange_ = 0;
  clear_has_exchange();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::exchange() const {
  return exchange_;
}
inline void RealTimeResponse_RealTime::set_exchange(::google::protobuf::int32 value) {
  set_has_exchange();
  exchange_ = value;
}

// required bool tp = 5;
inline bool RealTimeResponse_RealTime::has_tp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_tp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RealTimeResponse_RealTime::clear_has_tp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RealTimeResponse_RealTime::clear_tp() {
  tp_ = false;
  clear_has_tp();
}
inline bool RealTimeResponse_RealTime::tp() const {
  return tp_;
}
inline void RealTimeResponse_RealTime::set_tp(bool value) {
  set_has_tp();
  tp_ = value;
}

// required float open = 6;
inline bool RealTimeResponse_RealTime::has_open() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_open() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RealTimeResponse_RealTime::clear_has_open() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RealTimeResponse_RealTime::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline float RealTimeResponse_RealTime::open() const {
  return open_;
}
inline void RealTimeResponse_RealTime::set_open(float value) {
  set_has_open();
  open_ = value;
}

// required float high = 7;
inline bool RealTimeResponse_RealTime::has_high() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_high() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RealTimeResponse_RealTime::clear_has_high() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RealTimeResponse_RealTime::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline float RealTimeResponse_RealTime::high() const {
  return high_;
}
inline void RealTimeResponse_RealTime::set_high(float value) {
  set_has_high();
  high_ = value;
}

// required float low = 8;
inline bool RealTimeResponse_RealTime::has_low() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_low() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RealTimeResponse_RealTime::clear_has_low() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RealTimeResponse_RealTime::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline float RealTimeResponse_RealTime::low() const {
  return low_;
}
inline void RealTimeResponse_RealTime::set_low(float value) {
  set_has_low();
  low_ = value;
}

// required float close = 9;
inline bool RealTimeResponse_RealTime::has_close() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_close() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RealTimeResponse_RealTime::clear_has_close() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RealTimeResponse_RealTime::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline float RealTimeResponse_RealTime::close() const {
  return close_;
}
inline void RealTimeResponse_RealTime::set_close(float value) {
  set_has_close();
  close_ = value;
}

// required int64 vol = 10;
inline bool RealTimeResponse_RealTime::has_vol() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_vol() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RealTimeResponse_RealTime::clear_has_vol() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RealTimeResponse_RealTime::clear_vol() {
  vol_ = GOOGLE_LONGLONG(0);
  clear_has_vol();
}
inline ::google::protobuf::int64 RealTimeResponse_RealTime::vol() const {
  return vol_;
}
inline void RealTimeResponse_RealTime::set_vol(::google::protobuf::int64 value) {
  set_has_vol();
  vol_ = value;
}

// required double amt = 11;
inline bool RealTimeResponse_RealTime::has_amt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_amt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RealTimeResponse_RealTime::clear_has_amt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RealTimeResponse_RealTime::clear_amt() {
  amt_ = 0;
  clear_has_amt();
}
inline double RealTimeResponse_RealTime::amt() const {
  return amt_;
}
inline void RealTimeResponse_RealTime::set_amt(double value) {
  set_has_amt();
  amt_ = value;
}

// optional float askprice5 = 12;
inline bool RealTimeResponse_RealTime::has_askprice5() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_askprice5() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RealTimeResponse_RealTime::clear_has_askprice5() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RealTimeResponse_RealTime::clear_askprice5() {
  askprice5_ = 0;
  clear_has_askprice5();
}
inline float RealTimeResponse_RealTime::askprice5() const {
  return askprice5_;
}
inline void RealTimeResponse_RealTime::set_askprice5(float value) {
  set_has_askprice5();
  askprice5_ = value;
}

// optional int32 askvol5 = 13;
inline bool RealTimeResponse_RealTime::has_askvol5() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_askvol5() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RealTimeResponse_RealTime::clear_has_askvol5() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RealTimeResponse_RealTime::clear_askvol5() {
  askvol5_ = 0;
  clear_has_askvol5();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::askvol5() const {
  return askvol5_;
}
inline void RealTimeResponse_RealTime::set_askvol5(::google::protobuf::int32 value) {
  set_has_askvol5();
  askvol5_ = value;
}

// optional float askprice4 = 14;
inline bool RealTimeResponse_RealTime::has_askprice4() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_askprice4() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RealTimeResponse_RealTime::clear_has_askprice4() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RealTimeResponse_RealTime::clear_askprice4() {
  askprice4_ = 0;
  clear_has_askprice4();
}
inline float RealTimeResponse_RealTime::askprice4() const {
  return askprice4_;
}
inline void RealTimeResponse_RealTime::set_askprice4(float value) {
  set_has_askprice4();
  askprice4_ = value;
}

// optional int32 askvol4 = 15;
inline bool RealTimeResponse_RealTime::has_askvol4() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_askvol4() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RealTimeResponse_RealTime::clear_has_askvol4() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RealTimeResponse_RealTime::clear_askvol4() {
  askvol4_ = 0;
  clear_has_askvol4();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::askvol4() const {
  return askvol4_;
}
inline void RealTimeResponse_RealTime::set_askvol4(::google::protobuf::int32 value) {
  set_has_askvol4();
  askvol4_ = value;
}

// required float askprice3 = 16;
inline bool RealTimeResponse_RealTime::has_askprice3() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_askprice3() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RealTimeResponse_RealTime::clear_has_askprice3() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RealTimeResponse_RealTime::clear_askprice3() {
  askprice3_ = 0;
  clear_has_askprice3();
}
inline float RealTimeResponse_RealTime::askprice3() const {
  return askprice3_;
}
inline void RealTimeResponse_RealTime::set_askprice3(float value) {
  set_has_askprice3();
  askprice3_ = value;
}

// required int32 askvol3 = 17;
inline bool RealTimeResponse_RealTime::has_askvol3() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_askvol3() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RealTimeResponse_RealTime::clear_has_askvol3() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RealTimeResponse_RealTime::clear_askvol3() {
  askvol3_ = 0;
  clear_has_askvol3();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::askvol3() const {
  return askvol3_;
}
inline void RealTimeResponse_RealTime::set_askvol3(::google::protobuf::int32 value) {
  set_has_askvol3();
  askvol3_ = value;
}

// required float askprice2 = 18;
inline bool RealTimeResponse_RealTime::has_askprice2() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_askprice2() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RealTimeResponse_RealTime::clear_has_askprice2() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RealTimeResponse_RealTime::clear_askprice2() {
  askprice2_ = 0;
  clear_has_askprice2();
}
inline float RealTimeResponse_RealTime::askprice2() const {
  return askprice2_;
}
inline void RealTimeResponse_RealTime::set_askprice2(float value) {
  set_has_askprice2();
  askprice2_ = value;
}

// required int32 askvol2 = 19;
inline bool RealTimeResponse_RealTime::has_askvol2() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_askvol2() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RealTimeResponse_RealTime::clear_has_askvol2() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RealTimeResponse_RealTime::clear_askvol2() {
  askvol2_ = 0;
  clear_has_askvol2();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::askvol2() const {
  return askvol2_;
}
inline void RealTimeResponse_RealTime::set_askvol2(::google::protobuf::int32 value) {
  set_has_askvol2();
  askvol2_ = value;
}

// required float askprice1 = 20;
inline bool RealTimeResponse_RealTime::has_askprice1() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_askprice1() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RealTimeResponse_RealTime::clear_has_askprice1() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RealTimeResponse_RealTime::clear_askprice1() {
  askprice1_ = 0;
  clear_has_askprice1();
}
inline float RealTimeResponse_RealTime::askprice1() const {
  return askprice1_;
}
inline void RealTimeResponse_RealTime::set_askprice1(float value) {
  set_has_askprice1();
  askprice1_ = value;
}

// required int32 askvol1 = 21;
inline bool RealTimeResponse_RealTime::has_askvol1() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_askvol1() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RealTimeResponse_RealTime::clear_has_askvol1() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RealTimeResponse_RealTime::clear_askvol1() {
  askvol1_ = 0;
  clear_has_askvol1();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::askvol1() const {
  return askvol1_;
}
inline void RealTimeResponse_RealTime::set_askvol1(::google::protobuf::int32 value) {
  set_has_askvol1();
  askvol1_ = value;
}

// required float bidprice1 = 22;
inline bool RealTimeResponse_RealTime::has_bidprice1() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_bidprice1() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RealTimeResponse_RealTime::clear_has_bidprice1() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RealTimeResponse_RealTime::clear_bidprice1() {
  bidprice1_ = 0;
  clear_has_bidprice1();
}
inline float RealTimeResponse_RealTime::bidprice1() const {
  return bidprice1_;
}
inline void RealTimeResponse_RealTime::set_bidprice1(float value) {
  set_has_bidprice1();
  bidprice1_ = value;
}

// required int32 bidvol1 = 23;
inline bool RealTimeResponse_RealTime::has_bidvol1() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_bidvol1() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RealTimeResponse_RealTime::clear_has_bidvol1() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RealTimeResponse_RealTime::clear_bidvol1() {
  bidvol1_ = 0;
  clear_has_bidvol1();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::bidvol1() const {
  return bidvol1_;
}
inline void RealTimeResponse_RealTime::set_bidvol1(::google::protobuf::int32 value) {
  set_has_bidvol1();
  bidvol1_ = value;
}

// required float bidprice2 = 24;
inline bool RealTimeResponse_RealTime::has_bidprice2() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_bidprice2() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RealTimeResponse_RealTime::clear_has_bidprice2() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RealTimeResponse_RealTime::clear_bidprice2() {
  bidprice2_ = 0;
  clear_has_bidprice2();
}
inline float RealTimeResponse_RealTime::bidprice2() const {
  return bidprice2_;
}
inline void RealTimeResponse_RealTime::set_bidprice2(float value) {
  set_has_bidprice2();
  bidprice2_ = value;
}

// required int32 bidvol2 = 25;
inline bool RealTimeResponse_RealTime::has_bidvol2() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_bidvol2() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RealTimeResponse_RealTime::clear_has_bidvol2() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RealTimeResponse_RealTime::clear_bidvol2() {
  bidvol2_ = 0;
  clear_has_bidvol2();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::bidvol2() const {
  return bidvol2_;
}
inline void RealTimeResponse_RealTime::set_bidvol2(::google::protobuf::int32 value) {
  set_has_bidvol2();
  bidvol2_ = value;
}

// required float bidprice3 = 26;
inline bool RealTimeResponse_RealTime::has_bidprice3() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_bidprice3() {
  _has_bits_[0] |= 0x02000000u;
}
inline void RealTimeResponse_RealTime::clear_has_bidprice3() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void RealTimeResponse_RealTime::clear_bidprice3() {
  bidprice3_ = 0;
  clear_has_bidprice3();
}
inline float RealTimeResponse_RealTime::bidprice3() const {
  return bidprice3_;
}
inline void RealTimeResponse_RealTime::set_bidprice3(float value) {
  set_has_bidprice3();
  bidprice3_ = value;
}

// required int32 bidvol3 = 27;
inline bool RealTimeResponse_RealTime::has_bidvol3() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_bidvol3() {
  _has_bits_[0] |= 0x04000000u;
}
inline void RealTimeResponse_RealTime::clear_has_bidvol3() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void RealTimeResponse_RealTime::clear_bidvol3() {
  bidvol3_ = 0;
  clear_has_bidvol3();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::bidvol3() const {
  return bidvol3_;
}
inline void RealTimeResponse_RealTime::set_bidvol3(::google::protobuf::int32 value) {
  set_has_bidvol3();
  bidvol3_ = value;
}

// optional float bidprice4 = 28;
inline bool RealTimeResponse_RealTime::has_bidprice4() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_bidprice4() {
  _has_bits_[0] |= 0x08000000u;
}
inline void RealTimeResponse_RealTime::clear_has_bidprice4() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void RealTimeResponse_RealTime::clear_bidprice4() {
  bidprice4_ = 0;
  clear_has_bidprice4();
}
inline float RealTimeResponse_RealTime::bidprice4() const {
  return bidprice4_;
}
inline void RealTimeResponse_RealTime::set_bidprice4(float value) {
  set_has_bidprice4();
  bidprice4_ = value;
}

// optional int32 bidvol4 = 29;
inline bool RealTimeResponse_RealTime::has_bidvol4() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_bidvol4() {
  _has_bits_[0] |= 0x10000000u;
}
inline void RealTimeResponse_RealTime::clear_has_bidvol4() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void RealTimeResponse_RealTime::clear_bidvol4() {
  bidvol4_ = 0;
  clear_has_bidvol4();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::bidvol4() const {
  return bidvol4_;
}
inline void RealTimeResponse_RealTime::set_bidvol4(::google::protobuf::int32 value) {
  set_has_bidvol4();
  bidvol4_ = value;
}

// optional float bidprice5 = 30;
inline bool RealTimeResponse_RealTime::has_bidprice5() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_bidprice5() {
  _has_bits_[0] |= 0x20000000u;
}
inline void RealTimeResponse_RealTime::clear_has_bidprice5() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void RealTimeResponse_RealTime::clear_bidprice5() {
  bidprice5_ = 0;
  clear_has_bidprice5();
}
inline float RealTimeResponse_RealTime::bidprice5() const {
  return bidprice5_;
}
inline void RealTimeResponse_RealTime::set_bidprice5(float value) {
  set_has_bidprice5();
  bidprice5_ = value;
}

// optional int32 bidvol5 = 31;
inline bool RealTimeResponse_RealTime::has_bidvol5() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_bidvol5() {
  _has_bits_[0] |= 0x40000000u;
}
inline void RealTimeResponse_RealTime::clear_has_bidvol5() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void RealTimeResponse_RealTime::clear_bidvol5() {
  bidvol5_ = 0;
  clear_has_bidvol5();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::bidvol5() const {
  return bidvol5_;
}
inline void RealTimeResponse_RealTime::set_bidvol5(::google::protobuf::int32 value) {
  set_has_bidvol5();
  bidvol5_ = value;
}

// required float zf = 32;
inline bool RealTimeResponse_RealTime::has_zf() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_zf() {
  _has_bits_[0] |= 0x80000000u;
}
inline void RealTimeResponse_RealTime::clear_has_zf() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void RealTimeResponse_RealTime::clear_zf() {
  zf_ = 0;
  clear_has_zf();
}
inline float RealTimeResponse_RealTime::zf() const {
  return zf_;
}
inline void RealTimeResponse_RealTime::set_zf(float value) {
  set_has_zf();
  zf_ = value;
}

// required float zd = 33;
inline bool RealTimeResponse_RealTime::has_zd() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_zd() {
  _has_bits_[1] |= 0x00000001u;
}
inline void RealTimeResponse_RealTime::clear_has_zd() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void RealTimeResponse_RealTime::clear_zd() {
  zd_ = 0;
  clear_has_zd();
}
inline float RealTimeResponse_RealTime::zd() const {
  return zd_;
}
inline void RealTimeResponse_RealTime::set_zd(float value) {
  set_has_zd();
  zd_ = value;
}

// required float zt = 34;
inline bool RealTimeResponse_RealTime::has_zt() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_zt() {
  _has_bits_[1] |= 0x00000002u;
}
inline void RealTimeResponse_RealTime::clear_has_zt() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void RealTimeResponse_RealTime::clear_zt() {
  zt_ = 0;
  clear_has_zt();
}
inline float RealTimeResponse_RealTime::zt() const {
  return zt_;
}
inline void RealTimeResponse_RealTime::set_zt(float value) {
  set_has_zt();
  zt_ = value;
}

// required float dt = 35;
inline bool RealTimeResponse_RealTime::has_dt() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_dt() {
  _has_bits_[1] |= 0x00000004u;
}
inline void RealTimeResponse_RealTime::clear_has_dt() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void RealTimeResponse_RealTime::clear_dt() {
  dt_ = 0;
  clear_has_dt();
}
inline float RealTimeResponse_RealTime::dt() const {
  return dt_;
}
inline void RealTimeResponse_RealTime::set_dt(float value) {
  set_has_dt();
  dt_ = value;
}

// required float hs = 36;
inline bool RealTimeResponse_RealTime::has_hs() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_hs() {
  _has_bits_[1] |= 0x00000008u;
}
inline void RealTimeResponse_RealTime::clear_has_hs() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void RealTimeResponse_RealTime::clear_hs() {
  hs_ = 0;
  clear_has_hs();
}
inline float RealTimeResponse_RealTime::hs() const {
  return hs_;
}
inline void RealTimeResponse_RealTime::set_hs(float value) {
  set_has_hs();
  hs_ = value;
}

// required float amp = 37;
inline bool RealTimeResponse_RealTime::has_amp() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_amp() {
  _has_bits_[1] |= 0x00000010u;
}
inline void RealTimeResponse_RealTime::clear_has_amp() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void RealTimeResponse_RealTime::clear_amp() {
  amp_ = 0;
  clear_has_amp();
}
inline float RealTimeResponse_RealTime::amp() const {
  return amp_;
}
inline void RealTimeResponse_RealTime::set_amp(float value) {
  set_has_amp();
  amp_ = value;
}

// required float lb = 38;
inline bool RealTimeResponse_RealTime::has_lb() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_lb() {
  _has_bits_[1] |= 0x00000020u;
}
inline void RealTimeResponse_RealTime::clear_has_lb() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void RealTimeResponse_RealTime::clear_lb() {
  lb_ = 0;
  clear_has_lb();
}
inline float RealTimeResponse_RealTime::lb() const {
  return lb_;
}
inline void RealTimeResponse_RealTime::set_lb(float value) {
  set_has_lb();
  lb_ = value;
}

// required float wb = 39;
inline bool RealTimeResponse_RealTime::has_wb() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_wb() {
  _has_bits_[1] |= 0x00000040u;
}
inline void RealTimeResponse_RealTime::clear_has_wb() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void RealTimeResponse_RealTime::clear_wb() {
  wb_ = 0;
  clear_has_wb();
}
inline float RealTimeResponse_RealTime::wb() const {
  return wb_;
}
inline void RealTimeResponse_RealTime::set_wb(float value) {
  set_has_wb();
  wb_ = value;
}

// required int32 wc = 40;
inline bool RealTimeResponse_RealTime::has_wc() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_wc() {
  _has_bits_[1] |= 0x00000080u;
}
inline void RealTimeResponse_RealTime::clear_has_wc() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void RealTimeResponse_RealTime::clear_wc() {
  wc_ = 0;
  clear_has_wc();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::wc() const {
  return wc_;
}
inline void RealTimeResponse_RealTime::set_wc(::google::protobuf::int32 value) {
  set_has_wc();
  wc_ = value;
}

// required string nwp = 41;
inline bool RealTimeResponse_RealTime::has_nwp() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_nwp() {
  _has_bits_[1] |= 0x00000100u;
}
inline void RealTimeResponse_RealTime::clear_has_nwp() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void RealTimeResponse_RealTime::clear_nwp() {
  if (nwp_ != &::google::protobuf::internal::kEmptyString) {
    nwp_->clear();
  }
  clear_has_nwp();
}
inline const ::std::string& RealTimeResponse_RealTime::nwp() const {
  return *nwp_;
}
inline void RealTimeResponse_RealTime::set_nwp(const ::std::string& value) {
  set_has_nwp();
  if (nwp_ == &::google::protobuf::internal::kEmptyString) {
    nwp_ = new ::std::string;
  }
  nwp_->assign(value);
}
inline void RealTimeResponse_RealTime::set_nwp(const char* value) {
  set_has_nwp();
  if (nwp_ == &::google::protobuf::internal::kEmptyString) {
    nwp_ = new ::std::string;
  }
  nwp_->assign(value);
}
inline void RealTimeResponse_RealTime::set_nwp(const char* value, size_t size) {
  set_has_nwp();
  if (nwp_ == &::google::protobuf::internal::kEmptyString) {
    nwp_ = new ::std::string;
  }
  nwp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RealTimeResponse_RealTime::mutable_nwp() {
  set_has_nwp();
  if (nwp_ == &::google::protobuf::internal::kEmptyString) {
    nwp_ = new ::std::string;
  }
  return nwp_;
}
inline ::std::string* RealTimeResponse_RealTime::release_nwp() {
  clear_has_nwp();
  if (nwp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nwp_;
    nwp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 np = 42;
inline bool RealTimeResponse_RealTime::has_np() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_np() {
  _has_bits_[1] |= 0x00000200u;
}
inline void RealTimeResponse_RealTime::clear_has_np() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void RealTimeResponse_RealTime::clear_np() {
  np_ = 0;
  clear_has_np();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::np() const {
  return np_;
}
inline void RealTimeResponse_RealTime::set_np(::google::protobuf::int32 value) {
  set_has_np();
  np_ = value;
}

// required int32 wp = 43;
inline bool RealTimeResponse_RealTime::has_wp() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_wp() {
  _has_bits_[1] |= 0x00000400u;
}
inline void RealTimeResponse_RealTime::clear_has_wp() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void RealTimeResponse_RealTime::clear_wp() {
  wp_ = 0;
  clear_has_wp();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::wp() const {
  return wp_;
}
inline void RealTimeResponse_RealTime::set_wp(::google::protobuf::int32 value) {
  set_has_wp();
  wp_ = value;
}

// required int32 sp = 44;
inline bool RealTimeResponse_RealTime::has_sp() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_sp() {
  _has_bits_[1] |= 0x00000800u;
}
inline void RealTimeResponse_RealTime::clear_has_sp() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void RealTimeResponse_RealTime::clear_sp() {
  sp_ = 0;
  clear_has_sp();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::sp() const {
  return sp_;
}
inline void RealTimeResponse_RealTime::set_sp(::google::protobuf::int32 value) {
  set_has_sp();
  sp_ = value;
}

// required int32 xs = 45;
inline bool RealTimeResponse_RealTime::has_xs() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_xs() {
  _has_bits_[1] |= 0x00001000u;
}
inline void RealTimeResponse_RealTime::clear_has_xs() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void RealTimeResponse_RealTime::clear_xs() {
  xs_ = 0;
  clear_has_xs();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::xs() const {
  return xs_;
}
inline void RealTimeResponse_RealTime::set_xs(::google::protobuf::int32 value) {
  set_has_xs();
  xs_ = value;
}

// required int32 actualxs = 46;
inline bool RealTimeResponse_RealTime::has_actualxs() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_actualxs() {
  _has_bits_[1] |= 0x00002000u;
}
inline void RealTimeResponse_RealTime::clear_has_actualxs() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void RealTimeResponse_RealTime::clear_actualxs() {
  actualxs_ = 0;
  clear_has_actualxs();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::actualxs() const {
  return actualxs_;
}
inline void RealTimeResponse_RealTime::set_actualxs(::google::protobuf::int32 value) {
  set_has_actualxs();
  actualxs_ = value;
}

// required float xe = 47;
inline bool RealTimeResponse_RealTime::has_xe() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_xe() {
  _has_bits_[1] |= 0x00004000u;
}
inline void RealTimeResponse_RealTime::clear_has_xe() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void RealTimeResponse_RealTime::clear_xe() {
  xe_ = 0;
  clear_has_xe();
}
inline float RealTimeResponse_RealTime::xe() const {
  return xe_;
}
inline void RealTimeResponse_RealTime::set_xe(float value) {
  set_has_xe();
  xe_ = value;
}

// required int32 detailid = 48;
inline bool RealTimeResponse_RealTime::has_detailid() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_detailid() {
  _has_bits_[1] |= 0x00008000u;
}
inline void RealTimeResponse_RealTime::clear_has_detailid() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void RealTimeResponse_RealTime::clear_detailid() {
  detailid_ = 0;
  clear_has_detailid();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::detailid() const {
  return detailid_;
}
inline void RealTimeResponse_RealTime::set_detailid(::google::protobuf::int32 value) {
  set_has_detailid();
  detailid_ = value;
}

// required bool sg = 49;
inline bool RealTimeResponse_RealTime::has_sg() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_sg() {
  _has_bits_[1] |= 0x00010000u;
}
inline void RealTimeResponse_RealTime::clear_has_sg() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void RealTimeResponse_RealTime::clear_sg() {
  sg_ = false;
  clear_has_sg();
}
inline bool RealTimeResponse_RealTime::sg() const {
  return sg_;
}
inline void RealTimeResponse_RealTime::set_sg(bool value) {
  set_has_sg();
  sg_ = value;
}

// optional double a = 50;
inline bool RealTimeResponse_RealTime::has_a() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_a() {
  _has_bits_[1] |= 0x00020000u;
}
inline void RealTimeResponse_RealTime::clear_has_a() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void RealTimeResponse_RealTime::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline double RealTimeResponse_RealTime::a() const {
  return a_;
}
inline void RealTimeResponse_RealTime::set_a(double value) {
  set_has_a();
  a_ = value;
}

// optional double b = 51;
inline bool RealTimeResponse_RealTime::has_b() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_b() {
  _has_bits_[1] |= 0x00040000u;
}
inline void RealTimeResponse_RealTime::clear_has_b() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void RealTimeResponse_RealTime::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline double RealTimeResponse_RealTime::b() const {
  return b_;
}
inline void RealTimeResponse_RealTime::set_b(double value) {
  set_has_b();
  b_ = value;
}

// optional double fund = 52;
inline bool RealTimeResponse_RealTime::has_fund() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_fund() {
  _has_bits_[1] |= 0x00080000u;
}
inline void RealTimeResponse_RealTime::clear_has_fund() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void RealTimeResponse_RealTime::clear_fund() {
  fund_ = 0;
  clear_has_fund();
}
inline double RealTimeResponse_RealTime::fund() const {
  return fund_;
}
inline void RealTimeResponse_RealTime::set_fund(double value) {
  set_has_fund();
  fund_ = value;
}

// optional double warrant = 53;
inline bool RealTimeResponse_RealTime::has_warrant() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_warrant() {
  _has_bits_[1] |= 0x00100000u;
}
inline void RealTimeResponse_RealTime::clear_has_warrant() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void RealTimeResponse_RealTime::clear_warrant() {
  warrant_ = 0;
  clear_has_warrant();
}
inline double RealTimeResponse_RealTime::warrant() const {
  return warrant_;
}
inline void RealTimeResponse_RealTime::set_warrant(double value) {
  set_has_warrant();
  warrant_ = value;
}

// optional double bond = 54;
inline bool RealTimeResponse_RealTime::has_bond() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_bond() {
  _has_bits_[1] |= 0x00200000u;
}
inline void RealTimeResponse_RealTime::clear_has_bond() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void RealTimeResponse_RealTime::clear_bond() {
  bond_ = 0;
  clear_has_bond();
}
inline double RealTimeResponse_RealTime::bond() const {
  return bond_;
}
inline void RealTimeResponse_RealTime::set_bond(double value) {
  set_has_bond();
  bond_ = value;
}

// optional double govbond = 55;
inline bool RealTimeResponse_RealTime::has_govbond() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_govbond() {
  _has_bits_[1] |= 0x00400000u;
}
inline void RealTimeResponse_RealTime::clear_has_govbond() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void RealTimeResponse_RealTime::clear_govbond() {
  govbond_ = 0;
  clear_has_govbond();
}
inline double RealTimeResponse_RealTime::govbond() const {
  return govbond_;
}
inline void RealTimeResponse_RealTime::set_govbond(double value) {
  set_has_govbond();
  govbond_ = value;
}

// optional int32 zj = 56;
inline bool RealTimeResponse_RealTime::has_zj() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_zj() {
  _has_bits_[1] |= 0x00800000u;
}
inline void RealTimeResponse_RealTime::clear_has_zj() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void RealTimeResponse_RealTime::clear_zj() {
  zj_ = 0;
  clear_has_zj();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::zj() const {
  return zj_;
}
inline void RealTimeResponse_RealTime::set_zj(::google::protobuf::int32 value) {
  set_has_zj();
  zj_ = value;
}

// optional int32 pj = 57;
inline bool RealTimeResponse_RealTime::has_pj() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_pj() {
  _has_bits_[1] |= 0x01000000u;
}
inline void RealTimeResponse_RealTime::clear_has_pj() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void RealTimeResponse_RealTime::clear_pj() {
  pj_ = 0;
  clear_has_pj();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::pj() const {
  return pj_;
}
inline void RealTimeResponse_RealTime::set_pj(::google::protobuf::int32 value) {
  set_has_pj();
  pj_ = value;
}

// optional int32 dj = 58;
inline bool RealTimeResponse_RealTime::has_dj() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_dj() {
  _has_bits_[1] |= 0x02000000u;
}
inline void RealTimeResponse_RealTime::clear_has_dj() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void RealTimeResponse_RealTime::clear_dj() {
  dj_ = 0;
  clear_has_dj();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::dj() const {
  return dj_;
}
inline void RealTimeResponse_RealTime::set_dj(::google::protobuf::int32 value) {
  set_has_dj();
  dj_ = value;
}

// optional int32 zja = 59;
inline bool RealTimeResponse_RealTime::has_zja() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_zja() {
  _has_bits_[1] |= 0x04000000u;
}
inline void RealTimeResponse_RealTime::clear_has_zja() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void RealTimeResponse_RealTime::clear_zja() {
  zja_ = 0;
  clear_has_zja();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::zja() const {
  return zja_;
}
inline void RealTimeResponse_RealTime::set_zja(::google::protobuf::int32 value) {
  set_has_zja();
  zja_ = value;
}

// optional int32 pja = 60;
inline bool RealTimeResponse_RealTime::has_pja() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_pja() {
  _has_bits_[1] |= 0x08000000u;
}
inline void RealTimeResponse_RealTime::clear_has_pja() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void RealTimeResponse_RealTime::clear_pja() {
  pja_ = 0;
  clear_has_pja();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::pja() const {
  return pja_;
}
inline void RealTimeResponse_RealTime::set_pja(::google::protobuf::int32 value) {
  set_has_pja();
  pja_ = value;
}

// optional int32 dja = 61;
inline bool RealTimeResponse_RealTime::has_dja() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_dja() {
  _has_bits_[1] |= 0x10000000u;
}
inline void RealTimeResponse_RealTime::clear_has_dja() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void RealTimeResponse_RealTime::clear_dja() {
  dja_ = 0;
  clear_has_dja();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::dja() const {
  return dja_;
}
inline void RealTimeResponse_RealTime::set_dja(::google::protobuf::int32 value) {
  set_has_dja();
  dja_ = value;
}

// optional int32 zjb = 62;
inline bool RealTimeResponse_RealTime::has_zjb() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_zjb() {
  _has_bits_[1] |= 0x20000000u;
}
inline void RealTimeResponse_RealTime::clear_has_zjb() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void RealTimeResponse_RealTime::clear_zjb() {
  zjb_ = 0;
  clear_has_zjb();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::zjb() const {
  return zjb_;
}
inline void RealTimeResponse_RealTime::set_zjb(::google::protobuf::int32 value) {
  set_has_zjb();
  zjb_ = value;
}

// optional int32 pjb = 63;
inline bool RealTimeResponse_RealTime::has_pjb() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_pjb() {
  _has_bits_[1] |= 0x40000000u;
}
inline void RealTimeResponse_RealTime::clear_has_pjb() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void RealTimeResponse_RealTime::clear_pjb() {
  pjb_ = 0;
  clear_has_pjb();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::pjb() const {
  return pjb_;
}
inline void RealTimeResponse_RealTime::set_pjb(::google::protobuf::int32 value) {
  set_has_pjb();
  pjb_ = value;
}

// optional int32 djb = 64;
inline bool RealTimeResponse_RealTime::has_djb() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_djb() {
  _has_bits_[1] |= 0x80000000u;
}
inline void RealTimeResponse_RealTime::clear_has_djb() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void RealTimeResponse_RealTime::clear_djb() {
  djb_ = 0;
  clear_has_djb();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::djb() const {
  return djb_;
}
inline void RealTimeResponse_RealTime::set_djb(::google::protobuf::int32 value) {
  set_has_djb();
  djb_ = value;
}

// optional int32 zjfund = 65;
inline bool RealTimeResponse_RealTime::has_zjfund() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_zjfund() {
  _has_bits_[2] |= 0x00000001u;
}
inline void RealTimeResponse_RealTime::clear_has_zjfund() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void RealTimeResponse_RealTime::clear_zjfund() {
  zjfund_ = 0;
  clear_has_zjfund();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::zjfund() const {
  return zjfund_;
}
inline void RealTimeResponse_RealTime::set_zjfund(::google::protobuf::int32 value) {
  set_has_zjfund();
  zjfund_ = value;
}

// optional int32 pjfund = 66;
inline bool RealTimeResponse_RealTime::has_pjfund() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_pjfund() {
  _has_bits_[2] |= 0x00000002u;
}
inline void RealTimeResponse_RealTime::clear_has_pjfund() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void RealTimeResponse_RealTime::clear_pjfund() {
  pjfund_ = 0;
  clear_has_pjfund();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::pjfund() const {
  return pjfund_;
}
inline void RealTimeResponse_RealTime::set_pjfund(::google::protobuf::int32 value) {
  set_has_pjfund();
  pjfund_ = value;
}

// optional int32 djfund = 67;
inline bool RealTimeResponse_RealTime::has_djfund() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_djfund() {
  _has_bits_[2] |= 0x00000004u;
}
inline void RealTimeResponse_RealTime::clear_has_djfund() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void RealTimeResponse_RealTime::clear_djfund() {
  djfund_ = 0;
  clear_has_djfund();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::djfund() const {
  return djfund_;
}
inline void RealTimeResponse_RealTime::set_djfund(::google::protobuf::int32 value) {
  set_has_djfund();
  djfund_ = value;
}

// optional int32 zjmid = 68;
inline bool RealTimeResponse_RealTime::has_zjmid() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_zjmid() {
  _has_bits_[2] |= 0x00000008u;
}
inline void RealTimeResponse_RealTime::clear_has_zjmid() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void RealTimeResponse_RealTime::clear_zjmid() {
  zjmid_ = 0;
  clear_has_zjmid();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::zjmid() const {
  return zjmid_;
}
inline void RealTimeResponse_RealTime::set_zjmid(::google::protobuf::int32 value) {
  set_has_zjmid();
  zjmid_ = value;
}

// optional int32 pjmid = 69;
inline bool RealTimeResponse_RealTime::has_pjmid() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_pjmid() {
  _has_bits_[2] |= 0x00000010u;
}
inline void RealTimeResponse_RealTime::clear_has_pjmid() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void RealTimeResponse_RealTime::clear_pjmid() {
  pjmid_ = 0;
  clear_has_pjmid();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::pjmid() const {
  return pjmid_;
}
inline void RealTimeResponse_RealTime::set_pjmid(::google::protobuf::int32 value) {
  set_has_pjmid();
  pjmid_ = value;
}

// optional int32 djmid = 70;
inline bool RealTimeResponse_RealTime::has_djmid() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_djmid() {
  _has_bits_[2] |= 0x00000020u;
}
inline void RealTimeResponse_RealTime::clear_has_djmid() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void RealTimeResponse_RealTime::clear_djmid() {
  djmid_ = 0;
  clear_has_djmid();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::djmid() const {
  return djmid_;
}
inline void RealTimeResponse_RealTime::set_djmid(::google::protobuf::int32 value) {
  set_has_djmid();
  djmid_ = value;
}

// optional int32 zjtrad = 71;
inline bool RealTimeResponse_RealTime::has_zjtrad() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_zjtrad() {
  _has_bits_[2] |= 0x00000040u;
}
inline void RealTimeResponse_RealTime::clear_has_zjtrad() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void RealTimeResponse_RealTime::clear_zjtrad() {
  zjtrad_ = 0;
  clear_has_zjtrad();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::zjtrad() const {
  return zjtrad_;
}
inline void RealTimeResponse_RealTime::set_zjtrad(::google::protobuf::int32 value) {
  set_has_zjtrad();
  zjtrad_ = value;
}

// optional int32 pjtrad = 72;
inline bool RealTimeResponse_RealTime::has_pjtrad() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_pjtrad() {
  _has_bits_[2] |= 0x00000080u;
}
inline void RealTimeResponse_RealTime::clear_has_pjtrad() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void RealTimeResponse_RealTime::clear_pjtrad() {
  pjtrad_ = 0;
  clear_has_pjtrad();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::pjtrad() const {
  return pjtrad_;
}
inline void RealTimeResponse_RealTime::set_pjtrad(::google::protobuf::int32 value) {
  set_has_pjtrad();
  pjtrad_ = value;
}

// optional int32 djtrad = 73;
inline bool RealTimeResponse_RealTime::has_djtrad() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_djtrad() {
  _has_bits_[2] |= 0x00000100u;
}
inline void RealTimeResponse_RealTime::clear_has_djtrad() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void RealTimeResponse_RealTime::clear_djtrad() {
  djtrad_ = 0;
  clear_has_djtrad();
}
inline ::google::protobuf::int32 RealTimeResponse_RealTime::djtrad() const {
  return djtrad_;
}
inline void RealTimeResponse_RealTime::set_djtrad(::google::protobuf::int32 value) {
  set_has_djtrad();
  djtrad_ = value;
}

// optional float dpdksp1 = 74;
inline bool RealTimeResponse_RealTime::has_dpdksp1() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_dpdksp1() {
  _has_bits_[2] |= 0x00000200u;
}
inline void RealTimeResponse_RealTime::clear_has_dpdksp1() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void RealTimeResponse_RealTime::clear_dpdksp1() {
  dpdksp1_ = 0;
  clear_has_dpdksp1();
}
inline float RealTimeResponse_RealTime::dpdksp1() const {
  return dpdksp1_;
}
inline void RealTimeResponse_RealTime::set_dpdksp1(float value) {
  set_has_dpdksp1();
  dpdksp1_ = value;
}

// optional float dpdksp = 75;
inline bool RealTimeResponse_RealTime::has_dpdksp() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_dpdksp() {
  _has_bits_[2] |= 0x00000400u;
}
inline void RealTimeResponse_RealTime::clear_has_dpdksp() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void RealTimeResponse_RealTime::clear_dpdksp() {
  dpdksp_ = 0;
  clear_has_dpdksp();
}
inline float RealTimeResponse_RealTime::dpdksp() const {
  return dpdksp_;
}
inline void RealTimeResponse_RealTime::set_dpdksp(float value) {
  set_has_dpdksp();
  dpdksp_ = value;
}

// optional float dpdkbp1 = 76;
inline bool RealTimeResponse_RealTime::has_dpdkbp1() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_dpdkbp1() {
  _has_bits_[2] |= 0x00000800u;
}
inline void RealTimeResponse_RealTime::clear_has_dpdkbp1() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void RealTimeResponse_RealTime::clear_dpdkbp1() {
  dpdkbp1_ = 0;
  clear_has_dpdkbp1();
}
inline float RealTimeResponse_RealTime::dpdkbp1() const {
  return dpdkbp1_;
}
inline void RealTimeResponse_RealTime::set_dpdkbp1(float value) {
  set_has_dpdkbp1();
  dpdkbp1_ = value;
}

// optional float dpdkbp = 77;
inline bool RealTimeResponse_RealTime::has_dpdkbp() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_dpdkbp() {
  _has_bits_[2] |= 0x00001000u;
}
inline void RealTimeResponse_RealTime::clear_has_dpdkbp() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void RealTimeResponse_RealTime::clear_dpdkbp() {
  dpdkbp_ = 0;
  clear_has_dpdkbp();
}
inline float RealTimeResponse_RealTime::dpdkbp() const {
  return dpdkbp_;
}
inline void RealTimeResponse_RealTime::set_dpdkbp(float value) {
  set_has_dpdkbp();
  dpdkbp_ = value;
}

// optional float leadingindex = 78;
inline bool RealTimeResponse_RealTime::has_leadingindex() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void RealTimeResponse_RealTime::set_has_leadingindex() {
  _has_bits_[2] |= 0x00002000u;
}
inline void RealTimeResponse_RealTime::clear_has_leadingindex() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void RealTimeResponse_RealTime::clear_leadingindex() {
  leadingindex_ = 0;
  clear_has_leadingindex();
}
inline float RealTimeResponse_RealTime::leadingindex() const {
  return leadingindex_;
}
inline void RealTimeResponse_RealTime::set_leadingindex(float value) {
  set_has_leadingindex();
  leadingindex_ = value;
}

// -------------------------------------------------------------------

// RealTimeResponse

// repeated .quote.RealTimeResponse.RealTime realtime = 1;
inline int RealTimeResponse::realtime_size() const {
  return realtime_.size();
}
inline void RealTimeResponse::clear_realtime() {
  realtime_.Clear();
}
inline const ::quote::RealTimeResponse_RealTime& RealTimeResponse::realtime(int index) const {
  return realtime_.Get(index);
}
inline ::quote::RealTimeResponse_RealTime* RealTimeResponse::mutable_realtime(int index) {
  return realtime_.Mutable(index);
}
inline ::quote::RealTimeResponse_RealTime* RealTimeResponse::add_realtime() {
  return realtime_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::RealTimeResponse_RealTime >&
RealTimeResponse::realtime() const {
  return realtime_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::RealTimeResponse_RealTime >*
RealTimeResponse::mutable_realtime() {
  return &realtime_;
}

// -------------------------------------------------------------------

// Grid

// required string secucode = 1;
inline bool Grid::has_secucode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Grid::set_has_secucode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Grid::clear_has_secucode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Grid::clear_secucode() {
  if (secucode_ != &::google::protobuf::internal::kEmptyString) {
    secucode_->clear();
  }
  clear_has_secucode();
}
inline const ::std::string& Grid::secucode() const {
  return *secucode_;
}
inline void Grid::set_secucode(const ::std::string& value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void Grid::set_secucode(const char* value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void Grid::set_secucode(const char* value, size_t size) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Grid::mutable_secucode() {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  return secucode_;
}
inline ::std::string* Grid::release_secucode() {
  clear_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secucode_;
    secucode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 exchange = 2;
inline bool Grid::has_exchange() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Grid::set_has_exchange() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Grid::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Grid::clear_exchange() {
  exchange_ = 0;
  clear_has_exchange();
}
inline ::google::protobuf::int32 Grid::exchange() const {
  return exchange_;
}
inline void Grid::set_exchange(::google::protobuf::int32 value) {
  set_has_exchange();
  exchange_ = value;
}

// required int32 secutype = 3;
inline bool Grid::has_secutype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Grid::set_has_secutype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Grid::clear_has_secutype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Grid::clear_secutype() {
  secutype_ = 0;
  clear_has_secutype();
}
inline ::google::protobuf::int32 Grid::secutype() const {
  return secutype_;
}
inline void Grid::set_secutype(::google::protobuf::int32 value) {
  set_has_secutype();
  secutype_ = value;
}

// required int32 tp = 4;
inline bool Grid::has_tp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Grid::set_has_tp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Grid::clear_has_tp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Grid::clear_tp() {
  tp_ = 0;
  clear_has_tp();
}
inline ::google::protobuf::int32 Grid::tp() const {
  return tp_;
}
inline void Grid::set_tp(::google::protobuf::int32 value) {
  set_has_tp();
  tp_ = value;
}

// required float open = 5;
inline bool Grid::has_open() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Grid::set_has_open() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Grid::clear_has_open() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Grid::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline float Grid::open() const {
  return open_;
}
inline void Grid::set_open(float value) {
  set_has_open();
  open_ = value;
}

// required float high = 6;
inline bool Grid::has_high() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Grid::set_has_high() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Grid::clear_has_high() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Grid::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline float Grid::high() const {
  return high_;
}
inline void Grid::set_high(float value) {
  set_has_high();
  high_ = value;
}

// required float low = 7;
inline bool Grid::has_low() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Grid::set_has_low() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Grid::clear_has_low() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Grid::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline float Grid::low() const {
  return low_;
}
inline void Grid::set_low(float value) {
  set_has_low();
  low_ = value;
}

// required float close = 8;
inline bool Grid::has_close() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Grid::set_has_close() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Grid::clear_has_close() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Grid::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline float Grid::close() const {
  return close_;
}
inline void Grid::set_close(float value) {
  set_has_close();
  close_ = value;
}

// required int64 vol = 9;
inline bool Grid::has_vol() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Grid::set_has_vol() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Grid::clear_has_vol() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Grid::clear_vol() {
  vol_ = GOOGLE_LONGLONG(0);
  clear_has_vol();
}
inline ::google::protobuf::int64 Grid::vol() const {
  return vol_;
}
inline void Grid::set_vol(::google::protobuf::int64 value) {
  set_has_vol();
  vol_ = value;
}

// required double amt = 10;
inline bool Grid::has_amt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Grid::set_has_amt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Grid::clear_has_amt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Grid::clear_amt() {
  amt_ = 0;
  clear_has_amt();
}
inline double Grid::amt() const {
  return amt_;
}
inline void Grid::set_amt(double value) {
  set_has_amt();
  amt_ = value;
}

// required float askprice1 = 11;
inline bool Grid::has_askprice1() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Grid::set_has_askprice1() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Grid::clear_has_askprice1() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Grid::clear_askprice1() {
  askprice1_ = 0;
  clear_has_askprice1();
}
inline float Grid::askprice1() const {
  return askprice1_;
}
inline void Grid::set_askprice1(float value) {
  set_has_askprice1();
  askprice1_ = value;
}

// required float bidprice1 = 12;
inline bool Grid::has_bidprice1() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Grid::set_has_bidprice1() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Grid::clear_has_bidprice1() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Grid::clear_bidprice1() {
  bidprice1_ = 0;
  clear_has_bidprice1();
}
inline float Grid::bidprice1() const {
  return bidprice1_;
}
inline void Grid::set_bidprice1(float value) {
  set_has_bidprice1();
  bidprice1_ = value;
}

// required float zf = 13;
inline bool Grid::has_zf() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Grid::set_has_zf() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Grid::clear_has_zf() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Grid::clear_zf() {
  zf_ = 0;
  clear_has_zf();
}
inline float Grid::zf() const {
  return zf_;
}
inline void Grid::set_zf(float value) {
  set_has_zf();
  zf_ = value;
}

// required float zd = 14;
inline bool Grid::has_zd() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Grid::set_has_zd() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Grid::clear_has_zd() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Grid::clear_zd() {
  zd_ = 0;
  clear_has_zd();
}
inline float Grid::zd() const {
  return zd_;
}
inline void Grid::set_zd(float value) {
  set_has_zd();
  zd_ = value;
}

// required float hs = 15;
inline bool Grid::has_hs() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Grid::set_has_hs() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Grid::clear_has_hs() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Grid::clear_hs() {
  hs_ = 0;
  clear_has_hs();
}
inline float Grid::hs() const {
  return hs_;
}
inline void Grid::set_hs(float value) {
  set_has_hs();
  hs_ = value;
}

// required float amp = 16;
inline bool Grid::has_amp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Grid::set_has_amp() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Grid::clear_has_amp() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Grid::clear_amp() {
  amp_ = 0;
  clear_has_amp();
}
inline float Grid::amp() const {
  return amp_;
}
inline void Grid::set_amp(float value) {
  set_has_amp();
  amp_ = value;
}

// required float lb = 17;
inline bool Grid::has_lb() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Grid::set_has_lb() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Grid::clear_has_lb() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Grid::clear_lb() {
  lb_ = 0;
  clear_has_lb();
}
inline float Grid::lb() const {
  return lb_;
}
inline void Grid::set_lb(float value) {
  set_has_lb();
  lb_ = value;
}

// required float wb = 18;
inline bool Grid::has_wb() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Grid::set_has_wb() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Grid::clear_has_wb() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Grid::clear_wb() {
  wb_ = 0;
  clear_has_wb();
}
inline float Grid::wb() const {
  return wb_;
}
inline void Grid::set_wb(float value) {
  set_has_wb();
  wb_ = value;
}

// required int32 wc = 19;
inline bool Grid::has_wc() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Grid::set_has_wc() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Grid::clear_has_wc() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Grid::clear_wc() {
  wc_ = 0;
  clear_has_wc();
}
inline ::google::protobuf::int32 Grid::wc() const {
  return wc_;
}
inline void Grid::set_wc(::google::protobuf::int32 value) {
  set_has_wc();
  wc_ = value;
}

// required int32 xs = 20;
inline bool Grid::has_xs() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Grid::set_has_xs() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Grid::clear_has_xs() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Grid::clear_xs() {
  xs_ = 0;
  clear_has_xs();
}
inline ::google::protobuf::int32 Grid::xs() const {
  return xs_;
}
inline void Grid::set_xs(::google::protobuf::int32 value) {
  set_has_xs();
  xs_ = value;
}

// required string nwp = 21;
inline bool Grid::has_nwp() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Grid::set_has_nwp() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Grid::clear_has_nwp() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Grid::clear_nwp() {
  if (nwp_ != &::google::protobuf::internal::kEmptyString) {
    nwp_->clear();
  }
  clear_has_nwp();
}
inline const ::std::string& Grid::nwp() const {
  return *nwp_;
}
inline void Grid::set_nwp(const ::std::string& value) {
  set_has_nwp();
  if (nwp_ == &::google::protobuf::internal::kEmptyString) {
    nwp_ = new ::std::string;
  }
  nwp_->assign(value);
}
inline void Grid::set_nwp(const char* value) {
  set_has_nwp();
  if (nwp_ == &::google::protobuf::internal::kEmptyString) {
    nwp_ = new ::std::string;
  }
  nwp_->assign(value);
}
inline void Grid::set_nwp(const char* value, size_t size) {
  set_has_nwp();
  if (nwp_ == &::google::protobuf::internal::kEmptyString) {
    nwp_ = new ::std::string;
  }
  nwp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Grid::mutable_nwp() {
  set_has_nwp();
  if (nwp_ == &::google::protobuf::internal::kEmptyString) {
    nwp_ = new ::std::string;
  }
  return nwp_;
}
inline ::std::string* Grid::release_nwp() {
  clear_has_nwp();
  if (nwp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nwp_;
    nwp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GridRequest

// repeated string stockcode = 1;
inline int GridRequest::stockcode_size() const {
  return stockcode_.size();
}
inline void GridRequest::clear_stockcode() {
  stockcode_.Clear();
}
inline const ::std::string& GridRequest::stockcode(int index) const {
  return stockcode_.Get(index);
}
inline ::std::string* GridRequest::mutable_stockcode(int index) {
  return stockcode_.Mutable(index);
}
inline void GridRequest::set_stockcode(int index, const ::std::string& value) {
  stockcode_.Mutable(index)->assign(value);
}
inline void GridRequest::set_stockcode(int index, const char* value) {
  stockcode_.Mutable(index)->assign(value);
}
inline void GridRequest::set_stockcode(int index, const char* value, size_t size) {
  stockcode_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GridRequest::add_stockcode() {
  return stockcode_.Add();
}
inline void GridRequest::add_stockcode(const ::std::string& value) {
  stockcode_.Add()->assign(value);
}
inline void GridRequest::add_stockcode(const char* value) {
  stockcode_.Add()->assign(value);
}
inline void GridRequest::add_stockcode(const char* value, size_t size) {
  stockcode_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GridRequest::stockcode() const {
  return stockcode_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GridRequest::mutable_stockcode() {
  return &stockcode_;
}

// optional .quote.GridRequest.Field field = 2;
inline bool GridRequest::has_field() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GridRequest::set_has_field() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GridRequest::clear_has_field() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GridRequest::clear_field() {
  field_ = 1;
  clear_has_field();
}
inline ::quote::GridRequest_Field GridRequest::field() const {
  return static_cast< ::quote::GridRequest_Field >(field_);
}
inline void GridRequest::set_field(::quote::GridRequest_Field value) {
  GOOGLE_DCHECK(::quote::GridRequest_Field_IsValid(value));
  set_has_field();
  field_ = value;
}

// optional .quote.GridRequest.Sort sort = 3;
inline bool GridRequest::has_sort() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GridRequest::set_has_sort() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GridRequest::clear_has_sort() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GridRequest::clear_sort() {
  sort_ = 1;
  clear_has_sort();
}
inline ::quote::GridRequest_Sort GridRequest::sort() const {
  return static_cast< ::quote::GridRequest_Sort >(sort_);
}
inline void GridRequest::set_sort(::quote::GridRequest_Sort value) {
  GOOGLE_DCHECK(::quote::GridRequest_Sort_IsValid(value));
  set_has_sort();
  sort_ = value;
}

// -------------------------------------------------------------------

// GridResponse

// repeated .quote.Grid grid = 1;
inline int GridResponse::grid_size() const {
  return grid_.size();
}
inline void GridResponse::clear_grid() {
  grid_.Clear();
}
inline const ::quote::Grid& GridResponse::grid(int index) const {
  return grid_.Get(index);
}
inline ::quote::Grid* GridResponse::mutable_grid(int index) {
  return grid_.Mutable(index);
}
inline ::quote::Grid* GridResponse::add_grid() {
  return grid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::Grid >&
GridResponse::grid() const {
  return grid_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::Grid >*
GridResponse::mutable_grid() {
  return &grid_;
}

// -------------------------------------------------------------------

// GridSortRequest

// repeated int32 secutype = 1;
inline int GridSortRequest::secutype_size() const {
  return secutype_.size();
}
inline void GridSortRequest::clear_secutype() {
  secutype_.Clear();
}
inline ::google::protobuf::int32 GridSortRequest::secutype(int index) const {
  return secutype_.Get(index);
}
inline void GridSortRequest::set_secutype(int index, ::google::protobuf::int32 value) {
  secutype_.Set(index, value);
}
inline void GridSortRequest::add_secutype(::google::protobuf::int32 value) {
  secutype_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GridSortRequest::secutype() const {
  return secutype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GridSortRequest::mutable_secutype() {
  return &secutype_;
}

// required bool block = 2;
inline bool GridSortRequest::has_block() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GridSortRequest::set_has_block() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GridSortRequest::clear_has_block() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GridSortRequest::clear_block() {
  block_ = false;
  clear_has_block();
}
inline bool GridSortRequest::block() const {
  return block_;
}
inline void GridSortRequest::set_block(bool value) {
  set_has_block();
  block_ = value;
}

// optional int32 page = 3;
inline bool GridSortRequest::has_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GridSortRequest::set_has_page() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GridSortRequest::clear_has_page() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GridSortRequest::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 GridSortRequest::page() const {
  return page_;
}
inline void GridSortRequest::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// optional int32 startidx = 4;
inline bool GridSortRequest::has_startidx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GridSortRequest::set_has_startidx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GridSortRequest::clear_has_startidx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GridSortRequest::clear_startidx() {
  startidx_ = 0;
  clear_has_startidx();
}
inline ::google::protobuf::int32 GridSortRequest::startidx() const {
  return startidx_;
}
inline void GridSortRequest::set_startidx(::google::protobuf::int32 value) {
  set_has_startidx();
  startidx_ = value;
}

// required int32 len = 5;
inline bool GridSortRequest::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GridSortRequest::set_has_len() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GridSortRequest::clear_has_len() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GridSortRequest::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 GridSortRequest::len() const {
  return len_;
}
inline void GridSortRequest::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
}

// required .quote.GridSortRequest.Field field = 6;
inline bool GridSortRequest::has_field() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GridSortRequest::set_has_field() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GridSortRequest::clear_has_field() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GridSortRequest::clear_field() {
  field_ = 1;
  clear_has_field();
}
inline ::quote::GridSortRequest_Field GridSortRequest::field() const {
  return static_cast< ::quote::GridSortRequest_Field >(field_);
}
inline void GridSortRequest::set_field(::quote::GridSortRequest_Field value) {
  GOOGLE_DCHECK(::quote::GridSortRequest_Field_IsValid(value));
  set_has_field();
  field_ = value;
}

// required .quote.GridSortRequest.Sort sort = 7;
inline bool GridSortRequest::has_sort() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GridSortRequest::set_has_sort() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GridSortRequest::clear_has_sort() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GridSortRequest::clear_sort() {
  sort_ = 1;
  clear_has_sort();
}
inline ::quote::GridSortRequest_Sort GridSortRequest::sort() const {
  return static_cast< ::quote::GridSortRequest_Sort >(sort_);
}
inline void GridSortRequest::set_sort(::quote::GridSortRequest_Sort value) {
  GOOGLE_DCHECK(::quote::GridSortRequest_Sort_IsValid(value));
  set_has_sort();
  sort_ = value;
}

// -------------------------------------------------------------------

// GridSortResponse

// repeated .quote.Grid grid = 1;
inline int GridSortResponse::grid_size() const {
  return grid_.size();
}
inline void GridSortResponse::clear_grid() {
  grid_.Clear();
}
inline const ::quote::Grid& GridSortResponse::grid(int index) const {
  return grid_.Get(index);
}
inline ::quote::Grid* GridSortResponse::mutable_grid(int index) {
  return grid_.Mutable(index);
}
inline ::quote::Grid* GridSortResponse::add_grid() {
  return grid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::Grid >&
GridSortResponse::grid() const {
  return grid_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::Grid >*
GridSortResponse::mutable_grid() {
  return &grid_;
}

// -------------------------------------------------------------------

// DetailRequest

// required string stockcode = 1;
inline bool DetailRequest::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetailRequest::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetailRequest::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetailRequest::clear_stockcode() {
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    stockcode_->clear();
  }
  clear_has_stockcode();
}
inline const ::std::string& DetailRequest::stockcode() const {
  return *stockcode_;
}
inline void DetailRequest::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void DetailRequest::set_stockcode(const char* value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void DetailRequest::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DetailRequest::mutable_stockcode() {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  return stockcode_;
}
inline ::std::string* DetailRequest::release_stockcode() {
  clear_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockcode_;
    stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 len = 2;
inline bool DetailRequest::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetailRequest::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetailRequest::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetailRequest::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 DetailRequest::len() const {
  return len_;
}
inline void DetailRequest::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
}

// optional int32 id = 3;
inline bool DetailRequest::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetailRequest::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetailRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetailRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DetailRequest::id() const {
  return id_;
}
inline void DetailRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .quote.DetailRequest.Direction direction = 4;
inline bool DetailRequest::has_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetailRequest::set_has_direction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetailRequest::clear_has_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetailRequest::clear_direction() {
  direction_ = 1;
  clear_has_direction();
}
inline ::quote::DetailRequest_Direction DetailRequest::direction() const {
  return static_cast< ::quote::DetailRequest_Direction >(direction_);
}
inline void DetailRequest::set_direction(::quote::DetailRequest_Direction value) {
  GOOGLE_DCHECK(::quote::DetailRequest_Direction_IsValid(value));
  set_has_direction();
  direction_ = value;
}

// -------------------------------------------------------------------

// MinRequest

// required string stockcode = 1;
inline bool MinRequest::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MinRequest::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MinRequest::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MinRequest::clear_stockcode() {
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    stockcode_->clear();
  }
  clear_has_stockcode();
}
inline const ::std::string& MinRequest::stockcode() const {
  return *stockcode_;
}
inline void MinRequest::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void MinRequest::set_stockcode(const char* value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void MinRequest::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MinRequest::mutable_stockcode() {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  return stockcode_;
}
inline ::std::string* MinRequest::release_stockcode() {
  clear_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockcode_;
    stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated int32 day = 2;
inline int MinRequest::day_size() const {
  return day_.size();
}
inline void MinRequest::clear_day() {
  day_.Clear();
}
inline ::google::protobuf::int32 MinRequest::day(int index) const {
  return day_.Get(index);
}
inline void MinRequest::set_day(int index, ::google::protobuf::int32 value) {
  day_.Set(index, value);
}
inline void MinRequest::add_day(::google::protobuf::int32 value) {
  day_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MinRequest::day() const {
  return day_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MinRequest::mutable_day() {
  return &day_;
}

// -------------------------------------------------------------------

// StatusRequest

// repeated string stockcode = 1;
inline int StatusRequest::stockcode_size() const {
  return stockcode_.size();
}
inline void StatusRequest::clear_stockcode() {
  stockcode_.Clear();
}
inline const ::std::string& StatusRequest::stockcode(int index) const {
  return stockcode_.Get(index);
}
inline ::std::string* StatusRequest::mutable_stockcode(int index) {
  return stockcode_.Mutable(index);
}
inline void StatusRequest::set_stockcode(int index, const ::std::string& value) {
  stockcode_.Mutable(index)->assign(value);
}
inline void StatusRequest::set_stockcode(int index, const char* value) {
  stockcode_.Mutable(index)->assign(value);
}
inline void StatusRequest::set_stockcode(int index, const char* value, size_t size) {
  stockcode_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StatusRequest::add_stockcode() {
  return stockcode_.Add();
}
inline void StatusRequest::add_stockcode(const ::std::string& value) {
  stockcode_.Add()->assign(value);
}
inline void StatusRequest::add_stockcode(const char* value) {
  stockcode_.Add()->assign(value);
}
inline void StatusRequest::add_stockcode(const char* value, size_t size) {
  stockcode_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StatusRequest::stockcode() const {
  return stockcode_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StatusRequest::mutable_stockcode() {
  return &stockcode_;
}

// -------------------------------------------------------------------

// StatusResponse_Status

// required string secucode = 1;
inline bool StatusResponse_Status::has_secucode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatusResponse_Status::set_has_secucode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatusResponse_Status::clear_has_secucode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatusResponse_Status::clear_secucode() {
  if (secucode_ != &::google::protobuf::internal::kEmptyString) {
    secucode_->clear();
  }
  clear_has_secucode();
}
inline const ::std::string& StatusResponse_Status::secucode() const {
  return *secucode_;
}
inline void StatusResponse_Status::set_secucode(const ::std::string& value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void StatusResponse_Status::set_secucode(const char* value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void StatusResponse_Status::set_secucode(const char* value, size_t size) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StatusResponse_Status::mutable_secucode() {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  return secucode_;
}
inline ::std::string* StatusResponse_Status::release_secucode() {
  clear_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secucode_;
    secucode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 exchange = 2;
inline bool StatusResponse_Status::has_exchange() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatusResponse_Status::set_has_exchange() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatusResponse_Status::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatusResponse_Status::clear_exchange() {
  exchange_ = 0;
  clear_has_exchange();
}
inline ::google::protobuf::int32 StatusResponse_Status::exchange() const {
  return exchange_;
}
inline void StatusResponse_Status::set_exchange(::google::protobuf::int32 value) {
  set_has_exchange();
  exchange_ = value;
}

// required float close = 3;
inline bool StatusResponse_Status::has_close() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatusResponse_Status::set_has_close() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatusResponse_Status::clear_has_close() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatusResponse_Status::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline float StatusResponse_Status::close() const {
  return close_;
}
inline void StatusResponse_Status::set_close(float value) {
  set_has_close();
  close_ = value;
}

// required float zf = 4;
inline bool StatusResponse_Status::has_zf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatusResponse_Status::set_has_zf() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StatusResponse_Status::clear_has_zf() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StatusResponse_Status::clear_zf() {
  zf_ = 0;
  clear_has_zf();
}
inline float StatusResponse_Status::zf() const {
  return zf_;
}
inline void StatusResponse_Status::set_zf(float value) {
  set_has_zf();
  zf_ = value;
}

// required float zd = 5;
inline bool StatusResponse_Status::has_zd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StatusResponse_Status::set_has_zd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StatusResponse_Status::clear_has_zd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StatusResponse_Status::clear_zd() {
  zd_ = 0;
  clear_has_zd();
}
inline float StatusResponse_Status::zd() const {
  return zd_;
}
inline void StatusResponse_Status::set_zd(float value) {
  set_has_zd();
  zd_ = value;
}

// required double amt = 6;
inline bool StatusResponse_Status::has_amt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StatusResponse_Status::set_has_amt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StatusResponse_Status::clear_has_amt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StatusResponse_Status::clear_amt() {
  amt_ = 0;
  clear_has_amt();
}
inline double StatusResponse_Status::amt() const {
  return amt_;
}
inline void StatusResponse_Status::set_amt(double value) {
  set_has_amt();
  amt_ = value;
}

// -------------------------------------------------------------------

// StatusResponse

// repeated .quote.StatusResponse.Status status = 1;
inline int StatusResponse::status_size() const {
  return status_.size();
}
inline void StatusResponse::clear_status() {
  status_.Clear();
}
inline const ::quote::StatusResponse_Status& StatusResponse::status(int index) const {
  return status_.Get(index);
}
inline ::quote::StatusResponse_Status* StatusResponse::mutable_status(int index) {
  return status_.Mutable(index);
}
inline ::quote::StatusResponse_Status* StatusResponse::add_status() {
  return status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::StatusResponse_Status >&
StatusResponse::status() const {
  return status_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::StatusResponse_Status >*
StatusResponse::mutable_status() {
  return &status_;
}

// -------------------------------------------------------------------

// ZhpmRequest

// repeated int32 secutype = 1;
inline int ZhpmRequest::secutype_size() const {
  return secutype_.size();
}
inline void ZhpmRequest::clear_secutype() {
  secutype_.Clear();
}
inline ::google::protobuf::int32 ZhpmRequest::secutype(int index) const {
  return secutype_.Get(index);
}
inline void ZhpmRequest::set_secutype(int index, ::google::protobuf::int32 value) {
  secutype_.Set(index, value);
}
inline void ZhpmRequest::add_secutype(::google::protobuf::int32 value) {
  secutype_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ZhpmRequest::secutype() const {
  return secutype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ZhpmRequest::mutable_secutype() {
  return &secutype_;
}

// repeated int32 zhpmtype = 2;
inline int ZhpmRequest::zhpmtype_size() const {
  return zhpmtype_.size();
}
inline void ZhpmRequest::clear_zhpmtype() {
  zhpmtype_.Clear();
}
inline ::google::protobuf::int32 ZhpmRequest::zhpmtype(int index) const {
  return zhpmtype_.Get(index);
}
inline void ZhpmRequest::set_zhpmtype(int index, ::google::protobuf::int32 value) {
  zhpmtype_.Set(index, value);
}
inline void ZhpmRequest::add_zhpmtype(::google::protobuf::int32 value) {
  zhpmtype_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ZhpmRequest::zhpmtype() const {
  return zhpmtype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ZhpmRequest::mutable_zhpmtype() {
  return &zhpmtype_;
}

// required int32 len = 3;
inline bool ZhpmRequest::has_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZhpmRequest::set_has_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZhpmRequest::clear_has_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZhpmRequest::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 ZhpmRequest::len() const {
  return len_;
}
inline void ZhpmRequest::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
}

// -------------------------------------------------------------------

// ZhpmResponse_Zhpm_ZhpmStock

// required string secucode = 1;
inline bool ZhpmResponse_Zhpm_ZhpmStock::has_secucode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::set_has_secucode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::clear_has_secucode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::clear_secucode() {
  if (secucode_ != &::google::protobuf::internal::kEmptyString) {
    secucode_->clear();
  }
  clear_has_secucode();
}
inline const ::std::string& ZhpmResponse_Zhpm_ZhpmStock::secucode() const {
  return *secucode_;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::set_secucode(const ::std::string& value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void ZhpmResponse_Zhpm_ZhpmStock::set_secucode(const char* value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void ZhpmResponse_Zhpm_ZhpmStock::set_secucode(const char* value, size_t size) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZhpmResponse_Zhpm_ZhpmStock::mutable_secucode() {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  return secucode_;
}
inline ::std::string* ZhpmResponse_Zhpm_ZhpmStock::release_secucode() {
  clear_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secucode_;
    secucode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 exchange = 2;
inline bool ZhpmResponse_Zhpm_ZhpmStock::has_exchange() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::set_has_exchange() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::clear_exchange() {
  exchange_ = 0;
  clear_has_exchange();
}
inline ::google::protobuf::int32 ZhpmResponse_Zhpm_ZhpmStock::exchange() const {
  return exchange_;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::set_exchange(::google::protobuf::int32 value) {
  set_has_exchange();
  exchange_ = value;
}

// required float close = 3;
inline bool ZhpmResponse_Zhpm_ZhpmStock::has_close() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::set_has_close() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::clear_has_close() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline float ZhpmResponse_Zhpm_ZhpmStock::close() const {
  return close_;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::set_close(float value) {
  set_has_close();
  close_ = value;
}

// required float zf = 4;
inline bool ZhpmResponse_Zhpm_ZhpmStock::has_zf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::set_has_zf() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::clear_has_zf() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::clear_zf() {
  zf_ = 0;
  clear_has_zf();
}
inline float ZhpmResponse_Zhpm_ZhpmStock::zf() const {
  return zf_;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::set_zf(float value) {
  set_has_zf();
  zf_ = value;
}

// required double value = 5;
inline bool ZhpmResponse_Zhpm_ZhpmStock::has_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::set_has_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::clear_has_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double ZhpmResponse_Zhpm_ZhpmStock::value() const {
  return value_;
}
inline void ZhpmResponse_Zhpm_ZhpmStock::set_value(double value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// ZhpmResponse_Zhpm

// required int32 type = 1;
inline bool ZhpmResponse_Zhpm::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZhpmResponse_Zhpm::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZhpmResponse_Zhpm::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZhpmResponse_Zhpm::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ZhpmResponse_Zhpm::type() const {
  return type_;
}
inline void ZhpmResponse_Zhpm::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated .quote.ZhpmResponse.Zhpm.ZhpmStock zhpmstock = 2;
inline int ZhpmResponse_Zhpm::zhpmstock_size() const {
  return zhpmstock_.size();
}
inline void ZhpmResponse_Zhpm::clear_zhpmstock() {
  zhpmstock_.Clear();
}
inline const ::quote::ZhpmResponse_Zhpm_ZhpmStock& ZhpmResponse_Zhpm::zhpmstock(int index) const {
  return zhpmstock_.Get(index);
}
inline ::quote::ZhpmResponse_Zhpm_ZhpmStock* ZhpmResponse_Zhpm::mutable_zhpmstock(int index) {
  return zhpmstock_.Mutable(index);
}
inline ::quote::ZhpmResponse_Zhpm_ZhpmStock* ZhpmResponse_Zhpm::add_zhpmstock() {
  return zhpmstock_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::ZhpmResponse_Zhpm_ZhpmStock >&
ZhpmResponse_Zhpm::zhpmstock() const {
  return zhpmstock_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::ZhpmResponse_Zhpm_ZhpmStock >*
ZhpmResponse_Zhpm::mutable_zhpmstock() {
  return &zhpmstock_;
}

// -------------------------------------------------------------------

// ZhpmResponse

// repeated .quote.ZhpmResponse.Zhpm zhpm = 1;
inline int ZhpmResponse::zhpm_size() const {
  return zhpm_.size();
}
inline void ZhpmResponse::clear_zhpm() {
  zhpm_.Clear();
}
inline const ::quote::ZhpmResponse_Zhpm& ZhpmResponse::zhpm(int index) const {
  return zhpm_.Get(index);
}
inline ::quote::ZhpmResponse_Zhpm* ZhpmResponse::mutable_zhpm(int index) {
  return zhpm_.Mutable(index);
}
inline ::quote::ZhpmResponse_Zhpm* ZhpmResponse::add_zhpm() {
  return zhpm_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::ZhpmResponse_Zhpm >&
ZhpmResponse::zhpm() const {
  return zhpm_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::ZhpmResponse_Zhpm >*
ZhpmResponse::mutable_zhpm() {
  return &zhpm_;
}

// -------------------------------------------------------------------

// CandleRequest

// required string stockcode = 1;
inline bool CandleRequest::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CandleRequest::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CandleRequest::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CandleRequest::clear_stockcode() {
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    stockcode_->clear();
  }
  clear_has_stockcode();
}
inline const ::std::string& CandleRequest::stockcode() const {
  return *stockcode_;
}
inline void CandleRequest::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void CandleRequest::set_stockcode(const char* value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void CandleRequest::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CandleRequest::mutable_stockcode() {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  return stockcode_;
}
inline ::std::string* CandleRequest::release_stockcode() {
  clear_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockcode_;
    stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .quote.CandleRequest.CandleCycle candlecycle = 2;
inline bool CandleRequest::has_candlecycle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CandleRequest::set_has_candlecycle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CandleRequest::clear_has_candlecycle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CandleRequest::clear_candlecycle() {
  candlecycle_ = 1;
  clear_has_candlecycle();
}
inline ::quote::CandleRequest_CandleCycle CandleRequest::candlecycle() const {
  return static_cast< ::quote::CandleRequest_CandleCycle >(candlecycle_);
}
inline void CandleRequest::set_candlecycle(::quote::CandleRequest_CandleCycle value) {
  GOOGLE_DCHECK(::quote::CandleRequest_CandleCycle_IsValid(value));
  set_has_candlecycle();
  candlecycle_ = value;
}

// required int32 len = 3;
inline bool CandleRequest::has_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CandleRequest::set_has_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CandleRequest::clear_has_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CandleRequest::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 CandleRequest::len() const {
  return len_;
}
inline void CandleRequest::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
}

// optional string date = 4;
inline bool CandleRequest::has_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CandleRequest::set_has_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CandleRequest::clear_has_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CandleRequest::clear_date() {
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    date_->clear();
  }
  clear_has_date();
}
inline const ::std::string& CandleRequest::date() const {
  return *date_;
}
inline void CandleRequest::set_date(const ::std::string& value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void CandleRequest::set_date(const char* value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void CandleRequest::set_date(const char* value, size_t size) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CandleRequest::mutable_date() {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  return date_;
}
inline ::std::string* CandleRequest::release_date() {
  clear_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = date_;
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 id = 5;
inline bool CandleRequest::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CandleRequest::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CandleRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CandleRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CandleRequest::id() const {
  return id_;
}
inline void CandleRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required .quote.CandleRequest.Direction direction = 6;
inline bool CandleRequest::has_direction() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CandleRequest::set_has_direction() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CandleRequest::clear_has_direction() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CandleRequest::clear_direction() {
  direction_ = 1;
  clear_has_direction();
}
inline ::quote::CandleRequest_Direction CandleRequest::direction() const {
  return static_cast< ::quote::CandleRequest_Direction >(direction_);
}
inline void CandleRequest::set_direction(::quote::CandleRequest_Direction value) {
  GOOGLE_DCHECK(::quote::CandleRequest_Direction_IsValid(value));
  set_has_direction();
  direction_ = value;
}

// -------------------------------------------------------------------

// StockRequest

// required int32 exchange = 1;
inline bool StockRequest::has_exchange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockRequest::set_has_exchange() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockRequest::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockRequest::clear_exchange() {
  exchange_ = 0;
  clear_has_exchange();
}
inline ::google::protobuf::int32 StockRequest::exchange() const {
  return exchange_;
}
inline void StockRequest::set_exchange(::google::protobuf::int32 value) {
  set_has_exchange();
  exchange_ = value;
}

// -------------------------------------------------------------------

// FinanceRequest

// optional int32 exchange = 1;
inline bool FinanceRequest::has_exchange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FinanceRequest::set_has_exchange() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FinanceRequest::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FinanceRequest::clear_exchange() {
  exchange_ = 0;
  clear_has_exchange();
}
inline ::google::protobuf::int32 FinanceRequest::exchange() const {
  return exchange_;
}
inline void FinanceRequest::set_exchange(::google::protobuf::int32 value) {
  set_has_exchange();
  exchange_ = value;
}

// -------------------------------------------------------------------

// WeightRequest

// required string secucode = 1;
inline bool WeightRequest::has_secucode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeightRequest::set_has_secucode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeightRequest::clear_has_secucode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeightRequest::clear_secucode() {
  if (secucode_ != &::google::protobuf::internal::kEmptyString) {
    secucode_->clear();
  }
  clear_has_secucode();
}
inline const ::std::string& WeightRequest::secucode() const {
  return *secucode_;
}
inline void WeightRequest::set_secucode(const ::std::string& value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void WeightRequest::set_secucode(const char* value) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(value);
}
inline void WeightRequest::set_secucode(const char* value, size_t size) {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  secucode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WeightRequest::mutable_secucode() {
  set_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    secucode_ = new ::std::string;
  }
  return secucode_;
}
inline ::std::string* WeightRequest::release_secucode() {
  clear_has_secucode();
  if (secucode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secucode_;
    secucode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BlockRequest

// required .quote.BlockRequest.Block block = 1;
inline bool BlockRequest::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockRequest::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockRequest::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockRequest::clear_block() {
  block_ = 1;
  clear_has_block();
}
inline ::quote::BlockRequest_Block BlockRequest::block() const {
  return static_cast< ::quote::BlockRequest_Block >(block_);
}
inline void BlockRequest::set_block(::quote::BlockRequest_Block value) {
  GOOGLE_DCHECK(::quote::BlockRequest_Block_IsValid(value));
  set_has_block();
  block_ = value;
}

// -------------------------------------------------------------------

// LargeRequest

// required int32 len = 1;
inline bool LargeRequest::has_len() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LargeRequest::set_has_len() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LargeRequest::clear_has_len() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LargeRequest::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 LargeRequest::len() const {
  return len_;
}
inline void LargeRequest::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
}

// -------------------------------------------------------------------

// PriceRequest

// required string stockcode = 1;
inline bool PriceRequest::has_stockcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PriceRequest::set_has_stockcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PriceRequest::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PriceRequest::clear_stockcode() {
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    stockcode_->clear();
  }
  clear_has_stockcode();
}
inline const ::std::string& PriceRequest::stockcode() const {
  return *stockcode_;
}
inline void PriceRequest::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void PriceRequest::set_stockcode(const char* value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void PriceRequest::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PriceRequest::mutable_stockcode() {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  return stockcode_;
}
inline ::std::string* PriceRequest::release_stockcode() {
  clear_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockcode_;
    stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 len = 2;
inline bool PriceRequest::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PriceRequest::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PriceRequest::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PriceRequest::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 PriceRequest::len() const {
  return len_;
}
inline void PriceRequest::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
}

// optional float close = 3;
inline bool PriceRequest::has_close() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PriceRequest::set_has_close() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PriceRequest::clear_has_close() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PriceRequest::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline float PriceRequest::close() const {
  return close_;
}
inline void PriceRequest::set_close(float value) {
  set_has_close();
  close_ = value;
}

// optional .quote.PriceRequest.Direction direction = 4;
inline bool PriceRequest::has_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PriceRequest::set_has_direction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PriceRequest::clear_has_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PriceRequest::clear_direction() {
  direction_ = 1;
  clear_has_direction();
}
inline ::quote::PriceRequest_Direction PriceRequest::direction() const {
  return static_cast< ::quote::PriceRequest_Direction >(direction_);
}
inline void PriceRequest::set_direction(::quote::PriceRequest_Direction value) {
  GOOGLE_DCHECK(::quote::PriceRequest_Direction_IsValid(value));
  set_has_direction();
  direction_ = value;
}

// -------------------------------------------------------------------

// PriceResponse_Price

// required float close = 1;
inline bool PriceResponse_Price::has_close() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PriceResponse_Price::set_has_close() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PriceResponse_Price::clear_has_close() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PriceResponse_Price::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline float PriceResponse_Price::close() const {
  return close_;
}
inline void PriceResponse_Price::set_close(float value) {
  set_has_close();
  close_ = value;
}

// required double sumxsb = 2;
inline bool PriceResponse_Price::has_sumxsb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PriceResponse_Price::set_has_sumxsb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PriceResponse_Price::clear_has_sumxsb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PriceResponse_Price::clear_sumxsb() {
  sumxsb_ = 0;
  clear_has_sumxsb();
}
inline double PriceResponse_Price::sumxsb() const {
  return sumxsb_;
}
inline void PriceResponse_Price::set_sumxsb(double value) {
  set_has_sumxsb();
  sumxsb_ = value;
}

// required double sumxeb = 3;
inline bool PriceResponse_Price::has_sumxeb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PriceResponse_Price::set_has_sumxeb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PriceResponse_Price::clear_has_sumxeb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PriceResponse_Price::clear_sumxeb() {
  sumxeb_ = 0;
  clear_has_sumxeb();
}
inline double PriceResponse_Price::sumxeb() const {
  return sumxeb_;
}
inline void PriceResponse_Price::set_sumxeb(double value) {
  set_has_sumxeb();
  sumxeb_ = value;
}

// required double sumxs = 4;
inline bool PriceResponse_Price::has_sumxs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PriceResponse_Price::set_has_sumxs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PriceResponse_Price::clear_has_sumxs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PriceResponse_Price::clear_sumxs() {
  sumxs_ = 0;
  clear_has_sumxs();
}
inline double PriceResponse_Price::sumxs() const {
  return sumxs_;
}
inline void PriceResponse_Price::set_sumxs(double value) {
  set_has_sumxs();
  sumxs_ = value;
}

// required double sumxe = 5;
inline bool PriceResponse_Price::has_sumxe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PriceResponse_Price::set_has_sumxe() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PriceResponse_Price::clear_has_sumxe() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PriceResponse_Price::clear_sumxe() {
  sumxe_ = 0;
  clear_has_sumxe();
}
inline double PriceResponse_Price::sumxe() const {
  return sumxe_;
}
inline void PriceResponse_Price::set_sumxe(double value) {
  set_has_sumxe();
  sumxe_ = value;
}

// -------------------------------------------------------------------

// PriceResponse

// required double maxsumxs = 1;
inline bool PriceResponse::has_maxsumxs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PriceResponse::set_has_maxsumxs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PriceResponse::clear_has_maxsumxs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PriceResponse::clear_maxsumxs() {
  maxsumxs_ = 0;
  clear_has_maxsumxs();
}
inline double PriceResponse::maxsumxs() const {
  return maxsumxs_;
}
inline void PriceResponse::set_maxsumxs(double value) {
  set_has_maxsumxs();
  maxsumxs_ = value;
}

// required double maxsumxe = 2;
inline bool PriceResponse::has_maxsumxe() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PriceResponse::set_has_maxsumxe() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PriceResponse::clear_has_maxsumxe() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PriceResponse::clear_maxsumxe() {
  maxsumxe_ = 0;
  clear_has_maxsumxe();
}
inline double PriceResponse::maxsumxe() const {
  return maxsumxe_;
}
inline void PriceResponse::set_maxsumxe(double value) {
  set_has_maxsumxe();
  maxsumxe_ = value;
}

// repeated .quote.PriceResponse.Price price = 3;
inline int PriceResponse::price_size() const {
  return price_.size();
}
inline void PriceResponse::clear_price() {
  price_.Clear();
}
inline const ::quote::PriceResponse_Price& PriceResponse::price(int index) const {
  return price_.Get(index);
}
inline ::quote::PriceResponse_Price* PriceResponse::mutable_price(int index) {
  return price_.Mutable(index);
}
inline ::quote::PriceResponse_Price* PriceResponse::add_price() {
  return price_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quote::PriceResponse_Price >&
PriceResponse::price() const {
  return price_;
}
inline ::google::protobuf::RepeatedPtrField< ::quote::PriceResponse_Price >*
PriceResponse::mutable_price() {
  return &price_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace quote

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::quote::GridRequest_Field>() {
  return ::quote::GridRequest_Field_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::quote::GridRequest_Sort>() {
  return ::quote::GridRequest_Sort_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::quote::GridSortRequest_Field>() {
  return ::quote::GridSortRequest_Field_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::quote::GridSortRequest_Sort>() {
  return ::quote::GridSortRequest_Sort_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::quote::DetailRequest_Direction>() {
  return ::quote::DetailRequest_Direction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::quote::CandleRequest_CandleCycle>() {
  return ::quote::CandleRequest_CandleCycle_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::quote::CandleRequest_Direction>() {
  return ::quote::CandleRequest_Direction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::quote::BlockRequest_Block>() {
  return ::quote::BlockRequest_Block_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::quote::PriceRequest_Direction>() {
  return ::quote::PriceRequest_Direction_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_communication_2eproto__INCLUDED
