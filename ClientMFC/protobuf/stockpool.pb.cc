// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stockpool.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace quote {

namespace {

const ::google::protobuf::Descriptor* Stock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stock_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pool_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoolType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoolType_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddStockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddStockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddStockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddStockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateStockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateStockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateStockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateStockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryStockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryStockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryStockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryStockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePoolRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePoolRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePoolResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePoolResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPoolRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPoolRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPoolResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPoolResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePoolTypeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePoolTypeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePoolTypeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePoolTypeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPoolTypeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPoolTypeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPoolTypeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPoolTypeResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_stockpool_2eproto() {
  protobuf_AddDesc_stockpool_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stockpool.proto");
  GOOGLE_CHECK(file != NULL);
  Stock_descriptor_ = file->message_type(0);
  static const int Stock_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stock, secucode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stock, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stock, remove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stock, pooltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stock, poolgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stock, seqno_),
  };
  Stock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stock_descriptor_,
      Stock::default_instance_,
      Stock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stock));
  Pool_descriptor_ = file->message_type(1);
  static const int Pool_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pool, poolname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pool, pooltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pool, poolgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pool, remove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pool, seqno_),
  };
  Pool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pool_descriptor_,
      Pool::default_instance_,
      Pool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pool));
  PoolType_descriptor_ = file->message_type(2);
  static const int PoolType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolType, pooltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolType, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolType, remove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolType, seqno_),
  };
  PoolType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PoolType_descriptor_,
      PoolType::default_instance_,
      PoolType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PoolType));
  AddStockRequest_descriptor_ = file->message_type(3);
  static const int AddStockRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStockRequest, custid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStockRequest, orgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStockRequest, stock_),
  };
  AddStockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddStockRequest_descriptor_,
      AddStockRequest::default_instance_,
      AddStockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddStockRequest));
  AddStockResponse_descriptor_ = file->message_type(4);
  static const int AddStockResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStockResponse, updatetime_),
  };
  AddStockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddStockResponse_descriptor_,
      AddStockResponse::default_instance_,
      AddStockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddStockResponse));
  UpdateStockRequest_descriptor_ = file->message_type(5);
  static const int UpdateStockRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStockRequest, custid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStockRequest, orgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStockRequest, stock_),
  };
  UpdateStockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateStockRequest_descriptor_,
      UpdateStockRequest::default_instance_,
      UpdateStockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateStockRequest));
  UpdateStockResponse_descriptor_ = file->message_type(6);
  static const int UpdateStockResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStockResponse, updatetime_),
  };
  UpdateStockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateStockResponse_descriptor_,
      UpdateStockResponse::default_instance_,
      UpdateStockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateStockResponse));
  QueryStockRequest_descriptor_ = file->message_type(7);
  static const int QueryStockRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStockRequest, custid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStockRequest, orgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStockRequest, synctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStockRequest, pooltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStockRequest, poolgroup_),
  };
  QueryStockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryStockRequest_descriptor_,
      QueryStockRequest::default_instance_,
      QueryStockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryStockRequest));
  QueryStockResponse_descriptor_ = file->message_type(8);
  static const int QueryStockResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStockResponse, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStockResponse, stock_),
  };
  QueryStockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryStockResponse_descriptor_,
      QueryStockResponse::default_instance_,
      QueryStockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryStockResponse));
  UpdatePoolRequest_descriptor_ = file->message_type(9);
  static const int UpdatePoolRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePoolRequest, custid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePoolRequest, orgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePoolRequest, pool_),
  };
  UpdatePoolRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdatePoolRequest_descriptor_,
      UpdatePoolRequest::default_instance_,
      UpdatePoolRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePoolRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePoolRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdatePoolRequest));
  UpdatePoolResponse_descriptor_ = file->message_type(10);
  static const int UpdatePoolResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePoolResponse, updatetime_),
  };
  UpdatePoolResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdatePoolResponse_descriptor_,
      UpdatePoolResponse::default_instance_,
      UpdatePoolResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePoolResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePoolResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdatePoolResponse));
  QueryPoolRequest_descriptor_ = file->message_type(11);
  static const int QueryPoolRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolRequest, custid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolRequest, orgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolRequest, synctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolRequest, pooltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolRequest, poolgroup_),
  };
  QueryPoolRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPoolRequest_descriptor_,
      QueryPoolRequest::default_instance_,
      QueryPoolRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPoolRequest));
  QueryPoolResponse_descriptor_ = file->message_type(12);
  static const int QueryPoolResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolResponse, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolResponse, pool_),
  };
  QueryPoolResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPoolResponse_descriptor_,
      QueryPoolResponse::default_instance_,
      QueryPoolResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPoolResponse));
  UpdatePoolTypeRequest_descriptor_ = file->message_type(13);
  static const int UpdatePoolTypeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePoolTypeRequest, pooltype_),
  };
  UpdatePoolTypeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdatePoolTypeRequest_descriptor_,
      UpdatePoolTypeRequest::default_instance_,
      UpdatePoolTypeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePoolTypeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePoolTypeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdatePoolTypeRequest));
  UpdatePoolTypeResponse_descriptor_ = file->message_type(14);
  static const int UpdatePoolTypeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePoolTypeResponse, updatetime_),
  };
  UpdatePoolTypeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdatePoolTypeResponse_descriptor_,
      UpdatePoolTypeResponse::default_instance_,
      UpdatePoolTypeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePoolTypeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePoolTypeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdatePoolTypeResponse));
  QueryPoolTypeRequest_descriptor_ = file->message_type(15);
  static const int QueryPoolTypeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolTypeRequest, synctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolTypeRequest, pooltype_),
  };
  QueryPoolTypeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPoolTypeRequest_descriptor_,
      QueryPoolTypeRequest::default_instance_,
      QueryPoolTypeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolTypeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolTypeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPoolTypeRequest));
  QueryPoolTypeResponse_descriptor_ = file->message_type(16);
  static const int QueryPoolTypeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolTypeResponse, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolTypeResponse, pooltype_),
  };
  QueryPoolTypeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPoolTypeResponse_descriptor_,
      QueryPoolTypeResponse::default_instance_,
      QueryPoolTypeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolTypeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPoolTypeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPoolTypeResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stockpool_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stock_descriptor_, &Stock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pool_descriptor_, &Pool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PoolType_descriptor_, &PoolType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddStockRequest_descriptor_, &AddStockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddStockResponse_descriptor_, &AddStockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateStockRequest_descriptor_, &UpdateStockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateStockResponse_descriptor_, &UpdateStockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryStockRequest_descriptor_, &QueryStockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryStockResponse_descriptor_, &QueryStockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdatePoolRequest_descriptor_, &UpdatePoolRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdatePoolResponse_descriptor_, &UpdatePoolResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPoolRequest_descriptor_, &QueryPoolRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPoolResponse_descriptor_, &QueryPoolResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdatePoolTypeRequest_descriptor_, &UpdatePoolTypeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdatePoolTypeResponse_descriptor_, &UpdatePoolTypeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPoolTypeRequest_descriptor_, &QueryPoolTypeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPoolTypeResponse_descriptor_, &QueryPoolTypeResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stockpool_2eproto() {
  delete Stock::default_instance_;
  delete Stock_reflection_;
  delete Pool::default_instance_;
  delete Pool_reflection_;
  delete PoolType::default_instance_;
  delete PoolType_reflection_;
  delete AddStockRequest::default_instance_;
  delete AddStockRequest_reflection_;
  delete AddStockResponse::default_instance_;
  delete AddStockResponse_reflection_;
  delete UpdateStockRequest::default_instance_;
  delete UpdateStockRequest_reflection_;
  delete UpdateStockResponse::default_instance_;
  delete UpdateStockResponse_reflection_;
  delete QueryStockRequest::default_instance_;
  delete QueryStockRequest_reflection_;
  delete QueryStockResponse::default_instance_;
  delete QueryStockResponse_reflection_;
  delete UpdatePoolRequest::default_instance_;
  delete UpdatePoolRequest_reflection_;
  delete UpdatePoolResponse::default_instance_;
  delete UpdatePoolResponse_reflection_;
  delete QueryPoolRequest::default_instance_;
  delete QueryPoolRequest_reflection_;
  delete QueryPoolResponse::default_instance_;
  delete QueryPoolResponse_reflection_;
  delete UpdatePoolTypeRequest::default_instance_;
  delete UpdatePoolTypeRequest_reflection_;
  delete UpdatePoolTypeResponse::default_instance_;
  delete UpdatePoolTypeResponse_reflection_;
  delete QueryPoolTypeRequest::default_instance_;
  delete QueryPoolTypeRequest_reflection_;
  delete QueryPoolTypeResponse::default_instance_;
  delete QueryPoolTypeResponse_reflection_;
}

void protobuf_AddDesc_stockpool_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017stockpool.proto\022\005quote\"o\n\005Stock\022\020\n\010sec"
    "ucode\030\001 \002(\t\022\020\n\010exchange\030\002 \002(\005\022\016\n\006remove\030"
    "\003 \001(\010\022\020\n\010pooltype\030\004 \002(\005\022\021\n\tpoolgroup\030\005 \002"
    "(\005\022\r\n\005seqno\030\006 \001(\005\"\\\n\004Pool\022\020\n\010poolname\030\001 "
    "\001(\t\022\020\n\010pooltype\030\002 \002(\005\022\021\n\tpoolgroup\030\003 \002(\005"
    "\022\016\n\006remove\030\004 \001(\010\022\r\n\005seqno\030\005 \001(\005\"I\n\010PoolT"
    "ype\022\020\n\010pooltype\030\001 \002(\005\022\014\n\004name\030\002 \001(\t\022\016\n\006r"
    "emove\030\003 \001(\010\022\r\n\005seqno\030\004 \001(\005\"M\n\017AddStockRe"
    "quest\022\016\n\006custid\030\001 \002(\t\022\r\n\005orgid\030\002 \002(\t\022\033\n\005"
    "stock\030\003 \003(\0132\014.quote.Stock\"&\n\020AddStockRes"
    "ponse\022\022\n\nupdatetime\030\001 \002(\t\"P\n\022UpdateStock"
    "Request\022\016\n\006custid\030\001 \002(\t\022\r\n\005orgid\030\002 \002(\t\022\033"
    "\n\005stock\030\003 \003(\0132\014.quote.Stock\")\n\023UpdateSto"
    "ckResponse\022\022\n\nupdatetime\030\001 \002(\t\"i\n\021QueryS"
    "tockRequest\022\016\n\006custid\030\001 \002(\t\022\r\n\005orgid\030\002 \002"
    "(\t\022\020\n\010synctime\030\003 \001(\t\022\020\n\010pooltype\030\004 \001(\005\022\021"
    "\n\tpoolgroup\030\005 \001(\005\"E\n\022QueryStockResponse\022"
    "\022\n\nservertime\030\001 \002(\t\022\033\n\005stock\030\002 \003(\0132\014.quo"
    "te.Stock\"M\n\021UpdatePoolRequest\022\016\n\006custid\030"
    "\001 \002(\t\022\r\n\005orgid\030\002 \002(\t\022\031\n\004pool\030\003 \003(\0132\013.quo"
    "te.Pool\"(\n\022UpdatePoolResponse\022\022\n\nupdatet"
    "ime\030\001 \002(\t\"h\n\020QueryPoolRequest\022\016\n\006custid\030"
    "\001 \002(\t\022\r\n\005orgid\030\002 \002(\t\022\020\n\010synctime\030\003 \001(\t\022\020"
    "\n\010pooltype\030\004 \001(\005\022\021\n\tpoolgroup\030\005 \001(\005\"B\n\021Q"
    "ueryPoolResponse\022\022\n\nservertime\030\001 \002(\t\022\031\n\004"
    "pool\030\002 \003(\0132\013.quote.Pool\":\n\025UpdatePoolTyp"
    "eRequest\022!\n\010pooltype\030\001 \003(\0132\017.quote.PoolT"
    "ype\",\n\026UpdatePoolTypeResponse\022\022\n\nupdatet"
    "ime\030\001 \002(\t\":\n\024QueryPoolTypeRequest\022\020\n\010syn"
    "ctime\030\001 \001(\t\022\020\n\010pooltype\030\002 \001(\005\"N\n\025QueryPo"
    "olTypeResponse\022\022\n\nservertime\030\001 \002(\t\022!\n\010po"
    "oltype\030\002 \003(\0132\017.quote.PoolType", 1269);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stockpool.proto", &protobuf_RegisterTypes);
  Stock::default_instance_ = new Stock();
  Pool::default_instance_ = new Pool();
  PoolType::default_instance_ = new PoolType();
  AddStockRequest::default_instance_ = new AddStockRequest();
  AddStockResponse::default_instance_ = new AddStockResponse();
  UpdateStockRequest::default_instance_ = new UpdateStockRequest();
  UpdateStockResponse::default_instance_ = new UpdateStockResponse();
  QueryStockRequest::default_instance_ = new QueryStockRequest();
  QueryStockResponse::default_instance_ = new QueryStockResponse();
  UpdatePoolRequest::default_instance_ = new UpdatePoolRequest();
  UpdatePoolResponse::default_instance_ = new UpdatePoolResponse();
  QueryPoolRequest::default_instance_ = new QueryPoolRequest();
  QueryPoolResponse::default_instance_ = new QueryPoolResponse();
  UpdatePoolTypeRequest::default_instance_ = new UpdatePoolTypeRequest();
  UpdatePoolTypeResponse::default_instance_ = new UpdatePoolTypeResponse();
  QueryPoolTypeRequest::default_instance_ = new QueryPoolTypeRequest();
  QueryPoolTypeResponse::default_instance_ = new QueryPoolTypeResponse();
  Stock::default_instance_->InitAsDefaultInstance();
  Pool::default_instance_->InitAsDefaultInstance();
  PoolType::default_instance_->InitAsDefaultInstance();
  AddStockRequest::default_instance_->InitAsDefaultInstance();
  AddStockResponse::default_instance_->InitAsDefaultInstance();
  UpdateStockRequest::default_instance_->InitAsDefaultInstance();
  UpdateStockResponse::default_instance_->InitAsDefaultInstance();
  QueryStockRequest::default_instance_->InitAsDefaultInstance();
  QueryStockResponse::default_instance_->InitAsDefaultInstance();
  UpdatePoolRequest::default_instance_->InitAsDefaultInstance();
  UpdatePoolResponse::default_instance_->InitAsDefaultInstance();
  QueryPoolRequest::default_instance_->InitAsDefaultInstance();
  QueryPoolResponse::default_instance_->InitAsDefaultInstance();
  UpdatePoolTypeRequest::default_instance_->InitAsDefaultInstance();
  UpdatePoolTypeResponse::default_instance_->InitAsDefaultInstance();
  QueryPoolTypeRequest::default_instance_->InitAsDefaultInstance();
  QueryPoolTypeResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stockpool_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stockpool_2eproto {
  StaticDescriptorInitializer_stockpool_2eproto() {
    protobuf_AddDesc_stockpool_2eproto();
  }
} static_descriptor_initializer_stockpool_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Stock::kSecucodeFieldNumber;
const int Stock::kExchangeFieldNumber;
const int Stock::kRemoveFieldNumber;
const int Stock::kPooltypeFieldNumber;
const int Stock::kPoolgroupFieldNumber;
const int Stock::kSeqnoFieldNumber;
#endif  // !_MSC_VER

Stock::Stock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stock::InitAsDefaultInstance() {
}

Stock::Stock(const Stock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stock::SharedCtor() {
  _cached_size_ = 0;
  secucode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchange_ = 0;
  remove_ = false;
  pooltype_ = 0;
  poolgroup_ = 0;
  seqno_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stock::~Stock() {
  SharedDtor();
}

void Stock::SharedDtor() {
  if (secucode_ != &::google::protobuf::internal::kEmptyString) {
    delete secucode_;
  }
  if (this != default_instance_) {
  }
}

void Stock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stock_descriptor_;
}

const Stock& Stock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpool_2eproto();  return *default_instance_;
}

Stock* Stock::default_instance_ = NULL;

Stock* Stock::New() const {
  return new Stock;
}

void Stock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_secucode()) {
      if (secucode_ != &::google::protobuf::internal::kEmptyString) {
        secucode_->clear();
      }
    }
    exchange_ = 0;
    remove_ = false;
    pooltype_ = 0;
    poolgroup_ = 0;
    seqno_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string secucode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secucode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secucode().data(), this->secucode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exchange;
        break;
      }
      
      // required int32 exchange = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remove;
        break;
      }
      
      // optional bool remove = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_)));
          set_has_remove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pooltype;
        break;
      }
      
      // required int32 pooltype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pooltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pooltype_)));
          set_has_pooltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_poolgroup;
        break;
      }
      
      // required int32 poolgroup = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poolgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poolgroup_)));
          set_has_poolgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_seqno;
        break;
      }
      
      // optional int32 seqno = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string secucode = 1;
  if (has_secucode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secucode().data(), this->secucode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->secucode(), output);
  }
  
  // required int32 exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exchange(), output);
  }
  
  // optional bool remove = 3;
  if (has_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->remove(), output);
  }
  
  // required int32 pooltype = 4;
  if (has_pooltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pooltype(), output);
  }
  
  // required int32 poolgroup = 5;
  if (has_poolgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->poolgroup(), output);
  }
  
  // optional int32 seqno = 6;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seqno(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string secucode = 1;
  if (has_secucode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secucode().data(), this->secucode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->secucode(), target);
  }
  
  // required int32 exchange = 2;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exchange(), target);
  }
  
  // optional bool remove = 3;
  if (has_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->remove(), target);
  }
  
  // required int32 pooltype = 4;
  if (has_pooltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pooltype(), target);
  }
  
  // required int32 poolgroup = 5;
  if (has_poolgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->poolgroup(), target);
  }
  
  // optional int32 seqno = 6;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seqno(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string secucode = 1;
    if (has_secucode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secucode());
    }
    
    // required int32 exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange());
    }
    
    // optional bool remove = 3;
    if (has_remove()) {
      total_size += 1 + 1;
    }
    
    // required int32 pooltype = 4;
    if (has_pooltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pooltype());
    }
    
    // required int32 poolgroup = 5;
    if (has_poolgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poolgroup());
    }
    
    // optional int32 seqno = 6;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqno());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stock::MergeFrom(const Stock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secucode()) {
      set_secucode(from.secucode());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_remove()) {
      set_remove(from.remove());
    }
    if (from.has_pooltype()) {
      set_pooltype(from.pooltype());
    }
    if (from.has_poolgroup()) {
      set_poolgroup(from.poolgroup());
    }
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stock::CopyFrom(const Stock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stock::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  
  return true;
}

void Stock::Swap(Stock* other) {
  if (other != this) {
    std::swap(secucode_, other->secucode_);
    std::swap(exchange_, other->exchange_);
    std::swap(remove_, other->remove_);
    std::swap(pooltype_, other->pooltype_);
    std::swap(poolgroup_, other->poolgroup_);
    std::swap(seqno_, other->seqno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stock_descriptor_;
  metadata.reflection = Stock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pool::kPoolnameFieldNumber;
const int Pool::kPooltypeFieldNumber;
const int Pool::kPoolgroupFieldNumber;
const int Pool::kRemoveFieldNumber;
const int Pool::kSeqnoFieldNumber;
#endif  // !_MSC_VER

Pool::Pool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pool::InitAsDefaultInstance() {
}

Pool::Pool(const Pool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pool::SharedCtor() {
  _cached_size_ = 0;
  poolname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pooltype_ = 0;
  poolgroup_ = 0;
  remove_ = false;
  seqno_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pool::~Pool() {
  SharedDtor();
}

void Pool::SharedDtor() {
  if (poolname_ != &::google::protobuf::internal::kEmptyString) {
    delete poolname_;
  }
  if (this != default_instance_) {
  }
}

void Pool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pool_descriptor_;
}

const Pool& Pool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpool_2eproto();  return *default_instance_;
}

Pool* Pool::default_instance_ = NULL;

Pool* Pool::New() const {
  return new Pool;
}

void Pool::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_poolname()) {
      if (poolname_ != &::google::protobuf::internal::kEmptyString) {
        poolname_->clear();
      }
    }
    pooltype_ = 0;
    poolgroup_ = 0;
    remove_ = false;
    seqno_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string poolname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poolname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poolname().data(), this->poolname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pooltype;
        break;
      }
      
      // required int32 pooltype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pooltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pooltype_)));
          set_has_pooltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_poolgroup;
        break;
      }
      
      // required int32 poolgroup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poolgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poolgroup_)));
          set_has_poolgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remove;
        break;
      }
      
      // optional bool remove = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_)));
          set_has_remove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seqno;
        break;
      }
      
      // optional int32 seqno = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string poolname = 1;
  if (has_poolname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poolname().data(), this->poolname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->poolname(), output);
  }
  
  // required int32 pooltype = 2;
  if (has_pooltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pooltype(), output);
  }
  
  // required int32 poolgroup = 3;
  if (has_poolgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->poolgroup(), output);
  }
  
  // optional bool remove = 4;
  if (has_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->remove(), output);
  }
  
  // optional int32 seqno = 5;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seqno(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string poolname = 1;
  if (has_poolname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poolname().data(), this->poolname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->poolname(), target);
  }
  
  // required int32 pooltype = 2;
  if (has_pooltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pooltype(), target);
  }
  
  // required int32 poolgroup = 3;
  if (has_poolgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->poolgroup(), target);
  }
  
  // optional bool remove = 4;
  if (has_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->remove(), target);
  }
  
  // optional int32 seqno = 5;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seqno(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pool::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string poolname = 1;
    if (has_poolname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poolname());
    }
    
    // required int32 pooltype = 2;
    if (has_pooltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pooltype());
    }
    
    // required int32 poolgroup = 3;
    if (has_poolgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poolgroup());
    }
    
    // optional bool remove = 4;
    if (has_remove()) {
      total_size += 1 + 1;
    }
    
    // optional int32 seqno = 5;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqno());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pool::MergeFrom(const Pool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poolname()) {
      set_poolname(from.poolname());
    }
    if (from.has_pooltype()) {
      set_pooltype(from.pooltype());
    }
    if (from.has_poolgroup()) {
      set_poolgroup(from.poolgroup());
    }
    if (from.has_remove()) {
      set_remove(from.remove());
    }
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pool::CopyFrom(const Pool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pool::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void Pool::Swap(Pool* other) {
  if (other != this) {
    std::swap(poolname_, other->poolname_);
    std::swap(pooltype_, other->pooltype_);
    std::swap(poolgroup_, other->poolgroup_);
    std::swap(remove_, other->remove_);
    std::swap(seqno_, other->seqno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pool_descriptor_;
  metadata.reflection = Pool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PoolType::kPooltypeFieldNumber;
const int PoolType::kNameFieldNumber;
const int PoolType::kRemoveFieldNumber;
const int PoolType::kSeqnoFieldNumber;
#endif  // !_MSC_VER

PoolType::PoolType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PoolType::InitAsDefaultInstance() {
}

PoolType::PoolType(const PoolType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PoolType::SharedCtor() {
  _cached_size_ = 0;
  pooltype_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remove_ = false;
  seqno_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoolType::~PoolType() {
  SharedDtor();
}

void PoolType::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PoolType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolType_descriptor_;
}

const PoolType& PoolType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpool_2eproto();  return *default_instance_;
}

PoolType* PoolType::default_instance_ = NULL;

PoolType* PoolType::New() const {
  return new PoolType;
}

void PoolType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pooltype_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    remove_ = false;
    seqno_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PoolType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pooltype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pooltype_)));
          set_has_pooltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remove;
        break;
      }
      
      // optional bool remove = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_)));
          set_has_remove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seqno;
        break;
      }
      
      // optional int32 seqno = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seqno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PoolType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pooltype = 1;
  if (has_pooltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pooltype(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional bool remove = 3;
  if (has_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->remove(), output);
  }
  
  // optional int32 seqno = 4;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seqno(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PoolType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pooltype = 1;
  if (has_pooltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pooltype(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional bool remove = 3;
  if (has_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->remove(), target);
  }
  
  // optional int32 seqno = 4;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seqno(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PoolType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pooltype = 1;
    if (has_pooltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pooltype());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional bool remove = 3;
    if (has_remove()) {
      total_size += 1 + 1;
    }
    
    // optional int32 seqno = 4;
    if (has_seqno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seqno());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PoolType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PoolType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PoolType::MergeFrom(const PoolType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pooltype()) {
      set_pooltype(from.pooltype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_remove()) {
      set_remove(from.remove());
    }
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PoolType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolType::CopyFrom(const PoolType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PoolType::Swap(PoolType* other) {
  if (other != this) {
    std::swap(pooltype_, other->pooltype_);
    std::swap(name_, other->name_);
    std::swap(remove_, other->remove_);
    std::swap(seqno_, other->seqno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PoolType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoolType_descriptor_;
  metadata.reflection = PoolType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddStockRequest::kCustidFieldNumber;
const int AddStockRequest::kOrgidFieldNumber;
const int AddStockRequest::kStockFieldNumber;
#endif  // !_MSC_VER

AddStockRequest::AddStockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddStockRequest::InitAsDefaultInstance() {
}

AddStockRequest::AddStockRequest(const AddStockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddStockRequest::SharedCtor() {
  _cached_size_ = 0;
  custid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddStockRequest::~AddStockRequest() {
  SharedDtor();
}

void AddStockRequest::SharedDtor() {
  if (custid_ != &::google::protobuf::internal::kEmptyString) {
    delete custid_;
  }
  if (orgid_ != &::google::protobuf::internal::kEmptyString) {
    delete orgid_;
  }
  if (this != default_instance_) {
  }
}

void AddStockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddStockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddStockRequest_descriptor_;
}

const AddStockRequest& AddStockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpool_2eproto();  return *default_instance_;
}

AddStockRequest* AddStockRequest::default_instance_ = NULL;

AddStockRequest* AddStockRequest::New() const {
  return new AddStockRequest;
}

void AddStockRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_custid()) {
      if (custid_ != &::google::protobuf::internal::kEmptyString) {
        custid_->clear();
      }
    }
    if (has_orgid()) {
      if (orgid_ != &::google::protobuf::internal::kEmptyString) {
        orgid_->clear();
      }
    }
  }
  stock_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddStockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string custid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custid().data(), this->custid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orgid;
        break;
      }
      
      // required string orgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orgid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orgid().data(), this->orgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stock;
        break;
      }
      
      // repeated .quote.Stock stock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stock;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddStockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string custid = 1;
  if (has_custid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custid().data(), this->custid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->custid(), output);
  }
  
  // required string orgid = 2;
  if (has_orgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orgid().data(), this->orgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->orgid(), output);
  }
  
  // repeated .quote.Stock stock = 3;
  for (int i = 0; i < this->stock_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stock(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddStockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string custid = 1;
  if (has_custid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custid().data(), this->custid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->custid(), target);
  }
  
  // required string orgid = 2;
  if (has_orgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orgid().data(), this->orgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orgid(), target);
  }
  
  // repeated .quote.Stock stock = 3;
  for (int i = 0; i < this->stock_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stock(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddStockRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string custid = 1;
    if (has_custid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custid());
    }
    
    // required string orgid = 2;
    if (has_orgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orgid());
    }
    
  }
  // repeated .quote.Stock stock = 3;
  total_size += 1 * this->stock_size();
  for (int i = 0; i < this->stock_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stock(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddStockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddStockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddStockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddStockRequest::MergeFrom(const AddStockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  stock_.MergeFrom(from.stock_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_custid()) {
      set_custid(from.custid());
    }
    if (from.has_orgid()) {
      set_orgid(from.orgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddStockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddStockRequest::CopyFrom(const AddStockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddStockRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < stock_size(); i++) {
    if (!this->stock(i).IsInitialized()) return false;
  }
  return true;
}

void AddStockRequest::Swap(AddStockRequest* other) {
  if (other != this) {
    std::swap(custid_, other->custid_);
    std::swap(orgid_, other->orgid_);
    stock_.Swap(&other->stock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddStockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddStockRequest_descriptor_;
  metadata.reflection = AddStockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddStockResponse::kUpdatetimeFieldNumber;
#endif  // !_MSC_VER

AddStockResponse::AddStockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddStockResponse::InitAsDefaultInstance() {
}

AddStockResponse::AddStockResponse(const AddStockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddStockResponse::SharedCtor() {
  _cached_size_ = 0;
  updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddStockResponse::~AddStockResponse() {
  SharedDtor();
}

void AddStockResponse::SharedDtor() {
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updatetime_;
  }
  if (this != default_instance_) {
  }
}

void AddStockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddStockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddStockResponse_descriptor_;
}

const AddStockResponse& AddStockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpool_2eproto();  return *default_instance_;
}

AddStockResponse* AddStockResponse::default_instance_ = NULL;

AddStockResponse* AddStockResponse::New() const {
  return new AddStockResponse;
}

void AddStockResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_updatetime()) {
      if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
        updatetime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddStockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string updatetime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatetime().data(), this->updatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddStockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string updatetime = 1;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->updatetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddStockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string updatetime = 1;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->updatetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddStockResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string updatetime = 1;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddStockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddStockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddStockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddStockResponse::MergeFrom(const AddStockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddStockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddStockResponse::CopyFrom(const AddStockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddStockResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AddStockResponse::Swap(AddStockResponse* other) {
  if (other != this) {
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddStockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddStockResponse_descriptor_;
  metadata.reflection = AddStockResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateStockRequest::kCustidFieldNumber;
const int UpdateStockRequest::kOrgidFieldNumber;
const int UpdateStockRequest::kStockFieldNumber;
#endif  // !_MSC_VER

UpdateStockRequest::UpdateStockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateStockRequest::InitAsDefaultInstance() {
}

UpdateStockRequest::UpdateStockRequest(const UpdateStockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateStockRequest::SharedCtor() {
  _cached_size_ = 0;
  custid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateStockRequest::~UpdateStockRequest() {
  SharedDtor();
}

void UpdateStockRequest::SharedDtor() {
  if (custid_ != &::google::protobuf::internal::kEmptyString) {
    delete custid_;
  }
  if (orgid_ != &::google::protobuf::internal::kEmptyString) {
    delete orgid_;
  }
  if (this != default_instance_) {
  }
}

void UpdateStockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateStockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateStockRequest_descriptor_;
}

const UpdateStockRequest& UpdateStockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpool_2eproto();  return *default_instance_;
}

UpdateStockRequest* UpdateStockRequest::default_instance_ = NULL;

UpdateStockRequest* UpdateStockRequest::New() const {
  return new UpdateStockRequest;
}

void UpdateStockRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_custid()) {
      if (custid_ != &::google::protobuf::internal::kEmptyString) {
        custid_->clear();
      }
    }
    if (has_orgid()) {
      if (orgid_ != &::google::protobuf::internal::kEmptyString) {
        orgid_->clear();
      }
    }
  }
  stock_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateStockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string custid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custid().data(), this->custid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orgid;
        break;
      }
      
      // required string orgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orgid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orgid().data(), this->orgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stock;
        break;
      }
      
      // repeated .quote.Stock stock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stock;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateStockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string custid = 1;
  if (has_custid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custid().data(), this->custid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->custid(), output);
  }
  
  // required string orgid = 2;
  if (has_orgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orgid().data(), this->orgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->orgid(), output);
  }
  
  // repeated .quote.Stock stock = 3;
  for (int i = 0; i < this->stock_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stock(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateStockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string custid = 1;
  if (has_custid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custid().data(), this->custid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->custid(), target);
  }
  
  // required string orgid = 2;
  if (has_orgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orgid().data(), this->orgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orgid(), target);
  }
  
  // repeated .quote.Stock stock = 3;
  for (int i = 0; i < this->stock_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stock(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateStockRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string custid = 1;
    if (has_custid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custid());
    }
    
    // required string orgid = 2;
    if (has_orgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orgid());
    }
    
  }
  // repeated .quote.Stock stock = 3;
  total_size += 1 * this->stock_size();
  for (int i = 0; i < this->stock_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stock(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateStockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateStockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateStockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateStockRequest::MergeFrom(const UpdateStockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  stock_.MergeFrom(from.stock_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_custid()) {
      set_custid(from.custid());
    }
    if (from.has_orgid()) {
      set_orgid(from.orgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateStockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateStockRequest::CopyFrom(const UpdateStockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateStockRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < stock_size(); i++) {
    if (!this->stock(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateStockRequest::Swap(UpdateStockRequest* other) {
  if (other != this) {
    std::swap(custid_, other->custid_);
    std::swap(orgid_, other->orgid_);
    stock_.Swap(&other->stock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateStockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateStockRequest_descriptor_;
  metadata.reflection = UpdateStockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateStockResponse::kUpdatetimeFieldNumber;
#endif  // !_MSC_VER

UpdateStockResponse::UpdateStockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateStockResponse::InitAsDefaultInstance() {
}

UpdateStockResponse::UpdateStockResponse(const UpdateStockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateStockResponse::SharedCtor() {
  _cached_size_ = 0;
  updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateStockResponse::~UpdateStockResponse() {
  SharedDtor();
}

void UpdateStockResponse::SharedDtor() {
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updatetime_;
  }
  if (this != default_instance_) {
  }
}

void UpdateStockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateStockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateStockResponse_descriptor_;
}

const UpdateStockResponse& UpdateStockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpool_2eproto();  return *default_instance_;
}

UpdateStockResponse* UpdateStockResponse::default_instance_ = NULL;

UpdateStockResponse* UpdateStockResponse::New() const {
  return new UpdateStockResponse;
}

void UpdateStockResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_updatetime()) {
      if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
        updatetime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateStockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string updatetime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatetime().data(), this->updatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateStockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string updatetime = 1;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->updatetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateStockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string updatetime = 1;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->updatetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateStockResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string updatetime = 1;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateStockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateStockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateStockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateStockResponse::MergeFrom(const UpdateStockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateStockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateStockResponse::CopyFrom(const UpdateStockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateStockResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UpdateStockResponse::Swap(UpdateStockResponse* other) {
  if (other != this) {
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateStockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateStockResponse_descriptor_;
  metadata.reflection = UpdateStockResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryStockRequest::kCustidFieldNumber;
const int QueryStockRequest::kOrgidFieldNumber;
const int QueryStockRequest::kSynctimeFieldNumber;
const int QueryStockRequest::kPooltypeFieldNumber;
const int QueryStockRequest::kPoolgroupFieldNumber;
#endif  // !_MSC_VER

QueryStockRequest::QueryStockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryStockRequest::InitAsDefaultInstance() {
}

QueryStockRequest::QueryStockRequest(const QueryStockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryStockRequest::SharedCtor() {
  _cached_size_ = 0;
  custid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  synctime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pooltype_ = 0;
  poolgroup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryStockRequest::~QueryStockRequest() {
  SharedDtor();
}

void QueryStockRequest::SharedDtor() {
  if (custid_ != &::google::protobuf::internal::kEmptyString) {
    delete custid_;
  }
  if (orgid_ != &::google::protobuf::internal::kEmptyString) {
    delete orgid_;
  }
  if (synctime_ != &::google::protobuf::internal::kEmptyString) {
    delete synctime_;
  }
  if (this != default_instance_) {
  }
}

void QueryStockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryStockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryStockRequest_descriptor_;
}

const QueryStockRequest& QueryStockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpool_2eproto();  return *default_instance_;
}

QueryStockRequest* QueryStockRequest::default_instance_ = NULL;

QueryStockRequest* QueryStockRequest::New() const {
  return new QueryStockRequest;
}

void QueryStockRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_custid()) {
      if (custid_ != &::google::protobuf::internal::kEmptyString) {
        custid_->clear();
      }
    }
    if (has_orgid()) {
      if (orgid_ != &::google::protobuf::internal::kEmptyString) {
        orgid_->clear();
      }
    }
    if (has_synctime()) {
      if (synctime_ != &::google::protobuf::internal::kEmptyString) {
        synctime_->clear();
      }
    }
    pooltype_ = 0;
    poolgroup_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryStockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string custid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custid().data(), this->custid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orgid;
        break;
      }
      
      // required string orgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orgid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orgid().data(), this->orgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_synctime;
        break;
      }
      
      // optional string synctime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_synctime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_synctime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->synctime().data(), this->synctime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pooltype;
        break;
      }
      
      // optional int32 pooltype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pooltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pooltype_)));
          set_has_pooltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_poolgroup;
        break;
      }
      
      // optional int32 poolgroup = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poolgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poolgroup_)));
          set_has_poolgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryStockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string custid = 1;
  if (has_custid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custid().data(), this->custid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->custid(), output);
  }
  
  // required string orgid = 2;
  if (has_orgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orgid().data(), this->orgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->orgid(), output);
  }
  
  // optional string synctime = 3;
  if (has_synctime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->synctime().data(), this->synctime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->synctime(), output);
  }
  
  // optional int32 pooltype = 4;
  if (has_pooltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pooltype(), output);
  }
  
  // optional int32 poolgroup = 5;
  if (has_poolgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->poolgroup(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryStockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string custid = 1;
  if (has_custid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custid().data(), this->custid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->custid(), target);
  }
  
  // required string orgid = 2;
  if (has_orgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orgid().data(), this->orgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orgid(), target);
  }
  
  // optional string synctime = 3;
  if (has_synctime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->synctime().data(), this->synctime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->synctime(), target);
  }
  
  // optional int32 pooltype = 4;
  if (has_pooltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pooltype(), target);
  }
  
  // optional int32 poolgroup = 5;
  if (has_poolgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->poolgroup(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryStockRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string custid = 1;
    if (has_custid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custid());
    }
    
    // required string orgid = 2;
    if (has_orgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orgid());
    }
    
    // optional string synctime = 3;
    if (has_synctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->synctime());
    }
    
    // optional int32 pooltype = 4;
    if (has_pooltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pooltype());
    }
    
    // optional int32 poolgroup = 5;
    if (has_poolgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poolgroup());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryStockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryStockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryStockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryStockRequest::MergeFrom(const QueryStockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_custid()) {
      set_custid(from.custid());
    }
    if (from.has_orgid()) {
      set_orgid(from.orgid());
    }
    if (from.has_synctime()) {
      set_synctime(from.synctime());
    }
    if (from.has_pooltype()) {
      set_pooltype(from.pooltype());
    }
    if (from.has_poolgroup()) {
      set_poolgroup(from.poolgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryStockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryStockRequest::CopyFrom(const QueryStockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryStockRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void QueryStockRequest::Swap(QueryStockRequest* other) {
  if (other != this) {
    std::swap(custid_, other->custid_);
    std::swap(orgid_, other->orgid_);
    std::swap(synctime_, other->synctime_);
    std::swap(pooltype_, other->pooltype_);
    std::swap(poolgroup_, other->poolgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryStockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryStockRequest_descriptor_;
  metadata.reflection = QueryStockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryStockResponse::kServertimeFieldNumber;
const int QueryStockResponse::kStockFieldNumber;
#endif  // !_MSC_VER

QueryStockResponse::QueryStockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryStockResponse::InitAsDefaultInstance() {
}

QueryStockResponse::QueryStockResponse(const QueryStockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryStockResponse::SharedCtor() {
  _cached_size_ = 0;
  servertime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryStockResponse::~QueryStockResponse() {
  SharedDtor();
}

void QueryStockResponse::SharedDtor() {
  if (servertime_ != &::google::protobuf::internal::kEmptyString) {
    delete servertime_;
  }
  if (this != default_instance_) {
  }
}

void QueryStockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryStockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryStockResponse_descriptor_;
}

const QueryStockResponse& QueryStockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpool_2eproto();  return *default_instance_;
}

QueryStockResponse* QueryStockResponse::default_instance_ = NULL;

QueryStockResponse* QueryStockResponse::New() const {
  return new QueryStockResponse;
}

void QueryStockResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_servertime()) {
      if (servertime_ != &::google::protobuf::internal::kEmptyString) {
        servertime_->clear();
      }
    }
  }
  stock_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryStockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string servertime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servertime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servertime().data(), this->servertime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stock;
        break;
      }
      
      // repeated .quote.Stock stock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stock;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryStockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string servertime = 1;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servertime().data(), this->servertime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->servertime(), output);
  }
  
  // repeated .quote.Stock stock = 2;
  for (int i = 0; i < this->stock_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stock(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryStockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string servertime = 1;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servertime().data(), this->servertime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servertime(), target);
  }
  
  // repeated .quote.Stock stock = 2;
  for (int i = 0; i < this->stock_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stock(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryStockResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string servertime = 1;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servertime());
    }
    
  }
  // repeated .quote.Stock stock = 2;
  total_size += 1 * this->stock_size();
  for (int i = 0; i < this->stock_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stock(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryStockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryStockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryStockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryStockResponse::MergeFrom(const QueryStockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stock_.MergeFrom(from.stock_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryStockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryStockResponse::CopyFrom(const QueryStockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryStockResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < stock_size(); i++) {
    if (!this->stock(i).IsInitialized()) return false;
  }
  return true;
}

void QueryStockResponse::Swap(QueryStockResponse* other) {
  if (other != this) {
    std::swap(servertime_, other->servertime_);
    stock_.Swap(&other->stock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryStockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryStockResponse_descriptor_;
  metadata.reflection = QueryStockResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdatePoolRequest::kCustidFieldNumber;
const int UpdatePoolRequest::kOrgidFieldNumber;
const int UpdatePoolRequest::kPoolFieldNumber;
#endif  // !_MSC_VER

UpdatePoolRequest::UpdatePoolRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdatePoolRequest::InitAsDefaultInstance() {
}

UpdatePoolRequest::UpdatePoolRequest(const UpdatePoolRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdatePoolRequest::SharedCtor() {
  _cached_size_ = 0;
  custid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdatePoolRequest::~UpdatePoolRequest() {
  SharedDtor();
}

void UpdatePoolRequest::SharedDtor() {
  if (custid_ != &::google::protobuf::internal::kEmptyString) {
    delete custid_;
  }
  if (orgid_ != &::google::protobuf::internal::kEmptyString) {
    delete orgid_;
  }
  if (this != default_instance_) {
  }
}

void UpdatePoolRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePoolRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePoolRequest_descriptor_;
}

const UpdatePoolRequest& UpdatePoolRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpool_2eproto();  return *default_instance_;
}

UpdatePoolRequest* UpdatePoolRequest::default_instance_ = NULL;

UpdatePoolRequest* UpdatePoolRequest::New() const {
  return new UpdatePoolRequest;
}

void UpdatePoolRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_custid()) {
      if (custid_ != &::google::protobuf::internal::kEmptyString) {
        custid_->clear();
      }
    }
    if (has_orgid()) {
      if (orgid_ != &::google::protobuf::internal::kEmptyString) {
        orgid_->clear();
      }
    }
  }
  pool_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdatePoolRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string custid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custid().data(), this->custid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orgid;
        break;
      }
      
      // required string orgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orgid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orgid().data(), this->orgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pool;
        break;
      }
      
      // repeated .quote.Pool pool = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pool()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pool;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdatePoolRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string custid = 1;
  if (has_custid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custid().data(), this->custid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->custid(), output);
  }
  
  // required string orgid = 2;
  if (has_orgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orgid().data(), this->orgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->orgid(), output);
  }
  
  // repeated .quote.Pool pool = 3;
  for (int i = 0; i < this->pool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pool(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdatePoolRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string custid = 1;
  if (has_custid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custid().data(), this->custid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->custid(), target);
  }
  
  // required string orgid = 2;
  if (has_orgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orgid().data(), this->orgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orgid(), target);
  }
  
  // repeated .quote.Pool pool = 3;
  for (int i = 0; i < this->pool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pool(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdatePoolRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string custid = 1;
    if (has_custid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custid());
    }
    
    // required string orgid = 2;
    if (has_orgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orgid());
    }
    
  }
  // repeated .quote.Pool pool = 3;
  total_size += 1 * this->pool_size();
  for (int i = 0; i < this->pool_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pool(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePoolRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdatePoolRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdatePoolRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdatePoolRequest::MergeFrom(const UpdatePoolRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  pool_.MergeFrom(from.pool_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_custid()) {
      set_custid(from.custid());
    }
    if (from.has_orgid()) {
      set_orgid(from.orgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdatePoolRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePoolRequest::CopyFrom(const UpdatePoolRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePoolRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < pool_size(); i++) {
    if (!this->pool(i).IsInitialized()) return false;
  }
  return true;
}

void UpdatePoolRequest::Swap(UpdatePoolRequest* other) {
  if (other != this) {
    std::swap(custid_, other->custid_);
    std::swap(orgid_, other->orgid_);
    pool_.Swap(&other->pool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdatePoolRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePoolRequest_descriptor_;
  metadata.reflection = UpdatePoolRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdatePoolResponse::kUpdatetimeFieldNumber;
#endif  // !_MSC_VER

UpdatePoolResponse::UpdatePoolResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdatePoolResponse::InitAsDefaultInstance() {
}

UpdatePoolResponse::UpdatePoolResponse(const UpdatePoolResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdatePoolResponse::SharedCtor() {
  _cached_size_ = 0;
  updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdatePoolResponse::~UpdatePoolResponse() {
  SharedDtor();
}

void UpdatePoolResponse::SharedDtor() {
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updatetime_;
  }
  if (this != default_instance_) {
  }
}

void UpdatePoolResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePoolResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePoolResponse_descriptor_;
}

const UpdatePoolResponse& UpdatePoolResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpool_2eproto();  return *default_instance_;
}

UpdatePoolResponse* UpdatePoolResponse::default_instance_ = NULL;

UpdatePoolResponse* UpdatePoolResponse::New() const {
  return new UpdatePoolResponse;
}

void UpdatePoolResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_updatetime()) {
      if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
        updatetime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdatePoolResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string updatetime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatetime().data(), this->updatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdatePoolResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string updatetime = 1;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->updatetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdatePoolResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string updatetime = 1;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->updatetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdatePoolResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string updatetime = 1;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePoolResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdatePoolResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdatePoolResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdatePoolResponse::MergeFrom(const UpdatePoolResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdatePoolResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePoolResponse::CopyFrom(const UpdatePoolResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePoolResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UpdatePoolResponse::Swap(UpdatePoolResponse* other) {
  if (other != this) {
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdatePoolResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePoolResponse_descriptor_;
  metadata.reflection = UpdatePoolResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryPoolRequest::kCustidFieldNumber;
const int QueryPoolRequest::kOrgidFieldNumber;
const int QueryPoolRequest::kSynctimeFieldNumber;
const int QueryPoolRequest::kPooltypeFieldNumber;
const int QueryPoolRequest::kPoolgroupFieldNumber;
#endif  // !_MSC_VER

QueryPoolRequest::QueryPoolRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryPoolRequest::InitAsDefaultInstance() {
}

QueryPoolRequest::QueryPoolRequest(const QueryPoolRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryPoolRequest::SharedCtor() {
  _cached_size_ = 0;
  custid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  synctime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pooltype_ = 0;
  poolgroup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPoolRequest::~QueryPoolRequest() {
  SharedDtor();
}

void QueryPoolRequest::SharedDtor() {
  if (custid_ != &::google::protobuf::internal::kEmptyString) {
    delete custid_;
  }
  if (orgid_ != &::google::protobuf::internal::kEmptyString) {
    delete orgid_;
  }
  if (synctime_ != &::google::protobuf::internal::kEmptyString) {
    delete synctime_;
  }
  if (this != default_instance_) {
  }
}

void QueryPoolRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPoolRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPoolRequest_descriptor_;
}

const QueryPoolRequest& QueryPoolRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpool_2eproto();  return *default_instance_;
}

QueryPoolRequest* QueryPoolRequest::default_instance_ = NULL;

QueryPoolRequest* QueryPoolRequest::New() const {
  return new QueryPoolRequest;
}

void QueryPoolRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_custid()) {
      if (custid_ != &::google::protobuf::internal::kEmptyString) {
        custid_->clear();
      }
    }
    if (has_orgid()) {
      if (orgid_ != &::google::protobuf::internal::kEmptyString) {
        orgid_->clear();
      }
    }
    if (has_synctime()) {
      if (synctime_ != &::google::protobuf::internal::kEmptyString) {
        synctime_->clear();
      }
    }
    pooltype_ = 0;
    poolgroup_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPoolRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string custid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->custid().data(), this->custid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orgid;
        break;
      }
      
      // required string orgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orgid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orgid().data(), this->orgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_synctime;
        break;
      }
      
      // optional string synctime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_synctime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_synctime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->synctime().data(), this->synctime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pooltype;
        break;
      }
      
      // optional int32 pooltype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pooltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pooltype_)));
          set_has_pooltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_poolgroup;
        break;
      }
      
      // optional int32 poolgroup = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poolgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poolgroup_)));
          set_has_poolgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryPoolRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string custid = 1;
  if (has_custid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custid().data(), this->custid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->custid(), output);
  }
  
  // required string orgid = 2;
  if (has_orgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orgid().data(), this->orgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->orgid(), output);
  }
  
  // optional string synctime = 3;
  if (has_synctime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->synctime().data(), this->synctime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->synctime(), output);
  }
  
  // optional int32 pooltype = 4;
  if (has_pooltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pooltype(), output);
  }
  
  // optional int32 poolgroup = 5;
  if (has_poolgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->poolgroup(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryPoolRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string custid = 1;
  if (has_custid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->custid().data(), this->custid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->custid(), target);
  }
  
  // required string orgid = 2;
  if (has_orgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orgid().data(), this->orgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orgid(), target);
  }
  
  // optional string synctime = 3;
  if (has_synctime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->synctime().data(), this->synctime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->synctime(), target);
  }
  
  // optional int32 pooltype = 4;
  if (has_pooltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pooltype(), target);
  }
  
  // optional int32 poolgroup = 5;
  if (has_poolgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->poolgroup(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryPoolRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string custid = 1;
    if (has_custid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custid());
    }
    
    // required string orgid = 2;
    if (has_orgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orgid());
    }
    
    // optional string synctime = 3;
    if (has_synctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->synctime());
    }
    
    // optional int32 pooltype = 4;
    if (has_pooltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pooltype());
    }
    
    // optional int32 poolgroup = 5;
    if (has_poolgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poolgroup());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPoolRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPoolRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPoolRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPoolRequest::MergeFrom(const QueryPoolRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_custid()) {
      set_custid(from.custid());
    }
    if (from.has_orgid()) {
      set_orgid(from.orgid());
    }
    if (from.has_synctime()) {
      set_synctime(from.synctime());
    }
    if (from.has_pooltype()) {
      set_pooltype(from.pooltype());
    }
    if (from.has_poolgroup()) {
      set_poolgroup(from.poolgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPoolRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPoolRequest::CopyFrom(const QueryPoolRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPoolRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void QueryPoolRequest::Swap(QueryPoolRequest* other) {
  if (other != this) {
    std::swap(custid_, other->custid_);
    std::swap(orgid_, other->orgid_);
    std::swap(synctime_, other->synctime_);
    std::swap(pooltype_, other->pooltype_);
    std::swap(poolgroup_, other->poolgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPoolRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPoolRequest_descriptor_;
  metadata.reflection = QueryPoolRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryPoolResponse::kServertimeFieldNumber;
const int QueryPoolResponse::kPoolFieldNumber;
#endif  // !_MSC_VER

QueryPoolResponse::QueryPoolResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryPoolResponse::InitAsDefaultInstance() {
}

QueryPoolResponse::QueryPoolResponse(const QueryPoolResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryPoolResponse::SharedCtor() {
  _cached_size_ = 0;
  servertime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPoolResponse::~QueryPoolResponse() {
  SharedDtor();
}

void QueryPoolResponse::SharedDtor() {
  if (servertime_ != &::google::protobuf::internal::kEmptyString) {
    delete servertime_;
  }
  if (this != default_instance_) {
  }
}

void QueryPoolResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPoolResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPoolResponse_descriptor_;
}

const QueryPoolResponse& QueryPoolResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpool_2eproto();  return *default_instance_;
}

QueryPoolResponse* QueryPoolResponse::default_instance_ = NULL;

QueryPoolResponse* QueryPoolResponse::New() const {
  return new QueryPoolResponse;
}

void QueryPoolResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_servertime()) {
      if (servertime_ != &::google::protobuf::internal::kEmptyString) {
        servertime_->clear();
      }
    }
  }
  pool_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPoolResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string servertime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servertime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servertime().data(), this->servertime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pool;
        break;
      }
      
      // repeated .quote.Pool pool = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pool()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pool;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryPoolResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string servertime = 1;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servertime().data(), this->servertime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->servertime(), output);
  }
  
  // repeated .quote.Pool pool = 2;
  for (int i = 0; i < this->pool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pool(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryPoolResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string servertime = 1;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servertime().data(), this->servertime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servertime(), target);
  }
  
  // repeated .quote.Pool pool = 2;
  for (int i = 0; i < this->pool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pool(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryPoolResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string servertime = 1;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servertime());
    }
    
  }
  // repeated .quote.Pool pool = 2;
  total_size += 1 * this->pool_size();
  for (int i = 0; i < this->pool_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pool(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPoolResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPoolResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPoolResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPoolResponse::MergeFrom(const QueryPoolResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  pool_.MergeFrom(from.pool_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPoolResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPoolResponse::CopyFrom(const QueryPoolResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPoolResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < pool_size(); i++) {
    if (!this->pool(i).IsInitialized()) return false;
  }
  return true;
}

void QueryPoolResponse::Swap(QueryPoolResponse* other) {
  if (other != this) {
    std::swap(servertime_, other->servertime_);
    pool_.Swap(&other->pool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPoolResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPoolResponse_descriptor_;
  metadata.reflection = QueryPoolResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdatePoolTypeRequest::kPooltypeFieldNumber;
#endif  // !_MSC_VER

UpdatePoolTypeRequest::UpdatePoolTypeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdatePoolTypeRequest::InitAsDefaultInstance() {
}

UpdatePoolTypeRequest::UpdatePoolTypeRequest(const UpdatePoolTypeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdatePoolTypeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdatePoolTypeRequest::~UpdatePoolTypeRequest() {
  SharedDtor();
}

void UpdatePoolTypeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdatePoolTypeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePoolTypeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePoolTypeRequest_descriptor_;
}

const UpdatePoolTypeRequest& UpdatePoolTypeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpool_2eproto();  return *default_instance_;
}

UpdatePoolTypeRequest* UpdatePoolTypeRequest::default_instance_ = NULL;

UpdatePoolTypeRequest* UpdatePoolTypeRequest::New() const {
  return new UpdatePoolTypeRequest;
}

void UpdatePoolTypeRequest::Clear() {
  pooltype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdatePoolTypeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .quote.PoolType pooltype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pooltype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pooltype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pooltype;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdatePoolTypeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .quote.PoolType pooltype = 1;
  for (int i = 0; i < this->pooltype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pooltype(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdatePoolTypeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .quote.PoolType pooltype = 1;
  for (int i = 0; i < this->pooltype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pooltype(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdatePoolTypeRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .quote.PoolType pooltype = 1;
  total_size += 1 * this->pooltype_size();
  for (int i = 0; i < this->pooltype_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pooltype(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePoolTypeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdatePoolTypeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdatePoolTypeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdatePoolTypeRequest::MergeFrom(const UpdatePoolTypeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  pooltype_.MergeFrom(from.pooltype_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdatePoolTypeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePoolTypeRequest::CopyFrom(const UpdatePoolTypeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePoolTypeRequest::IsInitialized() const {
  
  for (int i = 0; i < pooltype_size(); i++) {
    if (!this->pooltype(i).IsInitialized()) return false;
  }
  return true;
}

void UpdatePoolTypeRequest::Swap(UpdatePoolTypeRequest* other) {
  if (other != this) {
    pooltype_.Swap(&other->pooltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdatePoolTypeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePoolTypeRequest_descriptor_;
  metadata.reflection = UpdatePoolTypeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdatePoolTypeResponse::kUpdatetimeFieldNumber;
#endif  // !_MSC_VER

UpdatePoolTypeResponse::UpdatePoolTypeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdatePoolTypeResponse::InitAsDefaultInstance() {
}

UpdatePoolTypeResponse::UpdatePoolTypeResponse(const UpdatePoolTypeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdatePoolTypeResponse::SharedCtor() {
  _cached_size_ = 0;
  updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdatePoolTypeResponse::~UpdatePoolTypeResponse() {
  SharedDtor();
}

void UpdatePoolTypeResponse::SharedDtor() {
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updatetime_;
  }
  if (this != default_instance_) {
  }
}

void UpdatePoolTypeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePoolTypeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePoolTypeResponse_descriptor_;
}

const UpdatePoolTypeResponse& UpdatePoolTypeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpool_2eproto();  return *default_instance_;
}

UpdatePoolTypeResponse* UpdatePoolTypeResponse::default_instance_ = NULL;

UpdatePoolTypeResponse* UpdatePoolTypeResponse::New() const {
  return new UpdatePoolTypeResponse;
}

void UpdatePoolTypeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_updatetime()) {
      if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
        updatetime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdatePoolTypeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string updatetime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatetime().data(), this->updatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdatePoolTypeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string updatetime = 1;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->updatetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdatePoolTypeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string updatetime = 1;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->updatetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdatePoolTypeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string updatetime = 1;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePoolTypeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdatePoolTypeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdatePoolTypeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdatePoolTypeResponse::MergeFrom(const UpdatePoolTypeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdatePoolTypeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePoolTypeResponse::CopyFrom(const UpdatePoolTypeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePoolTypeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UpdatePoolTypeResponse::Swap(UpdatePoolTypeResponse* other) {
  if (other != this) {
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdatePoolTypeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePoolTypeResponse_descriptor_;
  metadata.reflection = UpdatePoolTypeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryPoolTypeRequest::kSynctimeFieldNumber;
const int QueryPoolTypeRequest::kPooltypeFieldNumber;
#endif  // !_MSC_VER

QueryPoolTypeRequest::QueryPoolTypeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryPoolTypeRequest::InitAsDefaultInstance() {
}

QueryPoolTypeRequest::QueryPoolTypeRequest(const QueryPoolTypeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryPoolTypeRequest::SharedCtor() {
  _cached_size_ = 0;
  synctime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pooltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPoolTypeRequest::~QueryPoolTypeRequest() {
  SharedDtor();
}

void QueryPoolTypeRequest::SharedDtor() {
  if (synctime_ != &::google::protobuf::internal::kEmptyString) {
    delete synctime_;
  }
  if (this != default_instance_) {
  }
}

void QueryPoolTypeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPoolTypeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPoolTypeRequest_descriptor_;
}

const QueryPoolTypeRequest& QueryPoolTypeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpool_2eproto();  return *default_instance_;
}

QueryPoolTypeRequest* QueryPoolTypeRequest::default_instance_ = NULL;

QueryPoolTypeRequest* QueryPoolTypeRequest::New() const {
  return new QueryPoolTypeRequest;
}

void QueryPoolTypeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_synctime()) {
      if (synctime_ != &::google::protobuf::internal::kEmptyString) {
        synctime_->clear();
      }
    }
    pooltype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPoolTypeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string synctime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_synctime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->synctime().data(), this->synctime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pooltype;
        break;
      }
      
      // optional int32 pooltype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pooltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pooltype_)));
          set_has_pooltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryPoolTypeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string synctime = 1;
  if (has_synctime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->synctime().data(), this->synctime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->synctime(), output);
  }
  
  // optional int32 pooltype = 2;
  if (has_pooltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pooltype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryPoolTypeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string synctime = 1;
  if (has_synctime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->synctime().data(), this->synctime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->synctime(), target);
  }
  
  // optional int32 pooltype = 2;
  if (has_pooltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pooltype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryPoolTypeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string synctime = 1;
    if (has_synctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->synctime());
    }
    
    // optional int32 pooltype = 2;
    if (has_pooltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pooltype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPoolTypeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPoolTypeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPoolTypeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPoolTypeRequest::MergeFrom(const QueryPoolTypeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_synctime()) {
      set_synctime(from.synctime());
    }
    if (from.has_pooltype()) {
      set_pooltype(from.pooltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPoolTypeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPoolTypeRequest::CopyFrom(const QueryPoolTypeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPoolTypeRequest::IsInitialized() const {
  
  return true;
}

void QueryPoolTypeRequest::Swap(QueryPoolTypeRequest* other) {
  if (other != this) {
    std::swap(synctime_, other->synctime_);
    std::swap(pooltype_, other->pooltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPoolTypeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPoolTypeRequest_descriptor_;
  metadata.reflection = QueryPoolTypeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryPoolTypeResponse::kServertimeFieldNumber;
const int QueryPoolTypeResponse::kPooltypeFieldNumber;
#endif  // !_MSC_VER

QueryPoolTypeResponse::QueryPoolTypeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryPoolTypeResponse::InitAsDefaultInstance() {
}

QueryPoolTypeResponse::QueryPoolTypeResponse(const QueryPoolTypeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryPoolTypeResponse::SharedCtor() {
  _cached_size_ = 0;
  servertime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPoolTypeResponse::~QueryPoolTypeResponse() {
  SharedDtor();
}

void QueryPoolTypeResponse::SharedDtor() {
  if (servertime_ != &::google::protobuf::internal::kEmptyString) {
    delete servertime_;
  }
  if (this != default_instance_) {
  }
}

void QueryPoolTypeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPoolTypeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPoolTypeResponse_descriptor_;
}

const QueryPoolTypeResponse& QueryPoolTypeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockpool_2eproto();  return *default_instance_;
}

QueryPoolTypeResponse* QueryPoolTypeResponse::default_instance_ = NULL;

QueryPoolTypeResponse* QueryPoolTypeResponse::New() const {
  return new QueryPoolTypeResponse;
}

void QueryPoolTypeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_servertime()) {
      if (servertime_ != &::google::protobuf::internal::kEmptyString) {
        servertime_->clear();
      }
    }
  }
  pooltype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPoolTypeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string servertime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servertime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servertime().data(), this->servertime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pooltype;
        break;
      }
      
      // repeated .quote.PoolType pooltype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pooltype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pooltype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pooltype;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryPoolTypeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string servertime = 1;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servertime().data(), this->servertime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->servertime(), output);
  }
  
  // repeated .quote.PoolType pooltype = 2;
  for (int i = 0; i < this->pooltype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pooltype(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryPoolTypeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string servertime = 1;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servertime().data(), this->servertime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servertime(), target);
  }
  
  // repeated .quote.PoolType pooltype = 2;
  for (int i = 0; i < this->pooltype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pooltype(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryPoolTypeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string servertime = 1;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servertime());
    }
    
  }
  // repeated .quote.PoolType pooltype = 2;
  total_size += 1 * this->pooltype_size();
  for (int i = 0; i < this->pooltype_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pooltype(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPoolTypeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPoolTypeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPoolTypeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPoolTypeResponse::MergeFrom(const QueryPoolTypeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  pooltype_.MergeFrom(from.pooltype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPoolTypeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPoolTypeResponse::CopyFrom(const QueryPoolTypeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPoolTypeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < pooltype_size(); i++) {
    if (!this->pooltype(i).IsInitialized()) return false;
  }
  return true;
}

void QueryPoolTypeResponse::Swap(QueryPoolTypeResponse* other) {
  if (other != this) {
    std::swap(servertime_, other->servertime_);
    pooltype_.Swap(&other->pooltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPoolTypeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPoolTypeResponse_descriptor_;
  metadata.reflection = QueryPoolTypeResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace quote

// @@protoc_insertion_point(global_scope)
