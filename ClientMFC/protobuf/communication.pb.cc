// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "communication.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace quote {

namespace {

const ::google::protobuf::Descriptor* RealTimeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RealTimeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RealTimeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RealTimeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RealTimeResponse_RealTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RealTimeResponse_RealTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* Grid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Grid_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GridRequest_Field_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GridRequest_Sort_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GridResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridSortRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridSortRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GridSortRequest_Field_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GridSortRequest_Sort_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GridSortResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridSortResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetailRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DetailRequest_Direction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MinRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MinRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusResponse_Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusResponse_Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZhpmRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZhpmRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZhpmResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZhpmResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZhpmResponse_Zhpm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZhpmResponse_Zhpm_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZhpmResponse_Zhpm_ZhpmStock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZhpmResponse_Zhpm_ZhpmStock_reflection_ = NULL;
const ::google::protobuf::Descriptor* CandleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CandleRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CandleRequest_CandleCycle_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CandleRequest_Direction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeightRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeightRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BlockRequest_Block_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LargeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LargeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PriceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PriceRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PriceRequest_Direction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PriceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PriceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PriceResponse_Price_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PriceResponse_Price_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_communication_2eproto() {
  protobuf_AddDesc_communication_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "communication.proto");
  GOOGLE_CHECK(file != NULL);
  RealTimeRequest_descriptor_ = file->message_type(0);
  static const int RealTimeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeRequest, stockcode_),
  };
  RealTimeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RealTimeRequest_descriptor_,
      RealTimeRequest::default_instance_,
      RealTimeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RealTimeRequest));
  RealTimeResponse_descriptor_ = file->message_type(1);
  static const int RealTimeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse, realtime_),
  };
  RealTimeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RealTimeResponse_descriptor_,
      RealTimeResponse::default_instance_,
      RealTimeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RealTimeResponse));
  RealTimeResponse_RealTime_descriptor_ = RealTimeResponse_descriptor_->nested_type(0);
  static const int RealTimeResponse_RealTime_offsets_[78] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, quotetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, markettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, secucode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, tp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, vol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, amt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, askprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, askvol5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, askprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, askvol4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, askprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, askvol3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, askprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, askvol2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, askprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, askvol1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, bidprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, bidvol1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, bidprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, bidvol2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, bidprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, bidvol3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, bidprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, bidvol4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, bidprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, bidvol5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, zf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, zd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, zt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, dt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, hs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, amp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, lb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, wb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, wc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, nwp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, np_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, wp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, sp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, xs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, actualxs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, xe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, detailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, sg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, fund_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, warrant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, bond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, govbond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, zj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, pj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, dj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, zja_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, pja_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, dja_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, zjb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, pjb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, djb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, zjfund_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, pjfund_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, djfund_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, zjmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, pjmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, djmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, zjtrad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, pjtrad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, djtrad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, dpdksp1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, dpdksp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, dpdkbp1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, dpdkbp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, leadingindex_),
  };
  RealTimeResponse_RealTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RealTimeResponse_RealTime_descriptor_,
      RealTimeResponse_RealTime::default_instance_,
      RealTimeResponse_RealTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeResponse_RealTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RealTimeResponse_RealTime));
  Grid_descriptor_ = file->message_type(2);
  static const int Grid_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, secucode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, secutype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, tp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, vol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, amt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, askprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, bidprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, zf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, zd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, hs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, amp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, lb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, wb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, wc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, xs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, nwp_),
  };
  Grid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Grid_descriptor_,
      Grid::default_instance_,
      Grid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Grid));
  GridRequest_descriptor_ = file->message_type(3);
  static const int GridRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridRequest, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridRequest, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridRequest, sort_),
  };
  GridRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridRequest_descriptor_,
      GridRequest::default_instance_,
      GridRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridRequest));
  GridRequest_Field_descriptor_ = GridRequest_descriptor_->enum_type(0);
  GridRequest_Sort_descriptor_ = GridRequest_descriptor_->enum_type(1);
  GridResponse_descriptor_ = file->message_type(4);
  static const int GridResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridResponse, grid_),
  };
  GridResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridResponse_descriptor_,
      GridResponse::default_instance_,
      GridResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridResponse));
  GridSortRequest_descriptor_ = file->message_type(5);
  static const int GridSortRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSortRequest, secutype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSortRequest, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSortRequest, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSortRequest, startidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSortRequest, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSortRequest, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSortRequest, sort_),
  };
  GridSortRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridSortRequest_descriptor_,
      GridSortRequest::default_instance_,
      GridSortRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSortRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSortRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridSortRequest));
  GridSortRequest_Field_descriptor_ = GridSortRequest_descriptor_->enum_type(0);
  GridSortRequest_Sort_descriptor_ = GridSortRequest_descriptor_->enum_type(1);
  GridSortResponse_descriptor_ = file->message_type(6);
  static const int GridSortResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSortResponse, grid_),
  };
  GridSortResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridSortResponse_descriptor_,
      GridSortResponse::default_instance_,
      GridSortResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSortResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSortResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridSortResponse));
  DetailRequest_descriptor_ = file->message_type(7);
  static const int DetailRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailRequest, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailRequest, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailRequest, direction_),
  };
  DetailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetailRequest_descriptor_,
      DetailRequest::default_instance_,
      DetailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetailRequest));
  DetailRequest_Direction_descriptor_ = DetailRequest_descriptor_->enum_type(0);
  MinRequest_descriptor_ = file->message_type(8);
  static const int MinRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinRequest, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinRequest, day_),
  };
  MinRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MinRequest_descriptor_,
      MinRequest::default_instance_,
      MinRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MinRequest));
  StatusRequest_descriptor_ = file->message_type(9);
  static const int StatusRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, stockcode_),
  };
  StatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusRequest_descriptor_,
      StatusRequest::default_instance_,
      StatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusRequest));
  StatusResponse_descriptor_ = file->message_type(10);
  static const int StatusResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, status_),
  };
  StatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusResponse_descriptor_,
      StatusResponse::default_instance_,
      StatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusResponse));
  StatusResponse_Status_descriptor_ = StatusResponse_descriptor_->nested_type(0);
  static const int StatusResponse_Status_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse_Status, secucode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse_Status, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse_Status, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse_Status, zf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse_Status, zd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse_Status, amt_),
  };
  StatusResponse_Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusResponse_Status_descriptor_,
      StatusResponse_Status::default_instance_,
      StatusResponse_Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse_Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse_Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusResponse_Status));
  ZhpmRequest_descriptor_ = file->message_type(11);
  static const int ZhpmRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmRequest, secutype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmRequest, zhpmtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmRequest, len_),
  };
  ZhpmRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZhpmRequest_descriptor_,
      ZhpmRequest::default_instance_,
      ZhpmRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZhpmRequest));
  ZhpmResponse_descriptor_ = file->message_type(12);
  static const int ZhpmResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmResponse, zhpm_),
  };
  ZhpmResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZhpmResponse_descriptor_,
      ZhpmResponse::default_instance_,
      ZhpmResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZhpmResponse));
  ZhpmResponse_Zhpm_descriptor_ = ZhpmResponse_descriptor_->nested_type(0);
  static const int ZhpmResponse_Zhpm_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmResponse_Zhpm, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmResponse_Zhpm, zhpmstock_),
  };
  ZhpmResponse_Zhpm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZhpmResponse_Zhpm_descriptor_,
      ZhpmResponse_Zhpm::default_instance_,
      ZhpmResponse_Zhpm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmResponse_Zhpm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmResponse_Zhpm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZhpmResponse_Zhpm));
  ZhpmResponse_Zhpm_ZhpmStock_descriptor_ = ZhpmResponse_Zhpm_descriptor_->nested_type(0);
  static const int ZhpmResponse_Zhpm_ZhpmStock_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmResponse_Zhpm_ZhpmStock, secucode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmResponse_Zhpm_ZhpmStock, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmResponse_Zhpm_ZhpmStock, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmResponse_Zhpm_ZhpmStock, zf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmResponse_Zhpm_ZhpmStock, value_),
  };
  ZhpmResponse_Zhpm_ZhpmStock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZhpmResponse_Zhpm_ZhpmStock_descriptor_,
      ZhpmResponse_Zhpm_ZhpmStock::default_instance_,
      ZhpmResponse_Zhpm_ZhpmStock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmResponse_Zhpm_ZhpmStock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhpmResponse_Zhpm_ZhpmStock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZhpmResponse_Zhpm_ZhpmStock));
  CandleRequest_descriptor_ = file->message_type(13);
  static const int CandleRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleRequest, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleRequest, candlecycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleRequest, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleRequest, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleRequest, direction_),
  };
  CandleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CandleRequest_descriptor_,
      CandleRequest::default_instance_,
      CandleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CandleRequest));
  CandleRequest_CandleCycle_descriptor_ = CandleRequest_descriptor_->enum_type(0);
  CandleRequest_Direction_descriptor_ = CandleRequest_descriptor_->enum_type(1);
  StockRequest_descriptor_ = file->message_type(14);
  static const int StockRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRequest, exchange_),
  };
  StockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StockRequest_descriptor_,
      StockRequest::default_instance_,
      StockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StockRequest));
  FinanceRequest_descriptor_ = file->message_type(15);
  static const int FinanceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinanceRequest, exchange_),
  };
  FinanceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinanceRequest_descriptor_,
      FinanceRequest::default_instance_,
      FinanceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinanceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinanceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinanceRequest));
  WeightRequest_descriptor_ = file->message_type(16);
  static const int WeightRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightRequest, secucode_),
  };
  WeightRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeightRequest_descriptor_,
      WeightRequest::default_instance_,
      WeightRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeightRequest));
  BlockRequest_descriptor_ = file->message_type(17);
  static const int BlockRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRequest, block_),
  };
  BlockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockRequest_descriptor_,
      BlockRequest::default_instance_,
      BlockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockRequest));
  BlockRequest_Block_descriptor_ = BlockRequest_descriptor_->enum_type(0);
  LargeRequest_descriptor_ = file->message_type(18);
  static const int LargeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LargeRequest, len_),
  };
  LargeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LargeRequest_descriptor_,
      LargeRequest::default_instance_,
      LargeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LargeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LargeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LargeRequest));
  PriceRequest_descriptor_ = file->message_type(19);
  static const int PriceRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceRequest, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceRequest, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceRequest, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceRequest, direction_),
  };
  PriceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PriceRequest_descriptor_,
      PriceRequest::default_instance_,
      PriceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PriceRequest));
  PriceRequest_Direction_descriptor_ = PriceRequest_descriptor_->enum_type(0);
  PriceResponse_descriptor_ = file->message_type(20);
  static const int PriceResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceResponse, maxsumxs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceResponse, maxsumxe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceResponse, price_),
  };
  PriceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PriceResponse_descriptor_,
      PriceResponse::default_instance_,
      PriceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PriceResponse));
  PriceResponse_Price_descriptor_ = PriceResponse_descriptor_->nested_type(0);
  static const int PriceResponse_Price_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceResponse_Price, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceResponse_Price, sumxsb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceResponse_Price, sumxeb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceResponse_Price, sumxs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceResponse_Price, sumxe_),
  };
  PriceResponse_Price_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PriceResponse_Price_descriptor_,
      PriceResponse_Price::default_instance_,
      PriceResponse_Price_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceResponse_Price, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceResponse_Price, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PriceResponse_Price));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_communication_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RealTimeRequest_descriptor_, &RealTimeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RealTimeResponse_descriptor_, &RealTimeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RealTimeResponse_RealTime_descriptor_, &RealTimeResponse_RealTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Grid_descriptor_, &Grid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridRequest_descriptor_, &GridRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridResponse_descriptor_, &GridResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridSortRequest_descriptor_, &GridSortRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridSortResponse_descriptor_, &GridSortResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetailRequest_descriptor_, &DetailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MinRequest_descriptor_, &MinRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusRequest_descriptor_, &StatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusResponse_descriptor_, &StatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusResponse_Status_descriptor_, &StatusResponse_Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZhpmRequest_descriptor_, &ZhpmRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZhpmResponse_descriptor_, &ZhpmResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZhpmResponse_Zhpm_descriptor_, &ZhpmResponse_Zhpm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZhpmResponse_Zhpm_ZhpmStock_descriptor_, &ZhpmResponse_Zhpm_ZhpmStock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CandleRequest_descriptor_, &CandleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StockRequest_descriptor_, &StockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinanceRequest_descriptor_, &FinanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeightRequest_descriptor_, &WeightRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockRequest_descriptor_, &BlockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LargeRequest_descriptor_, &LargeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PriceRequest_descriptor_, &PriceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PriceResponse_descriptor_, &PriceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PriceResponse_Price_descriptor_, &PriceResponse_Price::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_communication_2eproto() {
  delete RealTimeRequest::default_instance_;
  delete RealTimeRequest_reflection_;
  delete RealTimeResponse::default_instance_;
  delete RealTimeResponse_reflection_;
  delete RealTimeResponse_RealTime::default_instance_;
  delete RealTimeResponse_RealTime_reflection_;
  delete Grid::default_instance_;
  delete Grid_reflection_;
  delete GridRequest::default_instance_;
  delete GridRequest_reflection_;
  delete GridResponse::default_instance_;
  delete GridResponse_reflection_;
  delete GridSortRequest::default_instance_;
  delete GridSortRequest_reflection_;
  delete GridSortResponse::default_instance_;
  delete GridSortResponse_reflection_;
  delete DetailRequest::default_instance_;
  delete DetailRequest_reflection_;
  delete MinRequest::default_instance_;
  delete MinRequest_reflection_;
  delete StatusRequest::default_instance_;
  delete StatusRequest_reflection_;
  delete StatusResponse::default_instance_;
  delete StatusResponse_reflection_;
  delete StatusResponse_Status::default_instance_;
  delete StatusResponse_Status_reflection_;
  delete ZhpmRequest::default_instance_;
  delete ZhpmRequest_reflection_;
  delete ZhpmResponse::default_instance_;
  delete ZhpmResponse_reflection_;
  delete ZhpmResponse_Zhpm::default_instance_;
  delete ZhpmResponse_Zhpm_reflection_;
  delete ZhpmResponse_Zhpm_ZhpmStock::default_instance_;
  delete ZhpmResponse_Zhpm_ZhpmStock_reflection_;
  delete CandleRequest::default_instance_;
  delete CandleRequest_reflection_;
  delete StockRequest::default_instance_;
  delete StockRequest_reflection_;
  delete FinanceRequest::default_instance_;
  delete FinanceRequest_reflection_;
  delete WeightRequest::default_instance_;
  delete WeightRequest_reflection_;
  delete BlockRequest::default_instance_;
  delete BlockRequest_reflection_;
  delete LargeRequest::default_instance_;
  delete LargeRequest_reflection_;
  delete PriceRequest::default_instance_;
  delete PriceRequest_reflection_;
  delete PriceResponse::default_instance_;
  delete PriceResponse_reflection_;
  delete PriceResponse_Price::default_instance_;
  delete PriceResponse_Price_reflection_;
}

void protobuf_AddDesc_communication_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023communication.proto\022\005quote\"$\n\017RealTime"
    "Request\022\021\n\tstockcode\030\001 \003(\t\"\365\t\n\020RealTimeR"
    "esponse\0222\n\010realtime\030\001 \003(\0132 .quote.RealTi"
    "meResponse.RealTime\032\254\t\n\010RealTime\022\021\n\tquot"
    "etime\030\001 \002(\t\022\022\n\nmarkettime\030\002 \002(\t\022\020\n\010secuc"
    "ode\030\003 \002(\t\022\020\n\010exchange\030\004 \002(\005\022\n\n\002tp\030\005 \002(\010\022"
    "\014\n\004open\030\006 \002(\002\022\014\n\004high\030\007 \002(\002\022\013\n\003low\030\010 \002(\002"
    "\022\r\n\005close\030\t \002(\002\022\013\n\003vol\030\n \002(\003\022\013\n\003amt\030\013 \002("
    "\001\022\021\n\taskprice5\030\014 \001(\002\022\017\n\007askvol5\030\r \001(\005\022\021\n"
    "\taskprice4\030\016 \001(\002\022\017\n\007askvol4\030\017 \001(\005\022\021\n\task"
    "price3\030\020 \002(\002\022\017\n\007askvol3\030\021 \002(\005\022\021\n\taskpric"
    "e2\030\022 \002(\002\022\017\n\007askvol2\030\023 \002(\005\022\021\n\taskprice1\030\024"
    " \002(\002\022\017\n\007askvol1\030\025 \002(\005\022\021\n\tbidprice1\030\026 \002(\002"
    "\022\017\n\007bidvol1\030\027 \002(\005\022\021\n\tbidprice2\030\030 \002(\002\022\017\n\007"
    "bidvol2\030\031 \002(\005\022\021\n\tbidprice3\030\032 \002(\002\022\017\n\007bidv"
    "ol3\030\033 \002(\005\022\021\n\tbidprice4\030\034 \001(\002\022\017\n\007bidvol4\030"
    "\035 \001(\005\022\021\n\tbidprice5\030\036 \001(\002\022\017\n\007bidvol5\030\037 \001("
    "\005\022\n\n\002zf\030  \002(\002\022\n\n\002zd\030! \002(\002\022\n\n\002zt\030\" \002(\002\022\n\n"
    "\002dt\030# \002(\002\022\n\n\002hs\030$ \002(\002\022\013\n\003amp\030% \002(\002\022\n\n\002lb"
    "\030& \002(\002\022\n\n\002wb\030\' \002(\002\022\n\n\002wc\030( \002(\005\022\013\n\003nwp\030) "
    "\002(\t\022\n\n\002np\030* \002(\005\022\n\n\002wp\030+ \002(\005\022\n\n\002sp\030, \002(\005\022"
    "\n\n\002xs\030- \002(\005\022\020\n\010actualxs\030. \002(\005\022\n\n\002xe\030/ \002("
    "\002\022\020\n\010detailid\0300 \002(\005\022\n\n\002sg\0301 \002(\010\022\t\n\001a\0302 \001"
    "(\001\022\t\n\001b\0303 \001(\001\022\014\n\004fund\0304 \001(\001\022\017\n\007warrant\0305"
    " \001(\001\022\014\n\004bond\0306 \001(\001\022\017\n\007govbond\0307 \001(\001\022\n\n\002z"
    "j\0308 \001(\005\022\n\n\002pj\0309 \001(\005\022\n\n\002dj\030: \001(\005\022\013\n\003zja\030;"
    " \001(\005\022\013\n\003pja\030< \001(\005\022\013\n\003dja\030= \001(\005\022\013\n\003zjb\030> "
    "\001(\005\022\013\n\003pjb\030\? \001(\005\022\013\n\003djb\030@ \001(\005\022\016\n\006zjfund\030"
    "A \001(\005\022\016\n\006pjfund\030B \001(\005\022\016\n\006djfund\030C \001(\005\022\r\n"
    "\005zjmid\030D \001(\005\022\r\n\005pjmid\030E \001(\005\022\r\n\005djmid\030F \001"
    "(\005\022\016\n\006zjtrad\030G \001(\005\022\016\n\006pjtrad\030H \001(\005\022\016\n\006dj"
    "trad\030I \001(\005\022\017\n\007dpdksp1\030J \001(\002\022\016\n\006dpdksp\030K "
    "\001(\002\022\017\n\007dpdkbp1\030L \001(\002\022\016\n\006dpdkbp\030M \001(\002\022\024\n\014"
    "leadingindex\030N \001(\002\"\256\002\n\004Grid\022\020\n\010secucode\030"
    "\001 \002(\t\022\020\n\010exchange\030\002 \002(\005\022\020\n\010secutype\030\003 \002("
    "\005\022\n\n\002tp\030\004 \002(\005\022\014\n\004open\030\005 \002(\002\022\014\n\004high\030\006 \002("
    "\002\022\013\n\003low\030\007 \002(\002\022\r\n\005close\030\010 \002(\002\022\013\n\003vol\030\t \002"
    "(\003\022\013\n\003amt\030\n \002(\001\022\021\n\taskprice1\030\013 \002(\002\022\021\n\tbi"
    "dprice1\030\014 \002(\002\022\n\n\002zf\030\r \002(\002\022\n\n\002zd\030\016 \002(\002\022\n\n"
    "\002hs\030\017 \002(\002\022\013\n\003amp\030\020 \002(\002\022\n\n\002lb\030\021 \002(\002\022\n\n\002wb"
    "\030\022 \002(\002\022\n\n\002wc\030\023 \002(\005\022\n\n\002xs\030\024 \002(\005\022\013\n\003nwp\030\025 "
    "\002(\t\"\272\002\n\013GridRequest\022\021\n\tstockcode\030\001 \003(\t\022\'"
    "\n\005field\030\002 \001(\0162\030.quote.GridRequest.Field\022"
    "%\n\004sort\030\003 \001(\0162\027.quote.GridRequest.Sort\"\254"
    "\001\n\005Field\022\010\n\004ZQDM\020\001\022\010\n\004JRKP\020\002\022\010\n\004ZGCJ\020\003\022\010"
    "\n\004ZDCJ\020\004\022\010\n\004ZJCJ\020\005\022\010\n\004CJSL\020\006\022\010\n\004CJJE\020\007\022\010"
    "\n\004BJW1\020\010\022\010\n\004SJW1\020\t\022\006\n\002ZF\020\n\022\006\n\002ZD\020\013\022\006\n\002HS"
    "\020\014\022\007\n\003AMP\020\r\022\006\n\002LB\020\016\022\006\n\002WB\020\017\022\006\n\002WC\020\020\022\010\n\004Z"
    "RSP\020\021\022\006\n\002XS\020\022\"\031\n\004Sort\022\007\n\003ASC\020\001\022\010\n\004DESC\020\002"
    "\")\n\014GridResponse\022\031\n\004grid\030\001 \003(\0132\013.quote.G"
    "rid\"\201\003\n\017GridSortRequest\022\020\n\010secutype\030\001 \003("
    "\005\022\r\n\005block\030\002 \002(\010\022\014\n\004page\030\003 \001(\005\022\020\n\010starti"
    "dx\030\004 \001(\005\022\013\n\003len\030\005 \002(\005\022+\n\005field\030\006 \002(\0162\034.q"
    "uote.GridSortRequest.Field\022)\n\004sort\030\007 \002(\016"
    "2\033.quote.GridSortRequest.Sort\"\254\001\n\005Field\022"
    "\010\n\004ZQDM\020\001\022\010\n\004JRKP\020\002\022\010\n\004ZGCJ\020\003\022\010\n\004ZDCJ\020\004\022"
    "\010\n\004ZJCJ\020\005\022\010\n\004CJSL\020\006\022\010\n\004CJJE\020\007\022\010\n\004BJW1\020\010\022"
    "\010\n\004SJW1\020\t\022\006\n\002ZF\020\n\022\006\n\002ZD\020\013\022\006\n\002HS\020\014\022\007\n\003AMP"
    "\020\r\022\006\n\002LB\020\016\022\006\n\002WB\020\017\022\006\n\002WC\020\020\022\010\n\004ZRSP\020\021\022\006\n\002"
    "XS\020\022\"\031\n\004Sort\022\007\n\003ASC\020\001\022\010\n\004DESC\020\002\"-\n\020GridS"
    "ortResponse\022\031\n\004grid\030\001 \003(\0132\013.quote.Grid\"\226"
    "\001\n\rDetailRequest\022\021\n\tstockcode\030\001 \002(\t\022\013\n\003l"
    "en\030\002 \002(\005\022\n\n\002id\030\003 \001(\005\0221\n\tdirection\030\004 \001(\0162"
    "\036.quote.DetailRequest.Direction\"&\n\tDirec"
    "tion\022\013\n\007FORWARD\020\001\022\014\n\010BACKWARD\020\002\",\n\nMinRe"
    "quest\022\021\n\tstockcode\030\001 \002(\t\022\013\n\003day\030\002 \003(\005\"\"\n"
    "\rStatusRequest\022\021\n\tstockcode\030\001 \003(\t\"\240\001\n\016St"
    "atusResponse\022,\n\006status\030\001 \003(\0132\034.quote.Sta"
    "tusResponse.Status\032`\n\006Status\022\020\n\010secucode"
    "\030\001 \002(\t\022\020\n\010exchange\030\002 \002(\005\022\r\n\005close\030\003 \002(\002\022"
    "\n\n\002zf\030\004 \002(\002\022\n\n\002zd\030\005 \002(\002\022\013\n\003amt\030\006 \002(\001\">\n\013"
    "ZhpmRequest\022\020\n\010secutype\030\001 \003(\005\022\020\n\010zhpmtyp"
    "e\030\002 \003(\005\022\013\n\003len\030\003 \002(\005\"\337\001\n\014ZhpmResponse\022&\n"
    "\004zhpm\030\001 \003(\0132\030.quote.ZhpmResponse.Zhpm\032\246\001"
    "\n\004Zhpm\022\014\n\004type\030\001 \002(\005\0225\n\tzhpmstock\030\002 \003(\0132"
    "\".quote.ZhpmResponse.Zhpm.ZhpmStock\032Y\n\tZ"
    "hpmStock\022\020\n\010secucode\030\001 \002(\t\022\020\n\010exchange\030\002"
    " \002(\005\022\r\n\005close\030\003 \002(\002\022\n\n\002zf\030\004 \002(\002\022\r\n\005value"
    "\030\005 \002(\001\"\307\002\n\rCandleRequest\022\021\n\tstockcode\030\001 "
    "\002(\t\0225\n\013candlecycle\030\002 \002(\0162 .quote.CandleR"
    "equest.CandleCycle\022\013\n\003len\030\003 \002(\005\022\014\n\004date\030"
    "\004 \001(\t\022\n\n\002id\030\005 \001(\005\0221\n\tdirection\030\006 \002(\0162\036.q"
    "uote.CandleRequest.Direction\"j\n\013CandleCy"
    "cle\022\007\n\003DAY\020\001\022\010\n\004WEEK\020\002\022\t\n\005MONTH\020\003\022\010\n\004YEA"
    "R\020\004\022\010\n\004MIN1\020\005\022\010\n\004MIN5\020\006\022\t\n\005MIN15\020\007\022\t\n\005MI"
    "N30\020\010\022\t\n\005MIN60\020\t\"&\n\tDirection\022\013\n\007FORWARD"
    "\020\001\022\014\n\010BACKWARD\020\002\" \n\014StockRequest\022\020\n\010exch"
    "ange\030\001 \002(\005\"\"\n\016FinanceRequest\022\020\n\010exchange"
    "\030\001 \001(\005\"!\n\rWeightRequest\022\020\n\010secucode\030\001 \002("
    "\t\"]\n\014BlockRequest\022(\n\005block\030\001 \002(\0162\031.quote"
    ".BlockRequest.Block\"#\n\005Block\022\t\n\005BLOCK\020\001\022"
    "\017\n\013BLOCKDETAIL\020\002\"\033\n\014LargeRequest\022\013\n\003len\030"
    "\001 \002(\005\"\227\001\n\014PriceRequest\022\021\n\tstockcode\030\001 \002("
    "\t\022\013\n\003len\030\002 \002(\005\022\r\n\005close\030\003 \001(\002\0220\n\tdirecti"
    "on\030\004 \001(\0162\035.quote.PriceRequest.Direction\""
    "&\n\tDirection\022\013\n\007FORWARD\020\001\022\014\n\010BACKWARD\020\002\""
    "\264\001\n\rPriceResponse\022\020\n\010maxsumxs\030\001 \002(\001\022\020\n\010m"
    "axsumxe\030\002 \002(\001\022)\n\005price\030\003 \003(\0132\032.quote.Pri"
    "ceResponse.Price\032T\n\005Price\022\r\n\005close\030\001 \002(\002"
    "\022\016\n\006sumxsb\030\002 \002(\001\022\016\n\006sumxeb\030\003 \002(\001\022\r\n\005sumx"
    "s\030\004 \002(\001\022\r\n\005sumxe\030\005 \002(\001", 4022);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "communication.proto", &protobuf_RegisterTypes);
  RealTimeRequest::default_instance_ = new RealTimeRequest();
  RealTimeResponse::default_instance_ = new RealTimeResponse();
  RealTimeResponse_RealTime::default_instance_ = new RealTimeResponse_RealTime();
  Grid::default_instance_ = new Grid();
  GridRequest::default_instance_ = new GridRequest();
  GridResponse::default_instance_ = new GridResponse();
  GridSortRequest::default_instance_ = new GridSortRequest();
  GridSortResponse::default_instance_ = new GridSortResponse();
  DetailRequest::default_instance_ = new DetailRequest();
  MinRequest::default_instance_ = new MinRequest();
  StatusRequest::default_instance_ = new StatusRequest();
  StatusResponse::default_instance_ = new StatusResponse();
  StatusResponse_Status::default_instance_ = new StatusResponse_Status();
  ZhpmRequest::default_instance_ = new ZhpmRequest();
  ZhpmResponse::default_instance_ = new ZhpmResponse();
  ZhpmResponse_Zhpm::default_instance_ = new ZhpmResponse_Zhpm();
  ZhpmResponse_Zhpm_ZhpmStock::default_instance_ = new ZhpmResponse_Zhpm_ZhpmStock();
  CandleRequest::default_instance_ = new CandleRequest();
  StockRequest::default_instance_ = new StockRequest();
  FinanceRequest::default_instance_ = new FinanceRequest();
  WeightRequest::default_instance_ = new WeightRequest();
  BlockRequest::default_instance_ = new BlockRequest();
  LargeRequest::default_instance_ = new LargeRequest();
  PriceRequest::default_instance_ = new PriceRequest();
  PriceResponse::default_instance_ = new PriceResponse();
  PriceResponse_Price::default_instance_ = new PriceResponse_Price();
  RealTimeRequest::default_instance_->InitAsDefaultInstance();
  RealTimeResponse::default_instance_->InitAsDefaultInstance();
  RealTimeResponse_RealTime::default_instance_->InitAsDefaultInstance();
  Grid::default_instance_->InitAsDefaultInstance();
  GridRequest::default_instance_->InitAsDefaultInstance();
  GridResponse::default_instance_->InitAsDefaultInstance();
  GridSortRequest::default_instance_->InitAsDefaultInstance();
  GridSortResponse::default_instance_->InitAsDefaultInstance();
  DetailRequest::default_instance_->InitAsDefaultInstance();
  MinRequest::default_instance_->InitAsDefaultInstance();
  StatusRequest::default_instance_->InitAsDefaultInstance();
  StatusResponse::default_instance_->InitAsDefaultInstance();
  StatusResponse_Status::default_instance_->InitAsDefaultInstance();
  ZhpmRequest::default_instance_->InitAsDefaultInstance();
  ZhpmResponse::default_instance_->InitAsDefaultInstance();
  ZhpmResponse_Zhpm::default_instance_->InitAsDefaultInstance();
  ZhpmResponse_Zhpm_ZhpmStock::default_instance_->InitAsDefaultInstance();
  CandleRequest::default_instance_->InitAsDefaultInstance();
  StockRequest::default_instance_->InitAsDefaultInstance();
  FinanceRequest::default_instance_->InitAsDefaultInstance();
  WeightRequest::default_instance_->InitAsDefaultInstance();
  BlockRequest::default_instance_->InitAsDefaultInstance();
  LargeRequest::default_instance_->InitAsDefaultInstance();
  PriceRequest::default_instance_->InitAsDefaultInstance();
  PriceResponse::default_instance_->InitAsDefaultInstance();
  PriceResponse_Price::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_communication_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_communication_2eproto {
  StaticDescriptorInitializer_communication_2eproto() {
    protobuf_AddDesc_communication_2eproto();
  }
} static_descriptor_initializer_communication_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RealTimeRequest::kStockcodeFieldNumber;
#endif  // !_MSC_VER

RealTimeRequest::RealTimeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RealTimeRequest::InitAsDefaultInstance() {
}

RealTimeRequest::RealTimeRequest(const RealTimeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RealTimeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RealTimeRequest::~RealTimeRequest() {
  SharedDtor();
}

void RealTimeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RealTimeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealTimeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RealTimeRequest_descriptor_;
}

const RealTimeRequest& RealTimeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

RealTimeRequest* RealTimeRequest::default_instance_ = NULL;

RealTimeRequest* RealTimeRequest::New() const {
  return new RealTimeRequest;
}

void RealTimeRequest::Clear() {
  stockcode_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RealTimeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string stockcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stockcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockcode(0).data(), this->stockcode(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stockcode;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RealTimeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string stockcode = 1;
  for (int i = 0; i < this->stockcode_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->stockcode(i).data(), this->stockcode(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stockcode(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RealTimeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string stockcode = 1;
  for (int i = 0; i < this->stockcode_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode(i).data(), this->stockcode(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->stockcode(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RealTimeRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated string stockcode = 1;
  total_size += 1 * this->stockcode_size();
  for (int i = 0; i < this->stockcode_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stockcode(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealTimeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RealTimeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RealTimeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RealTimeRequest::MergeFrom(const RealTimeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  stockcode_.MergeFrom(from.stockcode_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RealTimeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealTimeRequest::CopyFrom(const RealTimeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealTimeRequest::IsInitialized() const {
  
  return true;
}

void RealTimeRequest::Swap(RealTimeRequest* other) {
  if (other != this) {
    stockcode_.Swap(&other->stockcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RealTimeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RealTimeRequest_descriptor_;
  metadata.reflection = RealTimeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RealTimeResponse_RealTime::kQuotetimeFieldNumber;
const int RealTimeResponse_RealTime::kMarkettimeFieldNumber;
const int RealTimeResponse_RealTime::kSecucodeFieldNumber;
const int RealTimeResponse_RealTime::kExchangeFieldNumber;
const int RealTimeResponse_RealTime::kTpFieldNumber;
const int RealTimeResponse_RealTime::kOpenFieldNumber;
const int RealTimeResponse_RealTime::kHighFieldNumber;
const int RealTimeResponse_RealTime::kLowFieldNumber;
const int RealTimeResponse_RealTime::kCloseFieldNumber;
const int RealTimeResponse_RealTime::kVolFieldNumber;
const int RealTimeResponse_RealTime::kAmtFieldNumber;
const int RealTimeResponse_RealTime::kAskprice5FieldNumber;
const int RealTimeResponse_RealTime::kAskvol5FieldNumber;
const int RealTimeResponse_RealTime::kAskprice4FieldNumber;
const int RealTimeResponse_RealTime::kAskvol4FieldNumber;
const int RealTimeResponse_RealTime::kAskprice3FieldNumber;
const int RealTimeResponse_RealTime::kAskvol3FieldNumber;
const int RealTimeResponse_RealTime::kAskprice2FieldNumber;
const int RealTimeResponse_RealTime::kAskvol2FieldNumber;
const int RealTimeResponse_RealTime::kAskprice1FieldNumber;
const int RealTimeResponse_RealTime::kAskvol1FieldNumber;
const int RealTimeResponse_RealTime::kBidprice1FieldNumber;
const int RealTimeResponse_RealTime::kBidvol1FieldNumber;
const int RealTimeResponse_RealTime::kBidprice2FieldNumber;
const int RealTimeResponse_RealTime::kBidvol2FieldNumber;
const int RealTimeResponse_RealTime::kBidprice3FieldNumber;
const int RealTimeResponse_RealTime::kBidvol3FieldNumber;
const int RealTimeResponse_RealTime::kBidprice4FieldNumber;
const int RealTimeResponse_RealTime::kBidvol4FieldNumber;
const int RealTimeResponse_RealTime::kBidprice5FieldNumber;
const int RealTimeResponse_RealTime::kBidvol5FieldNumber;
const int RealTimeResponse_RealTime::kZfFieldNumber;
const int RealTimeResponse_RealTime::kZdFieldNumber;
const int RealTimeResponse_RealTime::kZtFieldNumber;
const int RealTimeResponse_RealTime::kDtFieldNumber;
const int RealTimeResponse_RealTime::kHsFieldNumber;
const int RealTimeResponse_RealTime::kAmpFieldNumber;
const int RealTimeResponse_RealTime::kLbFieldNumber;
const int RealTimeResponse_RealTime::kWbFieldNumber;
const int RealTimeResponse_RealTime::kWcFieldNumber;
const int RealTimeResponse_RealTime::kNwpFieldNumber;
const int RealTimeResponse_RealTime::kNpFieldNumber;
const int RealTimeResponse_RealTime::kWpFieldNumber;
const int RealTimeResponse_RealTime::kSpFieldNumber;
const int RealTimeResponse_RealTime::kXsFieldNumber;
const int RealTimeResponse_RealTime::kActualxsFieldNumber;
const int RealTimeResponse_RealTime::kXeFieldNumber;
const int RealTimeResponse_RealTime::kDetailidFieldNumber;
const int RealTimeResponse_RealTime::kSgFieldNumber;
const int RealTimeResponse_RealTime::kAFieldNumber;
const int RealTimeResponse_RealTime::kBFieldNumber;
const int RealTimeResponse_RealTime::kFundFieldNumber;
const int RealTimeResponse_RealTime::kWarrantFieldNumber;
const int RealTimeResponse_RealTime::kBondFieldNumber;
const int RealTimeResponse_RealTime::kGovbondFieldNumber;
const int RealTimeResponse_RealTime::kZjFieldNumber;
const int RealTimeResponse_RealTime::kPjFieldNumber;
const int RealTimeResponse_RealTime::kDjFieldNumber;
const int RealTimeResponse_RealTime::kZjaFieldNumber;
const int RealTimeResponse_RealTime::kPjaFieldNumber;
const int RealTimeResponse_RealTime::kDjaFieldNumber;
const int RealTimeResponse_RealTime::kZjbFieldNumber;
const int RealTimeResponse_RealTime::kPjbFieldNumber;
const int RealTimeResponse_RealTime::kDjbFieldNumber;
const int RealTimeResponse_RealTime::kZjfundFieldNumber;
const int RealTimeResponse_RealTime::kPjfundFieldNumber;
const int RealTimeResponse_RealTime::kDjfundFieldNumber;
const int RealTimeResponse_RealTime::kZjmidFieldNumber;
const int RealTimeResponse_RealTime::kPjmidFieldNumber;
const int RealTimeResponse_RealTime::kDjmidFieldNumber;
const int RealTimeResponse_RealTime::kZjtradFieldNumber;
const int RealTimeResponse_RealTime::kPjtradFieldNumber;
const int RealTimeResponse_RealTime::kDjtradFieldNumber;
const int RealTimeResponse_RealTime::kDpdksp1FieldNumber;
const int RealTimeResponse_RealTime::kDpdkspFieldNumber;
const int RealTimeResponse_RealTime::kDpdkbp1FieldNumber;
const int RealTimeResponse_RealTime::kDpdkbpFieldNumber;
const int RealTimeResponse_RealTime::kLeadingindexFieldNumber;
#endif  // !_MSC_VER

RealTimeResponse_RealTime::RealTimeResponse_RealTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RealTimeResponse_RealTime::InitAsDefaultInstance() {
}

RealTimeResponse_RealTime::RealTimeResponse_RealTime(const RealTimeResponse_RealTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RealTimeResponse_RealTime::SharedCtor() {
  _cached_size_ = 0;
  quotetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  markettime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secucode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchange_ = 0;
  tp_ = false;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  vol_ = GOOGLE_LONGLONG(0);
  amt_ = 0;
  askprice5_ = 0;
  askvol5_ = 0;
  askprice4_ = 0;
  askvol4_ = 0;
  askprice3_ = 0;
  askvol3_ = 0;
  askprice2_ = 0;
  askvol2_ = 0;
  askprice1_ = 0;
  askvol1_ = 0;
  bidprice1_ = 0;
  bidvol1_ = 0;
  bidprice2_ = 0;
  bidvol2_ = 0;
  bidprice3_ = 0;
  bidvol3_ = 0;
  bidprice4_ = 0;
  bidvol4_ = 0;
  bidprice5_ = 0;
  bidvol5_ = 0;
  zf_ = 0;
  zd_ = 0;
  zt_ = 0;
  dt_ = 0;
  hs_ = 0;
  amp_ = 0;
  lb_ = 0;
  wb_ = 0;
  wc_ = 0;
  nwp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  np_ = 0;
  wp_ = 0;
  sp_ = 0;
  xs_ = 0;
  actualxs_ = 0;
  xe_ = 0;
  detailid_ = 0;
  sg_ = false;
  a_ = 0;
  b_ = 0;
  fund_ = 0;
  warrant_ = 0;
  bond_ = 0;
  govbond_ = 0;
  zj_ = 0;
  pj_ = 0;
  dj_ = 0;
  zja_ = 0;
  pja_ = 0;
  dja_ = 0;
  zjb_ = 0;
  pjb_ = 0;
  djb_ = 0;
  zjfund_ = 0;
  pjfund_ = 0;
  djfund_ = 0;
  zjmid_ = 0;
  pjmid_ = 0;
  djmid_ = 0;
  zjtrad_ = 0;
  pjtrad_ = 0;
  djtrad_ = 0;
  dpdksp1_ = 0;
  dpdksp_ = 0;
  dpdkbp1_ = 0;
  dpdkbp_ = 0;
  leadingindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RealTimeResponse_RealTime::~RealTimeResponse_RealTime() {
  SharedDtor();
}

void RealTimeResponse_RealTime::SharedDtor() {
  if (quotetime_ != &::google::protobuf::internal::kEmptyString) {
    delete quotetime_;
  }
  if (markettime_ != &::google::protobuf::internal::kEmptyString) {
    delete markettime_;
  }
  if (secucode_ != &::google::protobuf::internal::kEmptyString) {
    delete secucode_;
  }
  if (nwp_ != &::google::protobuf::internal::kEmptyString) {
    delete nwp_;
  }
  if (this != default_instance_) {
  }
}

void RealTimeResponse_RealTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealTimeResponse_RealTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RealTimeResponse_RealTime_descriptor_;
}

const RealTimeResponse_RealTime& RealTimeResponse_RealTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

RealTimeResponse_RealTime* RealTimeResponse_RealTime::default_instance_ = NULL;

RealTimeResponse_RealTime* RealTimeResponse_RealTime::New() const {
  return new RealTimeResponse_RealTime;
}

void RealTimeResponse_RealTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_quotetime()) {
      if (quotetime_ != &::google::protobuf::internal::kEmptyString) {
        quotetime_->clear();
      }
    }
    if (has_markettime()) {
      if (markettime_ != &::google::protobuf::internal::kEmptyString) {
        markettime_->clear();
      }
    }
    if (has_secucode()) {
      if (secucode_ != &::google::protobuf::internal::kEmptyString) {
        secucode_->clear();
      }
    }
    exchange_ = 0;
    tp_ = false;
    open_ = 0;
    high_ = 0;
    low_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    close_ = 0;
    vol_ = GOOGLE_LONGLONG(0);
    amt_ = 0;
    askprice5_ = 0;
    askvol5_ = 0;
    askprice4_ = 0;
    askvol4_ = 0;
    askprice3_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    askvol3_ = 0;
    askprice2_ = 0;
    askvol2_ = 0;
    askprice1_ = 0;
    askvol1_ = 0;
    bidprice1_ = 0;
    bidvol1_ = 0;
    bidprice2_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    bidvol2_ = 0;
    bidprice3_ = 0;
    bidvol3_ = 0;
    bidprice4_ = 0;
    bidvol4_ = 0;
    bidprice5_ = 0;
    bidvol5_ = 0;
    zf_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    zd_ = 0;
    zt_ = 0;
    dt_ = 0;
    hs_ = 0;
    amp_ = 0;
    lb_ = 0;
    wb_ = 0;
    wc_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_nwp()) {
      if (nwp_ != &::google::protobuf::internal::kEmptyString) {
        nwp_->clear();
      }
    }
    np_ = 0;
    wp_ = 0;
    sp_ = 0;
    xs_ = 0;
    actualxs_ = 0;
    xe_ = 0;
    detailid_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    sg_ = false;
    a_ = 0;
    b_ = 0;
    fund_ = 0;
    warrant_ = 0;
    bond_ = 0;
    govbond_ = 0;
    zj_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    pj_ = 0;
    dj_ = 0;
    zja_ = 0;
    pja_ = 0;
    dja_ = 0;
    zjb_ = 0;
    pjb_ = 0;
    djb_ = 0;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    zjfund_ = 0;
    pjfund_ = 0;
    djfund_ = 0;
    zjmid_ = 0;
    pjmid_ = 0;
    djmid_ = 0;
    zjtrad_ = 0;
    pjtrad_ = 0;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    djtrad_ = 0;
    dpdksp1_ = 0;
    dpdksp_ = 0;
    dpdkbp1_ = 0;
    dpdkbp_ = 0;
    leadingindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RealTimeResponse_RealTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string quotetime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quotetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->quotetime().data(), this->quotetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_markettime;
        break;
      }
      
      // required string markettime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_markettime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_markettime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->markettime().data(), this->markettime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_secucode;
        break;
      }
      
      // required string secucode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secucode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secucode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secucode().data(), this->secucode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exchange;
        break;
      }
      
      // required int32 exchange = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tp;
        break;
      }
      
      // required bool tp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tp_)));
          set_has_tp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_open;
        break;
      }
      
      // required float open = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_high;
        break;
      }
      
      // required float high = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_low;
        break;
      }
      
      // required float low = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_close;
        break;
      }
      
      // required float close = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vol;
        break;
      }
      
      // required int64 vol = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vol_)));
          set_has_vol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_amt;
        break;
      }
      
      // required double amt = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_amt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amt_)));
          set_has_amt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_askprice5;
        break;
      }
      
      // optional float askprice5 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_askprice5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &askprice5_)));
          set_has_askprice5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_askvol5;
        break;
      }
      
      // optional int32 askvol5 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_askvol5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvol5_)));
          set_has_askvol5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_askprice4;
        break;
      }
      
      // optional float askprice4 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_askprice4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &askprice4_)));
          set_has_askprice4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_askvol4;
        break;
      }
      
      // optional int32 askvol4 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_askvol4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvol4_)));
          set_has_askvol4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_askprice3;
        break;
      }
      
      // required float askprice3 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_askprice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &askprice3_)));
          set_has_askprice3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_askvol3;
        break;
      }
      
      // required int32 askvol3 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_askvol3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvol3_)));
          set_has_askvol3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_askprice2;
        break;
      }
      
      // required float askprice2 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_askprice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &askprice2_)));
          set_has_askprice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_askvol2;
        break;
      }
      
      // required int32 askvol2 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_askvol2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvol2_)));
          set_has_askvol2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_askprice1;
        break;
      }
      
      // required float askprice1 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_askprice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &askprice1_)));
          set_has_askprice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_askvol1;
        break;
      }
      
      // required int32 askvol1 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_askvol1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvol1_)));
          set_has_askvol1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_bidprice1;
        break;
      }
      
      // required float bidprice1 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bidprice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidprice1_)));
          set_has_bidprice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_bidvol1;
        break;
      }
      
      // required int32 bidvol1 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidvol1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvol1_)));
          set_has_bidvol1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_bidprice2;
        break;
      }
      
      // required float bidprice2 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bidprice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidprice2_)));
          set_has_bidprice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_bidvol2;
        break;
      }
      
      // required int32 bidvol2 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidvol2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvol2_)));
          set_has_bidvol2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_bidprice3;
        break;
      }
      
      // required float bidprice3 = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bidprice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidprice3_)));
          set_has_bidprice3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_bidvol3;
        break;
      }
      
      // required int32 bidvol3 = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidvol3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvol3_)));
          set_has_bidvol3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_bidprice4;
        break;
      }
      
      // optional float bidprice4 = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bidprice4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidprice4_)));
          set_has_bidprice4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_bidvol4;
        break;
      }
      
      // optional int32 bidvol4 = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidvol4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvol4_)));
          set_has_bidvol4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_bidprice5;
        break;
      }
      
      // optional float bidprice5 = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bidprice5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidprice5_)));
          set_has_bidprice5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_bidvol5;
        break;
      }
      
      // optional int32 bidvol5 = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidvol5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvol5_)));
          set_has_bidvol5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(261)) goto parse_zf;
        break;
      }
      
      // required float zf = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zf_)));
          set_has_zf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(269)) goto parse_zd;
        break;
      }
      
      // required float zd = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zd_)));
          set_has_zd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(277)) goto parse_zt;
        break;
      }
      
      // required float zt = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zt_)));
          set_has_zt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(285)) goto parse_dt;
        break;
      }
      
      // required float dt = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dt_)));
          set_has_dt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(293)) goto parse_hs;
        break;
      }
      
      // required float hs = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hs_)));
          set_has_hs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(301)) goto parse_amp;
        break;
      }
      
      // required float amp = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_amp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amp_)));
          set_has_amp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(309)) goto parse_lb;
        break;
      }
      
      // required float lb = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lb_)));
          set_has_lb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(317)) goto parse_wb;
        break;
      }
      
      // required float wb = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wb_)));
          set_has_wb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_wc;
        break;
      }
      
      // required int32 wc = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wc_)));
          set_has_wc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_nwp;
        break;
      }
      
      // required string nwp = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nwp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nwp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nwp().data(), this->nwp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_np;
        break;
      }
      
      // required int32 np = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_np:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &np_)));
          set_has_np();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_wp;
        break;
      }
      
      // required int32 wp = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wp_)));
          set_has_wp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_sp;
        break;
      }
      
      // required int32 sp = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sp_)));
          set_has_sp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_xs;
        break;
      }
      
      // required int32 xs = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xs_)));
          set_has_xs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_actualxs;
        break;
      }
      
      // required int32 actualxs = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actualxs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actualxs_)));
          set_has_actualxs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(381)) goto parse_xe;
        break;
      }
      
      // required float xe = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xe_)));
          set_has_xe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_detailid;
        break;
      }
      
      // required int32 detailid = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_detailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &detailid_)));
          set_has_detailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_sg;
        break;
      }
      
      // required bool sg = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sg_)));
          set_has_sg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(401)) goto parse_a;
        break;
      }
      
      // optional double a = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(409)) goto parse_b;
        break;
      }
      
      // optional double b = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(417)) goto parse_fund;
        break;
      }
      
      // optional double fund = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fund:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fund_)));
          set_has_fund();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(425)) goto parse_warrant;
        break;
      }
      
      // optional double warrant = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_warrant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &warrant_)));
          set_has_warrant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(433)) goto parse_bond;
        break;
      }
      
      // optional double bond = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bond_)));
          set_has_bond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(441)) goto parse_govbond;
        break;
      }
      
      // optional double govbond = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_govbond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &govbond_)));
          set_has_govbond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_zj;
        break;
      }
      
      // optional int32 zj = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zj_)));
          set_has_zj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_pj;
        break;
      }
      
      // optional int32 pj = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pj_)));
          set_has_pj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_dj;
        break;
      }
      
      // optional int32 dj = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dj_)));
          set_has_dj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_zja;
        break;
      }
      
      // optional int32 zja = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zja:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zja_)));
          set_has_zja();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_pja;
        break;
      }
      
      // optional int32 pja = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pja:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pja_)));
          set_has_pja();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_dja;
        break;
      }
      
      // optional int32 dja = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dja:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dja_)));
          set_has_dja();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_zjb;
        break;
      }
      
      // optional int32 zjb = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zjb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zjb_)));
          set_has_zjb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_pjb;
        break;
      }
      
      // optional int32 pjb = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pjb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pjb_)));
          set_has_pjb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_djb;
        break;
      }
      
      // optional int32 djb = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_djb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &djb_)));
          set_has_djb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_zjfund;
        break;
      }
      
      // optional int32 zjfund = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zjfund:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zjfund_)));
          set_has_zjfund();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_pjfund;
        break;
      }
      
      // optional int32 pjfund = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pjfund:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pjfund_)));
          set_has_pjfund();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_djfund;
        break;
      }
      
      // optional int32 djfund = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_djfund:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &djfund_)));
          set_has_djfund();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_zjmid;
        break;
      }
      
      // optional int32 zjmid = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zjmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zjmid_)));
          set_has_zjmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_pjmid;
        break;
      }
      
      // optional int32 pjmid = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pjmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pjmid_)));
          set_has_pjmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_djmid;
        break;
      }
      
      // optional int32 djmid = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_djmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &djmid_)));
          set_has_djmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_zjtrad;
        break;
      }
      
      // optional int32 zjtrad = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zjtrad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zjtrad_)));
          set_has_zjtrad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_pjtrad;
        break;
      }
      
      // optional int32 pjtrad = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pjtrad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pjtrad_)));
          set_has_pjtrad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_djtrad;
        break;
      }
      
      // optional int32 djtrad = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_djtrad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &djtrad_)));
          set_has_djtrad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(597)) goto parse_dpdksp1;
        break;
      }
      
      // optional float dpdksp1 = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dpdksp1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dpdksp1_)));
          set_has_dpdksp1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(605)) goto parse_dpdksp;
        break;
      }
      
      // optional float dpdksp = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dpdksp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dpdksp_)));
          set_has_dpdksp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(613)) goto parse_dpdkbp1;
        break;
      }
      
      // optional float dpdkbp1 = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dpdkbp1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dpdkbp1_)));
          set_has_dpdkbp1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(621)) goto parse_dpdkbp;
        break;
      }
      
      // optional float dpdkbp = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dpdkbp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dpdkbp_)));
          set_has_dpdkbp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(629)) goto parse_leadingindex;
        break;
      }
      
      // optional float leadingindex = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leadingindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leadingindex_)));
          set_has_leadingindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RealTimeResponse_RealTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string quotetime = 1;
  if (has_quotetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quotetime().data(), this->quotetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->quotetime(), output);
  }
  
  // required string markettime = 2;
  if (has_markettime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->markettime().data(), this->markettime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->markettime(), output);
  }
  
  // required string secucode = 3;
  if (has_secucode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secucode().data(), this->secucode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->secucode(), output);
  }
  
  // required int32 exchange = 4;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exchange(), output);
  }
  
  // required bool tp = 5;
  if (has_tp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->tp(), output);
  }
  
  // required float open = 6;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->open(), output);
  }
  
  // required float high = 7;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->high(), output);
  }
  
  // required float low = 8;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->low(), output);
  }
  
  // required float close = 9;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->close(), output);
  }
  
  // required int64 vol = 10;
  if (has_vol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->vol(), output);
  }
  
  // required double amt = 11;
  if (has_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->amt(), output);
  }
  
  // optional float askprice5 = 12;
  if (has_askprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->askprice5(), output);
  }
  
  // optional int32 askvol5 = 13;
  if (has_askvol5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->askvol5(), output);
  }
  
  // optional float askprice4 = 14;
  if (has_askprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->askprice4(), output);
  }
  
  // optional int32 askvol4 = 15;
  if (has_askvol4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->askvol4(), output);
  }
  
  // required float askprice3 = 16;
  if (has_askprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->askprice3(), output);
  }
  
  // required int32 askvol3 = 17;
  if (has_askvol3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->askvol3(), output);
  }
  
  // required float askprice2 = 18;
  if (has_askprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->askprice2(), output);
  }
  
  // required int32 askvol2 = 19;
  if (has_askvol2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->askvol2(), output);
  }
  
  // required float askprice1 = 20;
  if (has_askprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->askprice1(), output);
  }
  
  // required int32 askvol1 = 21;
  if (has_askvol1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->askvol1(), output);
  }
  
  // required float bidprice1 = 22;
  if (has_bidprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->bidprice1(), output);
  }
  
  // required int32 bidvol1 = 23;
  if (has_bidvol1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->bidvol1(), output);
  }
  
  // required float bidprice2 = 24;
  if (has_bidprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->bidprice2(), output);
  }
  
  // required int32 bidvol2 = 25;
  if (has_bidvol2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->bidvol2(), output);
  }
  
  // required float bidprice3 = 26;
  if (has_bidprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->bidprice3(), output);
  }
  
  // required int32 bidvol3 = 27;
  if (has_bidvol3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->bidvol3(), output);
  }
  
  // optional float bidprice4 = 28;
  if (has_bidprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->bidprice4(), output);
  }
  
  // optional int32 bidvol4 = 29;
  if (has_bidvol4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->bidvol4(), output);
  }
  
  // optional float bidprice5 = 30;
  if (has_bidprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->bidprice5(), output);
  }
  
  // optional int32 bidvol5 = 31;
  if (has_bidvol5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->bidvol5(), output);
  }
  
  // required float zf = 32;
  if (has_zf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->zf(), output);
  }
  
  // required float zd = 33;
  if (has_zd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->zd(), output);
  }
  
  // required float zt = 34;
  if (has_zt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->zt(), output);
  }
  
  // required float dt = 35;
  if (has_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->dt(), output);
  }
  
  // required float hs = 36;
  if (has_hs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->hs(), output);
  }
  
  // required float amp = 37;
  if (has_amp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->amp(), output);
  }
  
  // required float lb = 38;
  if (has_lb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->lb(), output);
  }
  
  // required float wb = 39;
  if (has_wb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->wb(), output);
  }
  
  // required int32 wc = 40;
  if (has_wc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->wc(), output);
  }
  
  // required string nwp = 41;
  if (has_nwp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nwp().data(), this->nwp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      41, this->nwp(), output);
  }
  
  // required int32 np = 42;
  if (has_np()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->np(), output);
  }
  
  // required int32 wp = 43;
  if (has_wp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->wp(), output);
  }
  
  // required int32 sp = 44;
  if (has_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->sp(), output);
  }
  
  // required int32 xs = 45;
  if (has_xs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->xs(), output);
  }
  
  // required int32 actualxs = 46;
  if (has_actualxs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->actualxs(), output);
  }
  
  // required float xe = 47;
  if (has_xe()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->xe(), output);
  }
  
  // required int32 detailid = 48;
  if (has_detailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->detailid(), output);
  }
  
  // required bool sg = 49;
  if (has_sg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(49, this->sg(), output);
  }
  
  // optional double a = 50;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->a(), output);
  }
  
  // optional double b = 51;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(51, this->b(), output);
  }
  
  // optional double fund = 52;
  if (has_fund()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(52, this->fund(), output);
  }
  
  // optional double warrant = 53;
  if (has_warrant()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(53, this->warrant(), output);
  }
  
  // optional double bond = 54;
  if (has_bond()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(54, this->bond(), output);
  }
  
  // optional double govbond = 55;
  if (has_govbond()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(55, this->govbond(), output);
  }
  
  // optional int32 zj = 56;
  if (has_zj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->zj(), output);
  }
  
  // optional int32 pj = 57;
  if (has_pj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->pj(), output);
  }
  
  // optional int32 dj = 58;
  if (has_dj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->dj(), output);
  }
  
  // optional int32 zja = 59;
  if (has_zja()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->zja(), output);
  }
  
  // optional int32 pja = 60;
  if (has_pja()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->pja(), output);
  }
  
  // optional int32 dja = 61;
  if (has_dja()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->dja(), output);
  }
  
  // optional int32 zjb = 62;
  if (has_zjb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->zjb(), output);
  }
  
  // optional int32 pjb = 63;
  if (has_pjb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->pjb(), output);
  }
  
  // optional int32 djb = 64;
  if (has_djb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->djb(), output);
  }
  
  // optional int32 zjfund = 65;
  if (has_zjfund()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->zjfund(), output);
  }
  
  // optional int32 pjfund = 66;
  if (has_pjfund()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->pjfund(), output);
  }
  
  // optional int32 djfund = 67;
  if (has_djfund()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->djfund(), output);
  }
  
  // optional int32 zjmid = 68;
  if (has_zjmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->zjmid(), output);
  }
  
  // optional int32 pjmid = 69;
  if (has_pjmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->pjmid(), output);
  }
  
  // optional int32 djmid = 70;
  if (has_djmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->djmid(), output);
  }
  
  // optional int32 zjtrad = 71;
  if (has_zjtrad()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->zjtrad(), output);
  }
  
  // optional int32 pjtrad = 72;
  if (has_pjtrad()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->pjtrad(), output);
  }
  
  // optional int32 djtrad = 73;
  if (has_djtrad()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->djtrad(), output);
  }
  
  // optional float dpdksp1 = 74;
  if (has_dpdksp1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(74, this->dpdksp1(), output);
  }
  
  // optional float dpdksp = 75;
  if (has_dpdksp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(75, this->dpdksp(), output);
  }
  
  // optional float dpdkbp1 = 76;
  if (has_dpdkbp1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(76, this->dpdkbp1(), output);
  }
  
  // optional float dpdkbp = 77;
  if (has_dpdkbp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(77, this->dpdkbp(), output);
  }
  
  // optional float leadingindex = 78;
  if (has_leadingindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(78, this->leadingindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RealTimeResponse_RealTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string quotetime = 1;
  if (has_quotetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quotetime().data(), this->quotetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->quotetime(), target);
  }
  
  // required string markettime = 2;
  if (has_markettime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->markettime().data(), this->markettime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->markettime(), target);
  }
  
  // required string secucode = 3;
  if (has_secucode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secucode().data(), this->secucode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->secucode(), target);
  }
  
  // required int32 exchange = 4;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exchange(), target);
  }
  
  // required bool tp = 5;
  if (has_tp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->tp(), target);
  }
  
  // required float open = 6;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->open(), target);
  }
  
  // required float high = 7;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->high(), target);
  }
  
  // required float low = 8;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->low(), target);
  }
  
  // required float close = 9;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->close(), target);
  }
  
  // required int64 vol = 10;
  if (has_vol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->vol(), target);
  }
  
  // required double amt = 11;
  if (has_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->amt(), target);
  }
  
  // optional float askprice5 = 12;
  if (has_askprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->askprice5(), target);
  }
  
  // optional int32 askvol5 = 13;
  if (has_askvol5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->askvol5(), target);
  }
  
  // optional float askprice4 = 14;
  if (has_askprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->askprice4(), target);
  }
  
  // optional int32 askvol4 = 15;
  if (has_askvol4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->askvol4(), target);
  }
  
  // required float askprice3 = 16;
  if (has_askprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->askprice3(), target);
  }
  
  // required int32 askvol3 = 17;
  if (has_askvol3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->askvol3(), target);
  }
  
  // required float askprice2 = 18;
  if (has_askprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->askprice2(), target);
  }
  
  // required int32 askvol2 = 19;
  if (has_askvol2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->askvol2(), target);
  }
  
  // required float askprice1 = 20;
  if (has_askprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->askprice1(), target);
  }
  
  // required int32 askvol1 = 21;
  if (has_askvol1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->askvol1(), target);
  }
  
  // required float bidprice1 = 22;
  if (has_bidprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->bidprice1(), target);
  }
  
  // required int32 bidvol1 = 23;
  if (has_bidvol1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->bidvol1(), target);
  }
  
  // required float bidprice2 = 24;
  if (has_bidprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->bidprice2(), target);
  }
  
  // required int32 bidvol2 = 25;
  if (has_bidvol2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->bidvol2(), target);
  }
  
  // required float bidprice3 = 26;
  if (has_bidprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->bidprice3(), target);
  }
  
  // required int32 bidvol3 = 27;
  if (has_bidvol3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->bidvol3(), target);
  }
  
  // optional float bidprice4 = 28;
  if (has_bidprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->bidprice4(), target);
  }
  
  // optional int32 bidvol4 = 29;
  if (has_bidvol4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->bidvol4(), target);
  }
  
  // optional float bidprice5 = 30;
  if (has_bidprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->bidprice5(), target);
  }
  
  // optional int32 bidvol5 = 31;
  if (has_bidvol5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->bidvol5(), target);
  }
  
  // required float zf = 32;
  if (has_zf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->zf(), target);
  }
  
  // required float zd = 33;
  if (has_zd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->zd(), target);
  }
  
  // required float zt = 34;
  if (has_zt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->zt(), target);
  }
  
  // required float dt = 35;
  if (has_dt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->dt(), target);
  }
  
  // required float hs = 36;
  if (has_hs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->hs(), target);
  }
  
  // required float amp = 37;
  if (has_amp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->amp(), target);
  }
  
  // required float lb = 38;
  if (has_lb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->lb(), target);
  }
  
  // required float wb = 39;
  if (has_wb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->wb(), target);
  }
  
  // required int32 wc = 40;
  if (has_wc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->wc(), target);
  }
  
  // required string nwp = 41;
  if (has_nwp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nwp().data(), this->nwp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->nwp(), target);
  }
  
  // required int32 np = 42;
  if (has_np()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->np(), target);
  }
  
  // required int32 wp = 43;
  if (has_wp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->wp(), target);
  }
  
  // required int32 sp = 44;
  if (has_sp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->sp(), target);
  }
  
  // required int32 xs = 45;
  if (has_xs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->xs(), target);
  }
  
  // required int32 actualxs = 46;
  if (has_actualxs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->actualxs(), target);
  }
  
  // required float xe = 47;
  if (has_xe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(47, this->xe(), target);
  }
  
  // required int32 detailid = 48;
  if (has_detailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->detailid(), target);
  }
  
  // required bool sg = 49;
  if (has_sg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(49, this->sg(), target);
  }
  
  // optional double a = 50;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->a(), target);
  }
  
  // optional double b = 51;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(51, this->b(), target);
  }
  
  // optional double fund = 52;
  if (has_fund()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(52, this->fund(), target);
  }
  
  // optional double warrant = 53;
  if (has_warrant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(53, this->warrant(), target);
  }
  
  // optional double bond = 54;
  if (has_bond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(54, this->bond(), target);
  }
  
  // optional double govbond = 55;
  if (has_govbond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(55, this->govbond(), target);
  }
  
  // optional int32 zj = 56;
  if (has_zj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->zj(), target);
  }
  
  // optional int32 pj = 57;
  if (has_pj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->pj(), target);
  }
  
  // optional int32 dj = 58;
  if (has_dj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->dj(), target);
  }
  
  // optional int32 zja = 59;
  if (has_zja()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->zja(), target);
  }
  
  // optional int32 pja = 60;
  if (has_pja()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->pja(), target);
  }
  
  // optional int32 dja = 61;
  if (has_dja()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->dja(), target);
  }
  
  // optional int32 zjb = 62;
  if (has_zjb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->zjb(), target);
  }
  
  // optional int32 pjb = 63;
  if (has_pjb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->pjb(), target);
  }
  
  // optional int32 djb = 64;
  if (has_djb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->djb(), target);
  }
  
  // optional int32 zjfund = 65;
  if (has_zjfund()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->zjfund(), target);
  }
  
  // optional int32 pjfund = 66;
  if (has_pjfund()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->pjfund(), target);
  }
  
  // optional int32 djfund = 67;
  if (has_djfund()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->djfund(), target);
  }
  
  // optional int32 zjmid = 68;
  if (has_zjmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->zjmid(), target);
  }
  
  // optional int32 pjmid = 69;
  if (has_pjmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->pjmid(), target);
  }
  
  // optional int32 djmid = 70;
  if (has_djmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->djmid(), target);
  }
  
  // optional int32 zjtrad = 71;
  if (has_zjtrad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->zjtrad(), target);
  }
  
  // optional int32 pjtrad = 72;
  if (has_pjtrad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->pjtrad(), target);
  }
  
  // optional int32 djtrad = 73;
  if (has_djtrad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->djtrad(), target);
  }
  
  // optional float dpdksp1 = 74;
  if (has_dpdksp1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(74, this->dpdksp1(), target);
  }
  
  // optional float dpdksp = 75;
  if (has_dpdksp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(75, this->dpdksp(), target);
  }
  
  // optional float dpdkbp1 = 76;
  if (has_dpdkbp1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(76, this->dpdkbp1(), target);
  }
  
  // optional float dpdkbp = 77;
  if (has_dpdkbp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(77, this->dpdkbp(), target);
  }
  
  // optional float leadingindex = 78;
  if (has_leadingindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(78, this->leadingindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RealTimeResponse_RealTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string quotetime = 1;
    if (has_quotetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quotetime());
    }
    
    // required string markettime = 2;
    if (has_markettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->markettime());
    }
    
    // required string secucode = 3;
    if (has_secucode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secucode());
    }
    
    // required int32 exchange = 4;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange());
    }
    
    // required bool tp = 5;
    if (has_tp()) {
      total_size += 1 + 1;
    }
    
    // required float open = 6;
    if (has_open()) {
      total_size += 1 + 4;
    }
    
    // required float high = 7;
    if (has_high()) {
      total_size += 1 + 4;
    }
    
    // required float low = 8;
    if (has_low()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float close = 9;
    if (has_close()) {
      total_size += 1 + 4;
    }
    
    // required int64 vol = 10;
    if (has_vol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vol());
    }
    
    // required double amt = 11;
    if (has_amt()) {
      total_size += 1 + 8;
    }
    
    // optional float askprice5 = 12;
    if (has_askprice5()) {
      total_size += 1 + 4;
    }
    
    // optional int32 askvol5 = 13;
    if (has_askvol5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvol5());
    }
    
    // optional float askprice4 = 14;
    if (has_askprice4()) {
      total_size += 1 + 4;
    }
    
    // optional int32 askvol4 = 15;
    if (has_askvol4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvol4());
    }
    
    // required float askprice3 = 16;
    if (has_askprice3()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 askvol3 = 17;
    if (has_askvol3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvol3());
    }
    
    // required float askprice2 = 18;
    if (has_askprice2()) {
      total_size += 2 + 4;
    }
    
    // required int32 askvol2 = 19;
    if (has_askvol2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvol2());
    }
    
    // required float askprice1 = 20;
    if (has_askprice1()) {
      total_size += 2 + 4;
    }
    
    // required int32 askvol1 = 21;
    if (has_askvol1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvol1());
    }
    
    // required float bidprice1 = 22;
    if (has_bidprice1()) {
      total_size += 2 + 4;
    }
    
    // required int32 bidvol1 = 23;
    if (has_bidvol1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvol1());
    }
    
    // required float bidprice2 = 24;
    if (has_bidprice2()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 bidvol2 = 25;
    if (has_bidvol2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvol2());
    }
    
    // required float bidprice3 = 26;
    if (has_bidprice3()) {
      total_size += 2 + 4;
    }
    
    // required int32 bidvol3 = 27;
    if (has_bidvol3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvol3());
    }
    
    // optional float bidprice4 = 28;
    if (has_bidprice4()) {
      total_size += 2 + 4;
    }
    
    // optional int32 bidvol4 = 29;
    if (has_bidvol4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvol4());
    }
    
    // optional float bidprice5 = 30;
    if (has_bidprice5()) {
      total_size += 2 + 4;
    }
    
    // optional int32 bidvol5 = 31;
    if (has_bidvol5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvol5());
    }
    
    // required float zf = 32;
    if (has_zf()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required float zd = 33;
    if (has_zd()) {
      total_size += 2 + 4;
    }
    
    // required float zt = 34;
    if (has_zt()) {
      total_size += 2 + 4;
    }
    
    // required float dt = 35;
    if (has_dt()) {
      total_size += 2 + 4;
    }
    
    // required float hs = 36;
    if (has_hs()) {
      total_size += 2 + 4;
    }
    
    // required float amp = 37;
    if (has_amp()) {
      total_size += 2 + 4;
    }
    
    // required float lb = 38;
    if (has_lb()) {
      total_size += 2 + 4;
    }
    
    // required float wb = 39;
    if (has_wb()) {
      total_size += 2 + 4;
    }
    
    // required int32 wc = 40;
    if (has_wc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wc());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required string nwp = 41;
    if (has_nwp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nwp());
    }
    
    // required int32 np = 42;
    if (has_np()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->np());
    }
    
    // required int32 wp = 43;
    if (has_wp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wp());
    }
    
    // required int32 sp = 44;
    if (has_sp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sp());
    }
    
    // required int32 xs = 45;
    if (has_xs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xs());
    }
    
    // required int32 actualxs = 46;
    if (has_actualxs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actualxs());
    }
    
    // required float xe = 47;
    if (has_xe()) {
      total_size += 2 + 4;
    }
    
    // required int32 detailid = 48;
    if (has_detailid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->detailid());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // required bool sg = 49;
    if (has_sg()) {
      total_size += 2 + 1;
    }
    
    // optional double a = 50;
    if (has_a()) {
      total_size += 2 + 8;
    }
    
    // optional double b = 51;
    if (has_b()) {
      total_size += 2 + 8;
    }
    
    // optional double fund = 52;
    if (has_fund()) {
      total_size += 2 + 8;
    }
    
    // optional double warrant = 53;
    if (has_warrant()) {
      total_size += 2 + 8;
    }
    
    // optional double bond = 54;
    if (has_bond()) {
      total_size += 2 + 8;
    }
    
    // optional double govbond = 55;
    if (has_govbond()) {
      total_size += 2 + 8;
    }
    
    // optional int32 zj = 56;
    if (has_zj()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zj());
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int32 pj = 57;
    if (has_pj()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pj());
    }
    
    // optional int32 dj = 58;
    if (has_dj()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dj());
    }
    
    // optional int32 zja = 59;
    if (has_zja()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zja());
    }
    
    // optional int32 pja = 60;
    if (has_pja()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pja());
    }
    
    // optional int32 dja = 61;
    if (has_dja()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dja());
    }
    
    // optional int32 zjb = 62;
    if (has_zjb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zjb());
    }
    
    // optional int32 pjb = 63;
    if (has_pjb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pjb());
    }
    
    // optional int32 djb = 64;
    if (has_djb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->djb());
    }
    
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional int32 zjfund = 65;
    if (has_zjfund()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zjfund());
    }
    
    // optional int32 pjfund = 66;
    if (has_pjfund()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pjfund());
    }
    
    // optional int32 djfund = 67;
    if (has_djfund()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->djfund());
    }
    
    // optional int32 zjmid = 68;
    if (has_zjmid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zjmid());
    }
    
    // optional int32 pjmid = 69;
    if (has_pjmid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pjmid());
    }
    
    // optional int32 djmid = 70;
    if (has_djmid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->djmid());
    }
    
    // optional int32 zjtrad = 71;
    if (has_zjtrad()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zjtrad());
    }
    
    // optional int32 pjtrad = 72;
    if (has_pjtrad()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pjtrad());
    }
    
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional int32 djtrad = 73;
    if (has_djtrad()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->djtrad());
    }
    
    // optional float dpdksp1 = 74;
    if (has_dpdksp1()) {
      total_size += 2 + 4;
    }
    
    // optional float dpdksp = 75;
    if (has_dpdksp()) {
      total_size += 2 + 4;
    }
    
    // optional float dpdkbp1 = 76;
    if (has_dpdkbp1()) {
      total_size += 2 + 4;
    }
    
    // optional float dpdkbp = 77;
    if (has_dpdkbp()) {
      total_size += 2 + 4;
    }
    
    // optional float leadingindex = 78;
    if (has_leadingindex()) {
      total_size += 2 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealTimeResponse_RealTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RealTimeResponse_RealTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RealTimeResponse_RealTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RealTimeResponse_RealTime::MergeFrom(const RealTimeResponse_RealTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quotetime()) {
      set_quotetime(from.quotetime());
    }
    if (from.has_markettime()) {
      set_markettime(from.markettime());
    }
    if (from.has_secucode()) {
      set_secucode(from.secucode());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_tp()) {
      set_tp(from.tp());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_vol()) {
      set_vol(from.vol());
    }
    if (from.has_amt()) {
      set_amt(from.amt());
    }
    if (from.has_askprice5()) {
      set_askprice5(from.askprice5());
    }
    if (from.has_askvol5()) {
      set_askvol5(from.askvol5());
    }
    if (from.has_askprice4()) {
      set_askprice4(from.askprice4());
    }
    if (from.has_askvol4()) {
      set_askvol4(from.askvol4());
    }
    if (from.has_askprice3()) {
      set_askprice3(from.askprice3());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_askvol3()) {
      set_askvol3(from.askvol3());
    }
    if (from.has_askprice2()) {
      set_askprice2(from.askprice2());
    }
    if (from.has_askvol2()) {
      set_askvol2(from.askvol2());
    }
    if (from.has_askprice1()) {
      set_askprice1(from.askprice1());
    }
    if (from.has_askvol1()) {
      set_askvol1(from.askvol1());
    }
    if (from.has_bidprice1()) {
      set_bidprice1(from.bidprice1());
    }
    if (from.has_bidvol1()) {
      set_bidvol1(from.bidvol1());
    }
    if (from.has_bidprice2()) {
      set_bidprice2(from.bidprice2());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_bidvol2()) {
      set_bidvol2(from.bidvol2());
    }
    if (from.has_bidprice3()) {
      set_bidprice3(from.bidprice3());
    }
    if (from.has_bidvol3()) {
      set_bidvol3(from.bidvol3());
    }
    if (from.has_bidprice4()) {
      set_bidprice4(from.bidprice4());
    }
    if (from.has_bidvol4()) {
      set_bidvol4(from.bidvol4());
    }
    if (from.has_bidprice5()) {
      set_bidprice5(from.bidprice5());
    }
    if (from.has_bidvol5()) {
      set_bidvol5(from.bidvol5());
    }
    if (from.has_zf()) {
      set_zf(from.zf());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_zd()) {
      set_zd(from.zd());
    }
    if (from.has_zt()) {
      set_zt(from.zt());
    }
    if (from.has_dt()) {
      set_dt(from.dt());
    }
    if (from.has_hs()) {
      set_hs(from.hs());
    }
    if (from.has_amp()) {
      set_amp(from.amp());
    }
    if (from.has_lb()) {
      set_lb(from.lb());
    }
    if (from.has_wb()) {
      set_wb(from.wb());
    }
    if (from.has_wc()) {
      set_wc(from.wc());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_nwp()) {
      set_nwp(from.nwp());
    }
    if (from.has_np()) {
      set_np(from.np());
    }
    if (from.has_wp()) {
      set_wp(from.wp());
    }
    if (from.has_sp()) {
      set_sp(from.sp());
    }
    if (from.has_xs()) {
      set_xs(from.xs());
    }
    if (from.has_actualxs()) {
      set_actualxs(from.actualxs());
    }
    if (from.has_xe()) {
      set_xe(from.xe());
    }
    if (from.has_detailid()) {
      set_detailid(from.detailid());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_sg()) {
      set_sg(from.sg());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_fund()) {
      set_fund(from.fund());
    }
    if (from.has_warrant()) {
      set_warrant(from.warrant());
    }
    if (from.has_bond()) {
      set_bond(from.bond());
    }
    if (from.has_govbond()) {
      set_govbond(from.govbond());
    }
    if (from.has_zj()) {
      set_zj(from.zj());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_pj()) {
      set_pj(from.pj());
    }
    if (from.has_dj()) {
      set_dj(from.dj());
    }
    if (from.has_zja()) {
      set_zja(from.zja());
    }
    if (from.has_pja()) {
      set_pja(from.pja());
    }
    if (from.has_dja()) {
      set_dja(from.dja());
    }
    if (from.has_zjb()) {
      set_zjb(from.zjb());
    }
    if (from.has_pjb()) {
      set_pjb(from.pjb());
    }
    if (from.has_djb()) {
      set_djb(from.djb());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_zjfund()) {
      set_zjfund(from.zjfund());
    }
    if (from.has_pjfund()) {
      set_pjfund(from.pjfund());
    }
    if (from.has_djfund()) {
      set_djfund(from.djfund());
    }
    if (from.has_zjmid()) {
      set_zjmid(from.zjmid());
    }
    if (from.has_pjmid()) {
      set_pjmid(from.pjmid());
    }
    if (from.has_djmid()) {
      set_djmid(from.djmid());
    }
    if (from.has_zjtrad()) {
      set_zjtrad(from.zjtrad());
    }
    if (from.has_pjtrad()) {
      set_pjtrad(from.pjtrad());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_djtrad()) {
      set_djtrad(from.djtrad());
    }
    if (from.has_dpdksp1()) {
      set_dpdksp1(from.dpdksp1());
    }
    if (from.has_dpdksp()) {
      set_dpdksp(from.dpdksp());
    }
    if (from.has_dpdkbp1()) {
      set_dpdkbp1(from.dpdkbp1());
    }
    if (from.has_dpdkbp()) {
      set_dpdkbp(from.dpdkbp());
    }
    if (from.has_leadingindex()) {
      set_leadingindex(from.leadingindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RealTimeResponse_RealTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealTimeResponse_RealTime::CopyFrom(const RealTimeResponse_RealTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealTimeResponse_RealTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x87ff87ff) != 0x87ff87ff) return false;
  if ((_has_bits_[1] & 0x0001ffff) != 0x0001ffff) return false;
  
  return true;
}

void RealTimeResponse_RealTime::Swap(RealTimeResponse_RealTime* other) {
  if (other != this) {
    std::swap(quotetime_, other->quotetime_);
    std::swap(markettime_, other->markettime_);
    std::swap(secucode_, other->secucode_);
    std::swap(exchange_, other->exchange_);
    std::swap(tp_, other->tp_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(close_, other->close_);
    std::swap(vol_, other->vol_);
    std::swap(amt_, other->amt_);
    std::swap(askprice5_, other->askprice5_);
    std::swap(askvol5_, other->askvol5_);
    std::swap(askprice4_, other->askprice4_);
    std::swap(askvol4_, other->askvol4_);
    std::swap(askprice3_, other->askprice3_);
    std::swap(askvol3_, other->askvol3_);
    std::swap(askprice2_, other->askprice2_);
    std::swap(askvol2_, other->askvol2_);
    std::swap(askprice1_, other->askprice1_);
    std::swap(askvol1_, other->askvol1_);
    std::swap(bidprice1_, other->bidprice1_);
    std::swap(bidvol1_, other->bidvol1_);
    std::swap(bidprice2_, other->bidprice2_);
    std::swap(bidvol2_, other->bidvol2_);
    std::swap(bidprice3_, other->bidprice3_);
    std::swap(bidvol3_, other->bidvol3_);
    std::swap(bidprice4_, other->bidprice4_);
    std::swap(bidvol4_, other->bidvol4_);
    std::swap(bidprice5_, other->bidprice5_);
    std::swap(bidvol5_, other->bidvol5_);
    std::swap(zf_, other->zf_);
    std::swap(zd_, other->zd_);
    std::swap(zt_, other->zt_);
    std::swap(dt_, other->dt_);
    std::swap(hs_, other->hs_);
    std::swap(amp_, other->amp_);
    std::swap(lb_, other->lb_);
    std::swap(wb_, other->wb_);
    std::swap(wc_, other->wc_);
    std::swap(nwp_, other->nwp_);
    std::swap(np_, other->np_);
    std::swap(wp_, other->wp_);
    std::swap(sp_, other->sp_);
    std::swap(xs_, other->xs_);
    std::swap(actualxs_, other->actualxs_);
    std::swap(xe_, other->xe_);
    std::swap(detailid_, other->detailid_);
    std::swap(sg_, other->sg_);
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(fund_, other->fund_);
    std::swap(warrant_, other->warrant_);
    std::swap(bond_, other->bond_);
    std::swap(govbond_, other->govbond_);
    std::swap(zj_, other->zj_);
    std::swap(pj_, other->pj_);
    std::swap(dj_, other->dj_);
    std::swap(zja_, other->zja_);
    std::swap(pja_, other->pja_);
    std::swap(dja_, other->dja_);
    std::swap(zjb_, other->zjb_);
    std::swap(pjb_, other->pjb_);
    std::swap(djb_, other->djb_);
    std::swap(zjfund_, other->zjfund_);
    std::swap(pjfund_, other->pjfund_);
    std::swap(djfund_, other->djfund_);
    std::swap(zjmid_, other->zjmid_);
    std::swap(pjmid_, other->pjmid_);
    std::swap(djmid_, other->djmid_);
    std::swap(zjtrad_, other->zjtrad_);
    std::swap(pjtrad_, other->pjtrad_);
    std::swap(djtrad_, other->djtrad_);
    std::swap(dpdksp1_, other->dpdksp1_);
    std::swap(dpdksp_, other->dpdksp_);
    std::swap(dpdkbp1_, other->dpdkbp1_);
    std::swap(dpdkbp_, other->dpdkbp_);
    std::swap(leadingindex_, other->leadingindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RealTimeResponse_RealTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RealTimeResponse_RealTime_descriptor_;
  metadata.reflection = RealTimeResponse_RealTime_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RealTimeResponse::kRealtimeFieldNumber;
#endif  // !_MSC_VER

RealTimeResponse::RealTimeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RealTimeResponse::InitAsDefaultInstance() {
}

RealTimeResponse::RealTimeResponse(const RealTimeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RealTimeResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RealTimeResponse::~RealTimeResponse() {
  SharedDtor();
}

void RealTimeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RealTimeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealTimeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RealTimeResponse_descriptor_;
}

const RealTimeResponse& RealTimeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

RealTimeResponse* RealTimeResponse::default_instance_ = NULL;

RealTimeResponse* RealTimeResponse::New() const {
  return new RealTimeResponse;
}

void RealTimeResponse::Clear() {
  realtime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RealTimeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .quote.RealTimeResponse.RealTime realtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_realtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_realtime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_realtime;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RealTimeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .quote.RealTimeResponse.RealTime realtime = 1;
  for (int i = 0; i < this->realtime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->realtime(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RealTimeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .quote.RealTimeResponse.RealTime realtime = 1;
  for (int i = 0; i < this->realtime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->realtime(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RealTimeResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .quote.RealTimeResponse.RealTime realtime = 1;
  total_size += 1 * this->realtime_size();
  for (int i = 0; i < this->realtime_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->realtime(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealTimeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RealTimeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RealTimeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RealTimeResponse::MergeFrom(const RealTimeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  realtime_.MergeFrom(from.realtime_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RealTimeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealTimeResponse::CopyFrom(const RealTimeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealTimeResponse::IsInitialized() const {
  
  for (int i = 0; i < realtime_size(); i++) {
    if (!this->realtime(i).IsInitialized()) return false;
  }
  return true;
}

void RealTimeResponse::Swap(RealTimeResponse* other) {
  if (other != this) {
    realtime_.Swap(&other->realtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RealTimeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RealTimeResponse_descriptor_;
  metadata.reflection = RealTimeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Grid::kSecucodeFieldNumber;
const int Grid::kExchangeFieldNumber;
const int Grid::kSecutypeFieldNumber;
const int Grid::kTpFieldNumber;
const int Grid::kOpenFieldNumber;
const int Grid::kHighFieldNumber;
const int Grid::kLowFieldNumber;
const int Grid::kCloseFieldNumber;
const int Grid::kVolFieldNumber;
const int Grid::kAmtFieldNumber;
const int Grid::kAskprice1FieldNumber;
const int Grid::kBidprice1FieldNumber;
const int Grid::kZfFieldNumber;
const int Grid::kZdFieldNumber;
const int Grid::kHsFieldNumber;
const int Grid::kAmpFieldNumber;
const int Grid::kLbFieldNumber;
const int Grid::kWbFieldNumber;
const int Grid::kWcFieldNumber;
const int Grid::kXsFieldNumber;
const int Grid::kNwpFieldNumber;
#endif  // !_MSC_VER

Grid::Grid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Grid::InitAsDefaultInstance() {
}

Grid::Grid(const Grid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Grid::SharedCtor() {
  _cached_size_ = 0;
  secucode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchange_ = 0;
  secutype_ = 0;
  tp_ = 0;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  vol_ = GOOGLE_LONGLONG(0);
  amt_ = 0;
  askprice1_ = 0;
  bidprice1_ = 0;
  zf_ = 0;
  zd_ = 0;
  hs_ = 0;
  amp_ = 0;
  lb_ = 0;
  wb_ = 0;
  wc_ = 0;
  xs_ = 0;
  nwp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Grid::~Grid() {
  SharedDtor();
}

void Grid::SharedDtor() {
  if (secucode_ != &::google::protobuf::internal::kEmptyString) {
    delete secucode_;
  }
  if (nwp_ != &::google::protobuf::internal::kEmptyString) {
    delete nwp_;
  }
  if (this != default_instance_) {
  }
}

void Grid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Grid_descriptor_;
}

const Grid& Grid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

Grid* Grid::default_instance_ = NULL;

Grid* Grid::New() const {
  return new Grid;
}

void Grid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_secucode()) {
      if (secucode_ != &::google::protobuf::internal::kEmptyString) {
        secucode_->clear();
      }
    }
    exchange_ = 0;
    secutype_ = 0;
    tp_ = 0;
    open_ = 0;
    high_ = 0;
    low_ = 0;
    close_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vol_ = GOOGLE_LONGLONG(0);
    amt_ = 0;
    askprice1_ = 0;
    bidprice1_ = 0;
    zf_ = 0;
    zd_ = 0;
    hs_ = 0;
    amp_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    lb_ = 0;
    wb_ = 0;
    wc_ = 0;
    xs_ = 0;
    if (has_nwp()) {
      if (nwp_ != &::google::protobuf::internal::kEmptyString) {
        nwp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Grid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string secucode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secucode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secucode().data(), this->secucode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exchange;
        break;
      }
      
      // required int32 exchange = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_secutype;
        break;
      }
      
      // required int32 secutype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_secutype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secutype_)));
          set_has_secutype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tp;
        break;
      }
      
      // required int32 tp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tp_)));
          set_has_tp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_open;
        break;
      }
      
      // required float open = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_high;
        break;
      }
      
      // required float high = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_low;
        break;
      }
      
      // required float low = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_close;
        break;
      }
      
      // required float close = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vol;
        break;
      }
      
      // required int64 vol = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vol_)));
          set_has_vol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_amt;
        break;
      }
      
      // required double amt = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_amt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amt_)));
          set_has_amt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_askprice1;
        break;
      }
      
      // required float askprice1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_askprice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &askprice1_)));
          set_has_askprice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_bidprice1;
        break;
      }
      
      // required float bidprice1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bidprice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidprice1_)));
          set_has_bidprice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_zf;
        break;
      }
      
      // required float zf = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zf_)));
          set_has_zf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_zd;
        break;
      }
      
      // required float zd = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zd_)));
          set_has_zd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_hs;
        break;
      }
      
      // required float hs = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hs_)));
          set_has_hs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_amp;
        break;
      }
      
      // required float amp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_amp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amp_)));
          set_has_amp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_lb;
        break;
      }
      
      // required float lb = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lb_)));
          set_has_lb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_wb;
        break;
      }
      
      // required float wb = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wb_)));
          set_has_wb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_wc;
        break;
      }
      
      // required int32 wc = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wc_)));
          set_has_wc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_xs;
        break;
      }
      
      // required int32 xs = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xs_)));
          set_has_xs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_nwp;
        break;
      }
      
      // required string nwp = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nwp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nwp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nwp().data(), this->nwp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Grid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string secucode = 1;
  if (has_secucode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secucode().data(), this->secucode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->secucode(), output);
  }
  
  // required int32 exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exchange(), output);
  }
  
  // required int32 secutype = 3;
  if (has_secutype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->secutype(), output);
  }
  
  // required int32 tp = 4;
  if (has_tp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tp(), output);
  }
  
  // required float open = 5;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->open(), output);
  }
  
  // required float high = 6;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->high(), output);
  }
  
  // required float low = 7;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->low(), output);
  }
  
  // required float close = 8;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->close(), output);
  }
  
  // required int64 vol = 9;
  if (has_vol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->vol(), output);
  }
  
  // required double amt = 10;
  if (has_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->amt(), output);
  }
  
  // required float askprice1 = 11;
  if (has_askprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->askprice1(), output);
  }
  
  // required float bidprice1 = 12;
  if (has_bidprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->bidprice1(), output);
  }
  
  // required float zf = 13;
  if (has_zf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->zf(), output);
  }
  
  // required float zd = 14;
  if (has_zd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->zd(), output);
  }
  
  // required float hs = 15;
  if (has_hs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->hs(), output);
  }
  
  // required float amp = 16;
  if (has_amp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->amp(), output);
  }
  
  // required float lb = 17;
  if (has_lb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->lb(), output);
  }
  
  // required float wb = 18;
  if (has_wb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->wb(), output);
  }
  
  // required int32 wc = 19;
  if (has_wc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->wc(), output);
  }
  
  // required int32 xs = 20;
  if (has_xs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->xs(), output);
  }
  
  // required string nwp = 21;
  if (has_nwp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nwp().data(), this->nwp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->nwp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Grid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string secucode = 1;
  if (has_secucode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secucode().data(), this->secucode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->secucode(), target);
  }
  
  // required int32 exchange = 2;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exchange(), target);
  }
  
  // required int32 secutype = 3;
  if (has_secutype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->secutype(), target);
  }
  
  // required int32 tp = 4;
  if (has_tp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tp(), target);
  }
  
  // required float open = 5;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->open(), target);
  }
  
  // required float high = 6;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->high(), target);
  }
  
  // required float low = 7;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->low(), target);
  }
  
  // required float close = 8;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->close(), target);
  }
  
  // required int64 vol = 9;
  if (has_vol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->vol(), target);
  }
  
  // required double amt = 10;
  if (has_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->amt(), target);
  }
  
  // required float askprice1 = 11;
  if (has_askprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->askprice1(), target);
  }
  
  // required float bidprice1 = 12;
  if (has_bidprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->bidprice1(), target);
  }
  
  // required float zf = 13;
  if (has_zf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->zf(), target);
  }
  
  // required float zd = 14;
  if (has_zd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->zd(), target);
  }
  
  // required float hs = 15;
  if (has_hs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->hs(), target);
  }
  
  // required float amp = 16;
  if (has_amp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->amp(), target);
  }
  
  // required float lb = 17;
  if (has_lb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->lb(), target);
  }
  
  // required float wb = 18;
  if (has_wb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->wb(), target);
  }
  
  // required int32 wc = 19;
  if (has_wc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->wc(), target);
  }
  
  // required int32 xs = 20;
  if (has_xs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->xs(), target);
  }
  
  // required string nwp = 21;
  if (has_nwp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nwp().data(), this->nwp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->nwp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Grid::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string secucode = 1;
    if (has_secucode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secucode());
    }
    
    // required int32 exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange());
    }
    
    // required int32 secutype = 3;
    if (has_secutype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secutype());
    }
    
    // required int32 tp = 4;
    if (has_tp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tp());
    }
    
    // required float open = 5;
    if (has_open()) {
      total_size += 1 + 4;
    }
    
    // required float high = 6;
    if (has_high()) {
      total_size += 1 + 4;
    }
    
    // required float low = 7;
    if (has_low()) {
      total_size += 1 + 4;
    }
    
    // required float close = 8;
    if (has_close()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 vol = 9;
    if (has_vol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vol());
    }
    
    // required double amt = 10;
    if (has_amt()) {
      total_size += 1 + 8;
    }
    
    // required float askprice1 = 11;
    if (has_askprice1()) {
      total_size += 1 + 4;
    }
    
    // required float bidprice1 = 12;
    if (has_bidprice1()) {
      total_size += 1 + 4;
    }
    
    // required float zf = 13;
    if (has_zf()) {
      total_size += 1 + 4;
    }
    
    // required float zd = 14;
    if (has_zd()) {
      total_size += 1 + 4;
    }
    
    // required float hs = 15;
    if (has_hs()) {
      total_size += 1 + 4;
    }
    
    // required float amp = 16;
    if (has_amp()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required float lb = 17;
    if (has_lb()) {
      total_size += 2 + 4;
    }
    
    // required float wb = 18;
    if (has_wb()) {
      total_size += 2 + 4;
    }
    
    // required int32 wc = 19;
    if (has_wc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wc());
    }
    
    // required int32 xs = 20;
    if (has_xs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xs());
    }
    
    // required string nwp = 21;
    if (has_nwp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nwp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Grid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Grid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Grid::MergeFrom(const Grid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secucode()) {
      set_secucode(from.secucode());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_secutype()) {
      set_secutype(from.secutype());
    }
    if (from.has_tp()) {
      set_tp(from.tp());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vol()) {
      set_vol(from.vol());
    }
    if (from.has_amt()) {
      set_amt(from.amt());
    }
    if (from.has_askprice1()) {
      set_askprice1(from.askprice1());
    }
    if (from.has_bidprice1()) {
      set_bidprice1(from.bidprice1());
    }
    if (from.has_zf()) {
      set_zf(from.zf());
    }
    if (from.has_zd()) {
      set_zd(from.zd());
    }
    if (from.has_hs()) {
      set_hs(from.hs());
    }
    if (from.has_amp()) {
      set_amp(from.amp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lb()) {
      set_lb(from.lb());
    }
    if (from.has_wb()) {
      set_wb(from.wb());
    }
    if (from.has_wc()) {
      set_wc(from.wc());
    }
    if (from.has_xs()) {
      set_xs(from.xs());
    }
    if (from.has_nwp()) {
      set_nwp(from.nwp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Grid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grid::CopyFrom(const Grid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grid::IsInitialized() const {
  if ((_has_bits_[0] & 0x001fffff) != 0x001fffff) return false;
  
  return true;
}

void Grid::Swap(Grid* other) {
  if (other != this) {
    std::swap(secucode_, other->secucode_);
    std::swap(exchange_, other->exchange_);
    std::swap(secutype_, other->secutype_);
    std::swap(tp_, other->tp_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(close_, other->close_);
    std::swap(vol_, other->vol_);
    std::swap(amt_, other->amt_);
    std::swap(askprice1_, other->askprice1_);
    std::swap(bidprice1_, other->bidprice1_);
    std::swap(zf_, other->zf_);
    std::swap(zd_, other->zd_);
    std::swap(hs_, other->hs_);
    std::swap(amp_, other->amp_);
    std::swap(lb_, other->lb_);
    std::swap(wb_, other->wb_);
    std::swap(wc_, other->wc_);
    std::swap(xs_, other->xs_);
    std::swap(nwp_, other->nwp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Grid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Grid_descriptor_;
  metadata.reflection = Grid_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GridRequest_Field_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridRequest_Field_descriptor_;
}
bool GridRequest_Field_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GridRequest_Field GridRequest::ZQDM;
const GridRequest_Field GridRequest::JRKP;
const GridRequest_Field GridRequest::ZGCJ;
const GridRequest_Field GridRequest::ZDCJ;
const GridRequest_Field GridRequest::ZJCJ;
const GridRequest_Field GridRequest::CJSL;
const GridRequest_Field GridRequest::CJJE;
const GridRequest_Field GridRequest::BJW1;
const GridRequest_Field GridRequest::SJW1;
const GridRequest_Field GridRequest::ZF;
const GridRequest_Field GridRequest::ZD;
const GridRequest_Field GridRequest::HS;
const GridRequest_Field GridRequest::AMP;
const GridRequest_Field GridRequest::LB;
const GridRequest_Field GridRequest::WB;
const GridRequest_Field GridRequest::WC;
const GridRequest_Field GridRequest::ZRSP;
const GridRequest_Field GridRequest::XS;
const GridRequest_Field GridRequest::Field_MIN;
const GridRequest_Field GridRequest::Field_MAX;
const int GridRequest::Field_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GridRequest_Sort_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridRequest_Sort_descriptor_;
}
bool GridRequest_Sort_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GridRequest_Sort GridRequest::ASC;
const GridRequest_Sort GridRequest::DESC;
const GridRequest_Sort GridRequest::Sort_MIN;
const GridRequest_Sort GridRequest::Sort_MAX;
const int GridRequest::Sort_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GridRequest::kStockcodeFieldNumber;
const int GridRequest::kFieldFieldNumber;
const int GridRequest::kSortFieldNumber;
#endif  // !_MSC_VER

GridRequest::GridRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GridRequest::InitAsDefaultInstance() {
}

GridRequest::GridRequest(const GridRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GridRequest::SharedCtor() {
  _cached_size_ = 0;
  field_ = 1;
  sort_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridRequest::~GridRequest() {
  SharedDtor();
}

void GridRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GridRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridRequest_descriptor_;
}

const GridRequest& GridRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

GridRequest* GridRequest::default_instance_ = NULL;

GridRequest* GridRequest::New() const {
  return new GridRequest;
}

void GridRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    field_ = 1;
    sort_ = 1;
  }
  stockcode_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string stockcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stockcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockcode(0).data(), this->stockcode(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stockcode;
        if (input->ExpectTag(16)) goto parse_field;
        break;
      }
      
      // optional .quote.GridRequest.Field field = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_field:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quote::GridRequest_Field_IsValid(value)) {
            set_field(static_cast< ::quote::GridRequest_Field >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sort;
        break;
      }
      
      // optional .quote.GridRequest.Sort sort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quote::GridRequest_Sort_IsValid(value)) {
            set_sort(static_cast< ::quote::GridRequest_Sort >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GridRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string stockcode = 1;
  for (int i = 0; i < this->stockcode_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->stockcode(i).data(), this->stockcode(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stockcode(i), output);
  }
  
  // optional .quote.GridRequest.Field field = 2;
  if (has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->field(), output);
  }
  
  // optional .quote.GridRequest.Sort sort = 3;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sort(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GridRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string stockcode = 1;
  for (int i = 0; i < this->stockcode_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode(i).data(), this->stockcode(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->stockcode(i), target);
  }
  
  // optional .quote.GridRequest.Field field = 2;
  if (has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->field(), target);
  }
  
  // optional .quote.GridRequest.Sort sort = 3;
  if (has_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sort(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GridRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .quote.GridRequest.Field field = 2;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->field());
    }
    
    // optional .quote.GridRequest.Sort sort = 3;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sort());
    }
    
  }
  // repeated string stockcode = 1;
  total_size += 1 * this->stockcode_size();
  for (int i = 0; i < this->stockcode_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stockcode(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridRequest::MergeFrom(const GridRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  stockcode_.MergeFrom(from.stockcode_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_field()) {
      set_field(from.field());
    }
    if (from.has_sort()) {
      set_sort(from.sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridRequest::CopyFrom(const GridRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridRequest::IsInitialized() const {
  
  return true;
}

void GridRequest::Swap(GridRequest* other) {
  if (other != this) {
    stockcode_.Swap(&other->stockcode_);
    std::swap(field_, other->field_);
    std::swap(sort_, other->sort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridRequest_descriptor_;
  metadata.reflection = GridRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GridResponse::kGridFieldNumber;
#endif  // !_MSC_VER

GridResponse::GridResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GridResponse::InitAsDefaultInstance() {
}

GridResponse::GridResponse(const GridResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GridResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridResponse::~GridResponse() {
  SharedDtor();
}

void GridResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GridResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridResponse_descriptor_;
}

const GridResponse& GridResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

GridResponse* GridResponse::default_instance_ = NULL;

GridResponse* GridResponse::New() const {
  return new GridResponse;
}

void GridResponse::Clear() {
  grid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .quote.Grid grid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_grid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GridResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .quote.Grid grid = 1;
  for (int i = 0; i < this->grid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GridResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .quote.Grid grid = 1;
  for (int i = 0; i < this->grid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->grid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GridResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .quote.Grid grid = 1;
  total_size += 1 * this->grid_size();
  for (int i = 0; i < this->grid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grid(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridResponse::MergeFrom(const GridResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  grid_.MergeFrom(from.grid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridResponse::CopyFrom(const GridResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridResponse::IsInitialized() const {
  
  for (int i = 0; i < grid_size(); i++) {
    if (!this->grid(i).IsInitialized()) return false;
  }
  return true;
}

void GridResponse::Swap(GridResponse* other) {
  if (other != this) {
    grid_.Swap(&other->grid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridResponse_descriptor_;
  metadata.reflection = GridResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GridSortRequest_Field_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridSortRequest_Field_descriptor_;
}
bool GridSortRequest_Field_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GridSortRequest_Field GridSortRequest::ZQDM;
const GridSortRequest_Field GridSortRequest::JRKP;
const GridSortRequest_Field GridSortRequest::ZGCJ;
const GridSortRequest_Field GridSortRequest::ZDCJ;
const GridSortRequest_Field GridSortRequest::ZJCJ;
const GridSortRequest_Field GridSortRequest::CJSL;
const GridSortRequest_Field GridSortRequest::CJJE;
const GridSortRequest_Field GridSortRequest::BJW1;
const GridSortRequest_Field GridSortRequest::SJW1;
const GridSortRequest_Field GridSortRequest::ZF;
const GridSortRequest_Field GridSortRequest::ZD;
const GridSortRequest_Field GridSortRequest::HS;
const GridSortRequest_Field GridSortRequest::AMP;
const GridSortRequest_Field GridSortRequest::LB;
const GridSortRequest_Field GridSortRequest::WB;
const GridSortRequest_Field GridSortRequest::WC;
const GridSortRequest_Field GridSortRequest::ZRSP;
const GridSortRequest_Field GridSortRequest::XS;
const GridSortRequest_Field GridSortRequest::Field_MIN;
const GridSortRequest_Field GridSortRequest::Field_MAX;
const int GridSortRequest::Field_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GridSortRequest_Sort_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridSortRequest_Sort_descriptor_;
}
bool GridSortRequest_Sort_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GridSortRequest_Sort GridSortRequest::ASC;
const GridSortRequest_Sort GridSortRequest::DESC;
const GridSortRequest_Sort GridSortRequest::Sort_MIN;
const GridSortRequest_Sort GridSortRequest::Sort_MAX;
const int GridSortRequest::Sort_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GridSortRequest::kSecutypeFieldNumber;
const int GridSortRequest::kBlockFieldNumber;
const int GridSortRequest::kPageFieldNumber;
const int GridSortRequest::kStartidxFieldNumber;
const int GridSortRequest::kLenFieldNumber;
const int GridSortRequest::kFieldFieldNumber;
const int GridSortRequest::kSortFieldNumber;
#endif  // !_MSC_VER

GridSortRequest::GridSortRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GridSortRequest::InitAsDefaultInstance() {
}

GridSortRequest::GridSortRequest(const GridSortRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GridSortRequest::SharedCtor() {
  _cached_size_ = 0;
  block_ = false;
  page_ = 0;
  startidx_ = 0;
  len_ = 0;
  field_ = 1;
  sort_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridSortRequest::~GridSortRequest() {
  SharedDtor();
}

void GridSortRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GridSortRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridSortRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridSortRequest_descriptor_;
}

const GridSortRequest& GridSortRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

GridSortRequest* GridSortRequest::default_instance_ = NULL;

GridSortRequest* GridSortRequest::New() const {
  return new GridSortRequest;
}

void GridSortRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    block_ = false;
    page_ = 0;
    startidx_ = 0;
    len_ = 0;
    field_ = 1;
    sort_ = 1;
  }
  secutype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridSortRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 secutype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_secutype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_secutype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_secutype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_secutype;
        if (input->ExpectTag(16)) goto parse_block;
        break;
      }
      
      // required bool block = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &block_)));
          set_has_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_page;
        break;
      }
      
      // optional int32 page = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_startidx;
        break;
      }
      
      // optional int32 startidx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startidx_)));
          set_has_startidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }
      
      // required int32 len = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_field;
        break;
      }
      
      // required .quote.GridSortRequest.Field field = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_field:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quote::GridSortRequest_Field_IsValid(value)) {
            set_field(static_cast< ::quote::GridSortRequest_Field >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sort;
        break;
      }
      
      // required .quote.GridSortRequest.Sort sort = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quote::GridSortRequest_Sort_IsValid(value)) {
            set_sort(static_cast< ::quote::GridSortRequest_Sort >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GridSortRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 secutype = 1;
  for (int i = 0; i < this->secutype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->secutype(i), output);
  }
  
  // required bool block = 2;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->block(), output);
  }
  
  // optional int32 page = 3;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page(), output);
  }
  
  // optional int32 startidx = 4;
  if (has_startidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->startidx(), output);
  }
  
  // required int32 len = 5;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->len(), output);
  }
  
  // required .quote.GridSortRequest.Field field = 6;
  if (has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->field(), output);
  }
  
  // required .quote.GridSortRequest.Sort sort = 7;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->sort(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GridSortRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 secutype = 1;
  for (int i = 0; i < this->secutype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->secutype(i), target);
  }
  
  // required bool block = 2;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->block(), target);
  }
  
  // optional int32 page = 3;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page(), target);
  }
  
  // optional int32 startidx = 4;
  if (has_startidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->startidx(), target);
  }
  
  // required int32 len = 5;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->len(), target);
  }
  
  // required .quote.GridSortRequest.Field field = 6;
  if (has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->field(), target);
  }
  
  // required .quote.GridSortRequest.Sort sort = 7;
  if (has_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->sort(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GridSortRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool block = 2;
    if (has_block()) {
      total_size += 1 + 1;
    }
    
    // optional int32 page = 3;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }
    
    // optional int32 startidx = 4;
    if (has_startidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startidx());
    }
    
    // required int32 len = 5;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }
    
    // required .quote.GridSortRequest.Field field = 6;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->field());
    }
    
    // required .quote.GridSortRequest.Sort sort = 7;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sort());
    }
    
  }
  // repeated int32 secutype = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->secutype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->secutype(i));
    }
    total_size += 1 * this->secutype_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridSortRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridSortRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridSortRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridSortRequest::MergeFrom(const GridSortRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  secutype_.MergeFrom(from.secutype_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_block()) {
      set_block(from.block());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_startidx()) {
      set_startidx(from.startidx());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_field()) {
      set_field(from.field());
    }
    if (from.has_sort()) {
      set_sort(from.sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridSortRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridSortRequest::CopyFrom(const GridSortRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridSortRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000072) != 0x00000072) return false;
  
  return true;
}

void GridSortRequest::Swap(GridSortRequest* other) {
  if (other != this) {
    secutype_.Swap(&other->secutype_);
    std::swap(block_, other->block_);
    std::swap(page_, other->page_);
    std::swap(startidx_, other->startidx_);
    std::swap(len_, other->len_);
    std::swap(field_, other->field_);
    std::swap(sort_, other->sort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridSortRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridSortRequest_descriptor_;
  metadata.reflection = GridSortRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GridSortResponse::kGridFieldNumber;
#endif  // !_MSC_VER

GridSortResponse::GridSortResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GridSortResponse::InitAsDefaultInstance() {
}

GridSortResponse::GridSortResponse(const GridSortResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GridSortResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridSortResponse::~GridSortResponse() {
  SharedDtor();
}

void GridSortResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GridSortResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridSortResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridSortResponse_descriptor_;
}

const GridSortResponse& GridSortResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

GridSortResponse* GridSortResponse::default_instance_ = NULL;

GridSortResponse* GridSortResponse::New() const {
  return new GridSortResponse;
}

void GridSortResponse::Clear() {
  grid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridSortResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .quote.Grid grid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_grid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GridSortResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .quote.Grid grid = 1;
  for (int i = 0; i < this->grid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GridSortResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .quote.Grid grid = 1;
  for (int i = 0; i < this->grid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->grid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GridSortResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .quote.Grid grid = 1;
  total_size += 1 * this->grid_size();
  for (int i = 0; i < this->grid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grid(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridSortResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridSortResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridSortResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridSortResponse::MergeFrom(const GridSortResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  grid_.MergeFrom(from.grid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridSortResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridSortResponse::CopyFrom(const GridSortResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridSortResponse::IsInitialized() const {
  
  for (int i = 0; i < grid_size(); i++) {
    if (!this->grid(i).IsInitialized()) return false;
  }
  return true;
}

void GridSortResponse::Swap(GridSortResponse* other) {
  if (other != this) {
    grid_.Swap(&other->grid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridSortResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridSortResponse_descriptor_;
  metadata.reflection = GridSortResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DetailRequest_Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetailRequest_Direction_descriptor_;
}
bool DetailRequest_Direction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DetailRequest_Direction DetailRequest::FORWARD;
const DetailRequest_Direction DetailRequest::BACKWARD;
const DetailRequest_Direction DetailRequest::Direction_MIN;
const DetailRequest_Direction DetailRequest::Direction_MAX;
const int DetailRequest::Direction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DetailRequest::kStockcodeFieldNumber;
const int DetailRequest::kLenFieldNumber;
const int DetailRequest::kIdFieldNumber;
const int DetailRequest::kDirectionFieldNumber;
#endif  // !_MSC_VER

DetailRequest::DetailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DetailRequest::InitAsDefaultInstance() {
}

DetailRequest::DetailRequest(const DetailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DetailRequest::SharedCtor() {
  _cached_size_ = 0;
  stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  len_ = 0;
  id_ = 0;
  direction_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetailRequest::~DetailRequest() {
  SharedDtor();
}

void DetailRequest::SharedDtor() {
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    delete stockcode_;
  }
  if (this != default_instance_) {
  }
}

void DetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetailRequest_descriptor_;
}

const DetailRequest& DetailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

DetailRequest* DetailRequest::default_instance_ = NULL;

DetailRequest* DetailRequest::New() const {
  return new DetailRequest;
}

void DetailRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stockcode()) {
      if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
        stockcode_->clear();
      }
    }
    len_ = 0;
    id_ = 0;
    direction_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stockcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_len;
        break;
      }
      
      // required int32 len = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }
      
      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_direction;
        break;
      }
      
      // optional .quote.DetailRequest.Direction direction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quote::DetailRequest_Direction_IsValid(value)) {
            set_direction(static_cast< ::quote::DetailRequest_Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string stockcode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stockcode(), output);
  }
  
  // required int32 len = 2;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->len(), output);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }
  
  // optional .quote.DetailRequest.Direction direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->direction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DetailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string stockcode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stockcode(), target);
  }
  
  // required int32 len = 2;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->len(), target);
  }
  
  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }
  
  // optional .quote.DetailRequest.Direction direction = 4;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->direction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DetailRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stockcode = 1;
    if (has_stockcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockcode());
    }
    
    // required int32 len = 2;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }
    
    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .quote.DetailRequest.Direction direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetailRequest::MergeFrom(const DetailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stockcode()) {
      set_stockcode(from.stockcode());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailRequest::CopyFrom(const DetailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DetailRequest::Swap(DetailRequest* other) {
  if (other != this) {
    std::swap(stockcode_, other->stockcode_);
    std::swap(len_, other->len_);
    std::swap(id_, other->id_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetailRequest_descriptor_;
  metadata.reflection = DetailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MinRequest::kStockcodeFieldNumber;
const int MinRequest::kDayFieldNumber;
#endif  // !_MSC_VER

MinRequest::MinRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MinRequest::InitAsDefaultInstance() {
}

MinRequest::MinRequest(const MinRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MinRequest::SharedCtor() {
  _cached_size_ = 0;
  stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MinRequest::~MinRequest() {
  SharedDtor();
}

void MinRequest::SharedDtor() {
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    delete stockcode_;
  }
  if (this != default_instance_) {
  }
}

void MinRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MinRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MinRequest_descriptor_;
}

const MinRequest& MinRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

MinRequest* MinRequest::default_instance_ = NULL;

MinRequest* MinRequest::New() const {
  return new MinRequest;
}

void MinRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stockcode()) {
      if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
        stockcode_->clear();
      }
    }
  }
  day_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stockcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_day;
        break;
      }
      
      // repeated int32 day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_day())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_day())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_day;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string stockcode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stockcode(), output);
  }
  
  // repeated int32 day = 2;
  for (int i = 0; i < this->day_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->day(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MinRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string stockcode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stockcode(), target);
  }
  
  // repeated int32 day = 2;
  for (int i = 0; i < this->day_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->day(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MinRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stockcode = 1;
    if (has_stockcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockcode());
    }
    
  }
  // repeated int32 day = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->day_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->day(i));
    }
    total_size += 1 * this->day_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MinRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MinRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MinRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MinRequest::MergeFrom(const MinRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  day_.MergeFrom(from.day_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stockcode()) {
      set_stockcode(from.stockcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MinRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MinRequest::CopyFrom(const MinRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MinRequest::Swap(MinRequest* other) {
  if (other != this) {
    std::swap(stockcode_, other->stockcode_);
    day_.Swap(&other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MinRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MinRequest_descriptor_;
  metadata.reflection = MinRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusRequest::kStockcodeFieldNumber;
#endif  // !_MSC_VER

StatusRequest::StatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusRequest::InitAsDefaultInstance() {
}

StatusRequest::StatusRequest(const StatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusRequest::~StatusRequest() {
  SharedDtor();
}

void StatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusRequest_descriptor_;
}

const StatusRequest& StatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

StatusRequest* StatusRequest::default_instance_ = NULL;

StatusRequest* StatusRequest::New() const {
  return new StatusRequest;
}

void StatusRequest::Clear() {
  stockcode_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string stockcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stockcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockcode(0).data(), this->stockcode(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stockcode;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string stockcode = 1;
  for (int i = 0; i < this->stockcode_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->stockcode(i).data(), this->stockcode(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stockcode(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string stockcode = 1;
  for (int i = 0; i < this->stockcode_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode(i).data(), this->stockcode(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->stockcode(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated string stockcode = 1;
  total_size += 1 * this->stockcode_size();
  for (int i = 0; i < this->stockcode_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stockcode(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusRequest::MergeFrom(const StatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  stockcode_.MergeFrom(from.stockcode_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRequest::IsInitialized() const {
  
  return true;
}

void StatusRequest::Swap(StatusRequest* other) {
  if (other != this) {
    stockcode_.Swap(&other->stockcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusRequest_descriptor_;
  metadata.reflection = StatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusResponse_Status::kSecucodeFieldNumber;
const int StatusResponse_Status::kExchangeFieldNumber;
const int StatusResponse_Status::kCloseFieldNumber;
const int StatusResponse_Status::kZfFieldNumber;
const int StatusResponse_Status::kZdFieldNumber;
const int StatusResponse_Status::kAmtFieldNumber;
#endif  // !_MSC_VER

StatusResponse_Status::StatusResponse_Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusResponse_Status::InitAsDefaultInstance() {
}

StatusResponse_Status::StatusResponse_Status(const StatusResponse_Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusResponse_Status::SharedCtor() {
  _cached_size_ = 0;
  secucode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchange_ = 0;
  close_ = 0;
  zf_ = 0;
  zd_ = 0;
  amt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusResponse_Status::~StatusResponse_Status() {
  SharedDtor();
}

void StatusResponse_Status::SharedDtor() {
  if (secucode_ != &::google::protobuf::internal::kEmptyString) {
    delete secucode_;
  }
  if (this != default_instance_) {
  }
}

void StatusResponse_Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusResponse_Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusResponse_Status_descriptor_;
}

const StatusResponse_Status& StatusResponse_Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

StatusResponse_Status* StatusResponse_Status::default_instance_ = NULL;

StatusResponse_Status* StatusResponse_Status::New() const {
  return new StatusResponse_Status;
}

void StatusResponse_Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_secucode()) {
      if (secucode_ != &::google::protobuf::internal::kEmptyString) {
        secucode_->clear();
      }
    }
    exchange_ = 0;
    close_ = 0;
    zf_ = 0;
    zd_ = 0;
    amt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusResponse_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string secucode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secucode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secucode().data(), this->secucode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exchange;
        break;
      }
      
      // required int32 exchange = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_close;
        break;
      }
      
      // required float close = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_zf;
        break;
      }
      
      // required float zf = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zf_)));
          set_has_zf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_zd;
        break;
      }
      
      // required float zd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zd_)));
          set_has_zd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_amt;
        break;
      }
      
      // required double amt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_amt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amt_)));
          set_has_amt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusResponse_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string secucode = 1;
  if (has_secucode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secucode().data(), this->secucode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->secucode(), output);
  }
  
  // required int32 exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exchange(), output);
  }
  
  // required float close = 3;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->close(), output);
  }
  
  // required float zf = 4;
  if (has_zf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->zf(), output);
  }
  
  // required float zd = 5;
  if (has_zd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->zd(), output);
  }
  
  // required double amt = 6;
  if (has_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->amt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusResponse_Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string secucode = 1;
  if (has_secucode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secucode().data(), this->secucode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->secucode(), target);
  }
  
  // required int32 exchange = 2;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exchange(), target);
  }
  
  // required float close = 3;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->close(), target);
  }
  
  // required float zf = 4;
  if (has_zf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->zf(), target);
  }
  
  // required float zd = 5;
  if (has_zd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->zd(), target);
  }
  
  // required double amt = 6;
  if (has_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->amt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusResponse_Status::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string secucode = 1;
    if (has_secucode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secucode());
    }
    
    // required int32 exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange());
    }
    
    // required float close = 3;
    if (has_close()) {
      total_size += 1 + 4;
    }
    
    // required float zf = 4;
    if (has_zf()) {
      total_size += 1 + 4;
    }
    
    // required float zd = 5;
    if (has_zd()) {
      total_size += 1 + 4;
    }
    
    // required double amt = 6;
    if (has_amt()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusResponse_Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusResponse_Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusResponse_Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusResponse_Status::MergeFrom(const StatusResponse_Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secucode()) {
      set_secucode(from.secucode());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_zf()) {
      set_zf(from.zf());
    }
    if (from.has_zd()) {
      set_zd(from.zd());
    }
    if (from.has_amt()) {
      set_amt(from.amt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusResponse_Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse_Status::CopyFrom(const StatusResponse_Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse_Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void StatusResponse_Status::Swap(StatusResponse_Status* other) {
  if (other != this) {
    std::swap(secucode_, other->secucode_);
    std::swap(exchange_, other->exchange_);
    std::swap(close_, other->close_);
    std::swap(zf_, other->zf_);
    std::swap(zd_, other->zd_);
    std::swap(amt_, other->amt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusResponse_Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusResponse_Status_descriptor_;
  metadata.reflection = StatusResponse_Status_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StatusResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

StatusResponse::StatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusResponse::InitAsDefaultInstance() {
}

StatusResponse::StatusResponse(const StatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusResponse::~StatusResponse() {
  SharedDtor();
}

void StatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusResponse_descriptor_;
}

const StatusResponse& StatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

StatusResponse* StatusResponse::default_instance_ = NULL;

StatusResponse* StatusResponse::New() const {
  return new StatusResponse;
}

void StatusResponse::Clear() {
  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .quote.StatusResponse.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_status;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .quote.StatusResponse.Status status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .quote.StatusResponse.Status status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .quote.StatusResponse.Status status = 1;
  total_size += 1 * this->status_size();
  for (int i = 0; i < this->status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_.MergeFrom(from.status_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  
  for (int i = 0; i < status_size(); i++) {
    if (!this->status(i).IsInitialized()) return false;
  }
  return true;
}

void StatusResponse::Swap(StatusResponse* other) {
  if (other != this) {
    status_.Swap(&other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusResponse_descriptor_;
  metadata.reflection = StatusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZhpmRequest::kSecutypeFieldNumber;
const int ZhpmRequest::kZhpmtypeFieldNumber;
const int ZhpmRequest::kLenFieldNumber;
#endif  // !_MSC_VER

ZhpmRequest::ZhpmRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZhpmRequest::InitAsDefaultInstance() {
}

ZhpmRequest::ZhpmRequest(const ZhpmRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZhpmRequest::SharedCtor() {
  _cached_size_ = 0;
  len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZhpmRequest::~ZhpmRequest() {
  SharedDtor();
}

void ZhpmRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZhpmRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZhpmRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZhpmRequest_descriptor_;
}

const ZhpmRequest& ZhpmRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

ZhpmRequest* ZhpmRequest::default_instance_ = NULL;

ZhpmRequest* ZhpmRequest::New() const {
  return new ZhpmRequest;
}

void ZhpmRequest::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    len_ = 0;
  }
  secutype_.Clear();
  zhpmtype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZhpmRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 secutype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_secutype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_secutype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_secutype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_secutype;
        if (input->ExpectTag(16)) goto parse_zhpmtype;
        break;
      }
      
      // repeated int32 zhpmtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zhpmtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_zhpmtype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_zhpmtype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zhpmtype;
        if (input->ExpectTag(24)) goto parse_len;
        break;
      }
      
      // required int32 len = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZhpmRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 secutype = 1;
  for (int i = 0; i < this->secutype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->secutype(i), output);
  }
  
  // repeated int32 zhpmtype = 2;
  for (int i = 0; i < this->zhpmtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->zhpmtype(i), output);
  }
  
  // required int32 len = 3;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->len(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZhpmRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 secutype = 1;
  for (int i = 0; i < this->secutype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->secutype(i), target);
  }
  
  // repeated int32 zhpmtype = 2;
  for (int i = 0; i < this->zhpmtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->zhpmtype(i), target);
  }
  
  // required int32 len = 3;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->len(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZhpmRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required int32 len = 3;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }
    
  }
  // repeated int32 secutype = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->secutype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->secutype(i));
    }
    total_size += 1 * this->secutype_size() + data_size;
  }
  
  // repeated int32 zhpmtype = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->zhpmtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->zhpmtype(i));
    }
    total_size += 1 * this->zhpmtype_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZhpmRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZhpmRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZhpmRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZhpmRequest::MergeFrom(const ZhpmRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  secutype_.MergeFrom(from.secutype_);
  zhpmtype_.MergeFrom(from.zhpmtype_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZhpmRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZhpmRequest::CopyFrom(const ZhpmRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZhpmRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void ZhpmRequest::Swap(ZhpmRequest* other) {
  if (other != this) {
    secutype_.Swap(&other->secutype_);
    zhpmtype_.Swap(&other->zhpmtype_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZhpmRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZhpmRequest_descriptor_;
  metadata.reflection = ZhpmRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZhpmResponse_Zhpm_ZhpmStock::kSecucodeFieldNumber;
const int ZhpmResponse_Zhpm_ZhpmStock::kExchangeFieldNumber;
const int ZhpmResponse_Zhpm_ZhpmStock::kCloseFieldNumber;
const int ZhpmResponse_Zhpm_ZhpmStock::kZfFieldNumber;
const int ZhpmResponse_Zhpm_ZhpmStock::kValueFieldNumber;
#endif  // !_MSC_VER

ZhpmResponse_Zhpm_ZhpmStock::ZhpmResponse_Zhpm_ZhpmStock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZhpmResponse_Zhpm_ZhpmStock::InitAsDefaultInstance() {
}

ZhpmResponse_Zhpm_ZhpmStock::ZhpmResponse_Zhpm_ZhpmStock(const ZhpmResponse_Zhpm_ZhpmStock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZhpmResponse_Zhpm_ZhpmStock::SharedCtor() {
  _cached_size_ = 0;
  secucode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchange_ = 0;
  close_ = 0;
  zf_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZhpmResponse_Zhpm_ZhpmStock::~ZhpmResponse_Zhpm_ZhpmStock() {
  SharedDtor();
}

void ZhpmResponse_Zhpm_ZhpmStock::SharedDtor() {
  if (secucode_ != &::google::protobuf::internal::kEmptyString) {
    delete secucode_;
  }
  if (this != default_instance_) {
  }
}

void ZhpmResponse_Zhpm_ZhpmStock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZhpmResponse_Zhpm_ZhpmStock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZhpmResponse_Zhpm_ZhpmStock_descriptor_;
}

const ZhpmResponse_Zhpm_ZhpmStock& ZhpmResponse_Zhpm_ZhpmStock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

ZhpmResponse_Zhpm_ZhpmStock* ZhpmResponse_Zhpm_ZhpmStock::default_instance_ = NULL;

ZhpmResponse_Zhpm_ZhpmStock* ZhpmResponse_Zhpm_ZhpmStock::New() const {
  return new ZhpmResponse_Zhpm_ZhpmStock;
}

void ZhpmResponse_Zhpm_ZhpmStock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_secucode()) {
      if (secucode_ != &::google::protobuf::internal::kEmptyString) {
        secucode_->clear();
      }
    }
    exchange_ = 0;
    close_ = 0;
    zf_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZhpmResponse_Zhpm_ZhpmStock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string secucode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secucode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secucode().data(), this->secucode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exchange;
        break;
      }
      
      // required int32 exchange = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_close;
        break;
      }
      
      // required float close = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_zf;
        break;
      }
      
      // required float zf = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zf_)));
          set_has_zf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_value;
        break;
      }
      
      // required double value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZhpmResponse_Zhpm_ZhpmStock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string secucode = 1;
  if (has_secucode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secucode().data(), this->secucode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->secucode(), output);
  }
  
  // required int32 exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exchange(), output);
  }
  
  // required float close = 3;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->close(), output);
  }
  
  // required float zf = 4;
  if (has_zf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->zf(), output);
  }
  
  // required double value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZhpmResponse_Zhpm_ZhpmStock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string secucode = 1;
  if (has_secucode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secucode().data(), this->secucode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->secucode(), target);
  }
  
  // required int32 exchange = 2;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exchange(), target);
  }
  
  // required float close = 3;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->close(), target);
  }
  
  // required float zf = 4;
  if (has_zf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->zf(), target);
  }
  
  // required double value = 5;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZhpmResponse_Zhpm_ZhpmStock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string secucode = 1;
    if (has_secucode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secucode());
    }
    
    // required int32 exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange());
    }
    
    // required float close = 3;
    if (has_close()) {
      total_size += 1 + 4;
    }
    
    // required float zf = 4;
    if (has_zf()) {
      total_size += 1 + 4;
    }
    
    // required double value = 5;
    if (has_value()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZhpmResponse_Zhpm_ZhpmStock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZhpmResponse_Zhpm_ZhpmStock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZhpmResponse_Zhpm_ZhpmStock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZhpmResponse_Zhpm_ZhpmStock::MergeFrom(const ZhpmResponse_Zhpm_ZhpmStock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secucode()) {
      set_secucode(from.secucode());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_zf()) {
      set_zf(from.zf());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZhpmResponse_Zhpm_ZhpmStock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZhpmResponse_Zhpm_ZhpmStock::CopyFrom(const ZhpmResponse_Zhpm_ZhpmStock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZhpmResponse_Zhpm_ZhpmStock::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void ZhpmResponse_Zhpm_ZhpmStock::Swap(ZhpmResponse_Zhpm_ZhpmStock* other) {
  if (other != this) {
    std::swap(secucode_, other->secucode_);
    std::swap(exchange_, other->exchange_);
    std::swap(close_, other->close_);
    std::swap(zf_, other->zf_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZhpmResponse_Zhpm_ZhpmStock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZhpmResponse_Zhpm_ZhpmStock_descriptor_;
  metadata.reflection = ZhpmResponse_Zhpm_ZhpmStock_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ZhpmResponse_Zhpm::kTypeFieldNumber;
const int ZhpmResponse_Zhpm::kZhpmstockFieldNumber;
#endif  // !_MSC_VER

ZhpmResponse_Zhpm::ZhpmResponse_Zhpm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZhpmResponse_Zhpm::InitAsDefaultInstance() {
}

ZhpmResponse_Zhpm::ZhpmResponse_Zhpm(const ZhpmResponse_Zhpm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZhpmResponse_Zhpm::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZhpmResponse_Zhpm::~ZhpmResponse_Zhpm() {
  SharedDtor();
}

void ZhpmResponse_Zhpm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZhpmResponse_Zhpm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZhpmResponse_Zhpm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZhpmResponse_Zhpm_descriptor_;
}

const ZhpmResponse_Zhpm& ZhpmResponse_Zhpm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

ZhpmResponse_Zhpm* ZhpmResponse_Zhpm::default_instance_ = NULL;

ZhpmResponse_Zhpm* ZhpmResponse_Zhpm::New() const {
  return new ZhpmResponse_Zhpm;
}

void ZhpmResponse_Zhpm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  zhpmstock_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZhpmResponse_Zhpm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_zhpmstock;
        break;
      }
      
      // repeated .quote.ZhpmResponse.Zhpm.ZhpmStock zhpmstock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zhpmstock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zhpmstock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_zhpmstock;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZhpmResponse_Zhpm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // repeated .quote.ZhpmResponse.Zhpm.ZhpmStock zhpmstock = 2;
  for (int i = 0; i < this->zhpmstock_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->zhpmstock(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZhpmResponse_Zhpm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // repeated .quote.ZhpmResponse.Zhpm.ZhpmStock zhpmstock = 2;
  for (int i = 0; i < this->zhpmstock_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->zhpmstock(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZhpmResponse_Zhpm::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  // repeated .quote.ZhpmResponse.Zhpm.ZhpmStock zhpmstock = 2;
  total_size += 1 * this->zhpmstock_size();
  for (int i = 0; i < this->zhpmstock_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zhpmstock(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZhpmResponse_Zhpm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZhpmResponse_Zhpm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZhpmResponse_Zhpm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZhpmResponse_Zhpm::MergeFrom(const ZhpmResponse_Zhpm& from) {
  GOOGLE_CHECK_NE(&from, this);
  zhpmstock_.MergeFrom(from.zhpmstock_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZhpmResponse_Zhpm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZhpmResponse_Zhpm::CopyFrom(const ZhpmResponse_Zhpm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZhpmResponse_Zhpm::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < zhpmstock_size(); i++) {
    if (!this->zhpmstock(i).IsInitialized()) return false;
  }
  return true;
}

void ZhpmResponse_Zhpm::Swap(ZhpmResponse_Zhpm* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    zhpmstock_.Swap(&other->zhpmstock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZhpmResponse_Zhpm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZhpmResponse_Zhpm_descriptor_;
  metadata.reflection = ZhpmResponse_Zhpm_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ZhpmResponse::kZhpmFieldNumber;
#endif  // !_MSC_VER

ZhpmResponse::ZhpmResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZhpmResponse::InitAsDefaultInstance() {
}

ZhpmResponse::ZhpmResponse(const ZhpmResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZhpmResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZhpmResponse::~ZhpmResponse() {
  SharedDtor();
}

void ZhpmResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZhpmResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZhpmResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZhpmResponse_descriptor_;
}

const ZhpmResponse& ZhpmResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

ZhpmResponse* ZhpmResponse::default_instance_ = NULL;

ZhpmResponse* ZhpmResponse::New() const {
  return new ZhpmResponse;
}

void ZhpmResponse::Clear() {
  zhpm_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZhpmResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .quote.ZhpmResponse.Zhpm zhpm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zhpm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zhpm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_zhpm;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZhpmResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .quote.ZhpmResponse.Zhpm zhpm = 1;
  for (int i = 0; i < this->zhpm_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->zhpm(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZhpmResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .quote.ZhpmResponse.Zhpm zhpm = 1;
  for (int i = 0; i < this->zhpm_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->zhpm(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZhpmResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .quote.ZhpmResponse.Zhpm zhpm = 1;
  total_size += 1 * this->zhpm_size();
  for (int i = 0; i < this->zhpm_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zhpm(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZhpmResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZhpmResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZhpmResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZhpmResponse::MergeFrom(const ZhpmResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  zhpm_.MergeFrom(from.zhpm_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZhpmResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZhpmResponse::CopyFrom(const ZhpmResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZhpmResponse::IsInitialized() const {
  
  for (int i = 0; i < zhpm_size(); i++) {
    if (!this->zhpm(i).IsInitialized()) return false;
  }
  return true;
}

void ZhpmResponse::Swap(ZhpmResponse* other) {
  if (other != this) {
    zhpm_.Swap(&other->zhpm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZhpmResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZhpmResponse_descriptor_;
  metadata.reflection = ZhpmResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CandleRequest_CandleCycle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CandleRequest_CandleCycle_descriptor_;
}
bool CandleRequest_CandleCycle_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CandleRequest_CandleCycle CandleRequest::DAY;
const CandleRequest_CandleCycle CandleRequest::WEEK;
const CandleRequest_CandleCycle CandleRequest::MONTH;
const CandleRequest_CandleCycle CandleRequest::YEAR;
const CandleRequest_CandleCycle CandleRequest::MIN1;
const CandleRequest_CandleCycle CandleRequest::MIN5;
const CandleRequest_CandleCycle CandleRequest::MIN15;
const CandleRequest_CandleCycle CandleRequest::MIN30;
const CandleRequest_CandleCycle CandleRequest::MIN60;
const CandleRequest_CandleCycle CandleRequest::CandleCycle_MIN;
const CandleRequest_CandleCycle CandleRequest::CandleCycle_MAX;
const int CandleRequest::CandleCycle_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CandleRequest_Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CandleRequest_Direction_descriptor_;
}
bool CandleRequest_Direction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CandleRequest_Direction CandleRequest::FORWARD;
const CandleRequest_Direction CandleRequest::BACKWARD;
const CandleRequest_Direction CandleRequest::Direction_MIN;
const CandleRequest_Direction CandleRequest::Direction_MAX;
const int CandleRequest::Direction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CandleRequest::kStockcodeFieldNumber;
const int CandleRequest::kCandlecycleFieldNumber;
const int CandleRequest::kLenFieldNumber;
const int CandleRequest::kDateFieldNumber;
const int CandleRequest::kIdFieldNumber;
const int CandleRequest::kDirectionFieldNumber;
#endif  // !_MSC_VER

CandleRequest::CandleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CandleRequest::InitAsDefaultInstance() {
}

CandleRequest::CandleRequest(const CandleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CandleRequest::SharedCtor() {
  _cached_size_ = 0;
  stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  candlecycle_ = 1;
  len_ = 0;
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  direction_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CandleRequest::~CandleRequest() {
  SharedDtor();
}

void CandleRequest::SharedDtor() {
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    delete stockcode_;
  }
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (this != default_instance_) {
  }
}

void CandleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CandleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CandleRequest_descriptor_;
}

const CandleRequest& CandleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

CandleRequest* CandleRequest::default_instance_ = NULL;

CandleRequest* CandleRequest::New() const {
  return new CandleRequest;
}

void CandleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stockcode()) {
      if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
        stockcode_->clear();
      }
    }
    candlecycle_ = 1;
    len_ = 0;
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::kEmptyString) {
        date_->clear();
      }
    }
    id_ = 0;
    direction_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CandleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stockcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_candlecycle;
        break;
      }
      
      // required .quote.CandleRequest.CandleCycle candlecycle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_candlecycle:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quote::CandleRequest_CandleCycle_IsValid(value)) {
            set_candlecycle(static_cast< ::quote::CandleRequest_CandleCycle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_len;
        break;
      }
      
      // required int32 len = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_date;
        break;
      }
      
      // optional string date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }
      
      // optional int32 id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_direction;
        break;
      }
      
      // required .quote.CandleRequest.Direction direction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quote::CandleRequest_Direction_IsValid(value)) {
            set_direction(static_cast< ::quote::CandleRequest_Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CandleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string stockcode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stockcode(), output);
  }
  
  // required .quote.CandleRequest.CandleCycle candlecycle = 2;
  if (has_candlecycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->candlecycle(), output);
  }
  
  // required int32 len = 3;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->len(), output);
  }
  
  // optional string date = 4;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->date(), output);
  }
  
  // optional int32 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->id(), output);
  }
  
  // required .quote.CandleRequest.Direction direction = 6;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->direction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CandleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string stockcode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stockcode(), target);
  }
  
  // required .quote.CandleRequest.CandleCycle candlecycle = 2;
  if (has_candlecycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->candlecycle(), target);
  }
  
  // required int32 len = 3;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->len(), target);
  }
  
  // optional string date = 4;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->date(), target);
  }
  
  // optional int32 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->id(), target);
  }
  
  // required .quote.CandleRequest.Direction direction = 6;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->direction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CandleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stockcode = 1;
    if (has_stockcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockcode());
    }
    
    // required .quote.CandleRequest.CandleCycle candlecycle = 2;
    if (has_candlecycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->candlecycle());
    }
    
    // required int32 len = 3;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }
    
    // optional string date = 4;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }
    
    // optional int32 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required .quote.CandleRequest.Direction direction = 6;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CandleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CandleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CandleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CandleRequest::MergeFrom(const CandleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stockcode()) {
      set_stockcode(from.stockcode());
    }
    if (from.has_candlecycle()) {
      set_candlecycle(from.candlecycle());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CandleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandleRequest::CopyFrom(const CandleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;
  
  return true;
}

void CandleRequest::Swap(CandleRequest* other) {
  if (other != this) {
    std::swap(stockcode_, other->stockcode_);
    std::swap(candlecycle_, other->candlecycle_);
    std::swap(len_, other->len_);
    std::swap(date_, other->date_);
    std::swap(id_, other->id_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CandleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CandleRequest_descriptor_;
  metadata.reflection = CandleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StockRequest::kExchangeFieldNumber;
#endif  // !_MSC_VER

StockRequest::StockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StockRequest::InitAsDefaultInstance() {
}

StockRequest::StockRequest(const StockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StockRequest::SharedCtor() {
  _cached_size_ = 0;
  exchange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockRequest::~StockRequest() {
  SharedDtor();
}

void StockRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockRequest_descriptor_;
}

const StockRequest& StockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

StockRequest* StockRequest::default_instance_ = NULL;

StockRequest* StockRequest::New() const {
  return new StockRequest;
}

void StockRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exchange_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 exchange = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 exchange = 1;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 exchange = 1;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StockRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 exchange = 1;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockRequest::MergeFrom(const StockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockRequest::CopyFrom(const StockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StockRequest::Swap(StockRequest* other) {
  if (other != this) {
    std::swap(exchange_, other->exchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockRequest_descriptor_;
  metadata.reflection = StockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinanceRequest::kExchangeFieldNumber;
#endif  // !_MSC_VER

FinanceRequest::FinanceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinanceRequest::InitAsDefaultInstance() {
}

FinanceRequest::FinanceRequest(const FinanceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinanceRequest::SharedCtor() {
  _cached_size_ = 0;
  exchange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinanceRequest::~FinanceRequest() {
  SharedDtor();
}

void FinanceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinanceRequest_descriptor_;
}

const FinanceRequest& FinanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

FinanceRequest* FinanceRequest::default_instance_ = NULL;

FinanceRequest* FinanceRequest::New() const {
  return new FinanceRequest;
}

void FinanceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exchange_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 exchange = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FinanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 exchange = 1;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinanceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 exchange = 1;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinanceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 exchange = 1;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinanceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinanceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinanceRequest::MergeFrom(const FinanceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinanceRequest::CopyFrom(const FinanceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinanceRequest::IsInitialized() const {
  
  return true;
}

void FinanceRequest::Swap(FinanceRequest* other) {
  if (other != this) {
    std::swap(exchange_, other->exchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinanceRequest_descriptor_;
  metadata.reflection = FinanceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeightRequest::kSecucodeFieldNumber;
#endif  // !_MSC_VER

WeightRequest::WeightRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeightRequest::InitAsDefaultInstance() {
}

WeightRequest::WeightRequest(const WeightRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeightRequest::SharedCtor() {
  _cached_size_ = 0;
  secucode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeightRequest::~WeightRequest() {
  SharedDtor();
}

void WeightRequest::SharedDtor() {
  if (secucode_ != &::google::protobuf::internal::kEmptyString) {
    delete secucode_;
  }
  if (this != default_instance_) {
  }
}

void WeightRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeightRequest_descriptor_;
}

const WeightRequest& WeightRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

WeightRequest* WeightRequest::default_instance_ = NULL;

WeightRequest* WeightRequest::New() const {
  return new WeightRequest;
}

void WeightRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_secucode()) {
      if (secucode_ != &::google::protobuf::internal::kEmptyString) {
        secucode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string secucode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secucode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secucode().data(), this->secucode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string secucode = 1;
  if (has_secucode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secucode().data(), this->secucode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->secucode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeightRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string secucode = 1;
  if (has_secucode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secucode().data(), this->secucode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->secucode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeightRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string secucode = 1;
    if (has_secucode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secucode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeightRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeightRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeightRequest::MergeFrom(const WeightRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secucode()) {
      set_secucode(from.secucode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeightRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightRequest::CopyFrom(const WeightRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WeightRequest::Swap(WeightRequest* other) {
  if (other != this) {
    std::swap(secucode_, other->secucode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeightRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeightRequest_descriptor_;
  metadata.reflection = WeightRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BlockRequest_Block_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockRequest_Block_descriptor_;
}
bool BlockRequest_Block_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BlockRequest_Block BlockRequest::BLOCK;
const BlockRequest_Block BlockRequest::BLOCKDETAIL;
const BlockRequest_Block BlockRequest::Block_MIN;
const BlockRequest_Block BlockRequest::Block_MAX;
const int BlockRequest::Block_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BlockRequest::kBlockFieldNumber;
#endif  // !_MSC_VER

BlockRequest::BlockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockRequest::InitAsDefaultInstance() {
}

BlockRequest::BlockRequest(const BlockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockRequest::SharedCtor() {
  _cached_size_ = 0;
  block_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockRequest::~BlockRequest() {
  SharedDtor();
}

void BlockRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockRequest_descriptor_;
}

const BlockRequest& BlockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

BlockRequest* BlockRequest::default_instance_ = NULL;

BlockRequest* BlockRequest::New() const {
  return new BlockRequest;
}

void BlockRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    block_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .quote.BlockRequest.Block block = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quote::BlockRequest_Block_IsValid(value)) {
            set_block(static_cast< ::quote::BlockRequest_Block >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .quote.BlockRequest.Block block = 1;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->block(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .quote.BlockRequest.Block block = 1;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->block(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .quote.BlockRequest.Block block = 1;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->block());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockRequest::MergeFrom(const BlockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block()) {
      set_block(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockRequest::CopyFrom(const BlockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BlockRequest::Swap(BlockRequest* other) {
  if (other != this) {
    std::swap(block_, other->block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockRequest_descriptor_;
  metadata.reflection = BlockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LargeRequest::kLenFieldNumber;
#endif  // !_MSC_VER

LargeRequest::LargeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LargeRequest::InitAsDefaultInstance() {
}

LargeRequest::LargeRequest(const LargeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LargeRequest::SharedCtor() {
  _cached_size_ = 0;
  len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LargeRequest::~LargeRequest() {
  SharedDtor();
}

void LargeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LargeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LargeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LargeRequest_descriptor_;
}

const LargeRequest& LargeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

LargeRequest* LargeRequest::default_instance_ = NULL;

LargeRequest* LargeRequest::New() const {
  return new LargeRequest;
}

void LargeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    len_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LargeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 len = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LargeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 len = 1;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->len(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LargeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 len = 1;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->len(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LargeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 len = 1;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LargeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LargeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LargeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LargeRequest::MergeFrom(const LargeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LargeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LargeRequest::CopyFrom(const LargeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LargeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LargeRequest::Swap(LargeRequest* other) {
  if (other != this) {
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LargeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LargeRequest_descriptor_;
  metadata.reflection = LargeRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PriceRequest_Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceRequest_Direction_descriptor_;
}
bool PriceRequest_Direction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PriceRequest_Direction PriceRequest::FORWARD;
const PriceRequest_Direction PriceRequest::BACKWARD;
const PriceRequest_Direction PriceRequest::Direction_MIN;
const PriceRequest_Direction PriceRequest::Direction_MAX;
const int PriceRequest::Direction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PriceRequest::kStockcodeFieldNumber;
const int PriceRequest::kLenFieldNumber;
const int PriceRequest::kCloseFieldNumber;
const int PriceRequest::kDirectionFieldNumber;
#endif  // !_MSC_VER

PriceRequest::PriceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PriceRequest::InitAsDefaultInstance() {
}

PriceRequest::PriceRequest(const PriceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PriceRequest::SharedCtor() {
  _cached_size_ = 0;
  stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  len_ = 0;
  close_ = 0;
  direction_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PriceRequest::~PriceRequest() {
  SharedDtor();
}

void PriceRequest::SharedDtor() {
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    delete stockcode_;
  }
  if (this != default_instance_) {
  }
}

void PriceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PriceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceRequest_descriptor_;
}

const PriceRequest& PriceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

PriceRequest* PriceRequest::default_instance_ = NULL;

PriceRequest* PriceRequest::New() const {
  return new PriceRequest;
}

void PriceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stockcode()) {
      if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
        stockcode_->clear();
      }
    }
    len_ = 0;
    close_ = 0;
    direction_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PriceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stockcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_len;
        break;
      }
      
      // required int32 len = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_close;
        break;
      }
      
      // optional float close = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_direction;
        break;
      }
      
      // optional .quote.PriceRequest.Direction direction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::quote::PriceRequest_Direction_IsValid(value)) {
            set_direction(static_cast< ::quote::PriceRequest_Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PriceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string stockcode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stockcode(), output);
  }
  
  // required int32 len = 2;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->len(), output);
  }
  
  // optional float close = 3;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->close(), output);
  }
  
  // optional .quote.PriceRequest.Direction direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->direction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PriceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string stockcode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stockcode(), target);
  }
  
  // required int32 len = 2;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->len(), target);
  }
  
  // optional float close = 3;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->close(), target);
  }
  
  // optional .quote.PriceRequest.Direction direction = 4;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->direction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PriceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stockcode = 1;
    if (has_stockcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockcode());
    }
    
    // required int32 len = 2;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }
    
    // optional float close = 3;
    if (has_close()) {
      total_size += 1 + 4;
    }
    
    // optional .quote.PriceRequest.Direction direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PriceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PriceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PriceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PriceRequest::MergeFrom(const PriceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stockcode()) {
      set_stockcode(from.stockcode());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PriceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceRequest::CopyFrom(const PriceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PriceRequest::Swap(PriceRequest* other) {
  if (other != this) {
    std::swap(stockcode_, other->stockcode_);
    std::swap(len_, other->len_);
    std::swap(close_, other->close_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PriceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PriceRequest_descriptor_;
  metadata.reflection = PriceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PriceResponse_Price::kCloseFieldNumber;
const int PriceResponse_Price::kSumxsbFieldNumber;
const int PriceResponse_Price::kSumxebFieldNumber;
const int PriceResponse_Price::kSumxsFieldNumber;
const int PriceResponse_Price::kSumxeFieldNumber;
#endif  // !_MSC_VER

PriceResponse_Price::PriceResponse_Price()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PriceResponse_Price::InitAsDefaultInstance() {
}

PriceResponse_Price::PriceResponse_Price(const PriceResponse_Price& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PriceResponse_Price::SharedCtor() {
  _cached_size_ = 0;
  close_ = 0;
  sumxsb_ = 0;
  sumxeb_ = 0;
  sumxs_ = 0;
  sumxe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PriceResponse_Price::~PriceResponse_Price() {
  SharedDtor();
}

void PriceResponse_Price::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PriceResponse_Price::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PriceResponse_Price::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceResponse_Price_descriptor_;
}

const PriceResponse_Price& PriceResponse_Price::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

PriceResponse_Price* PriceResponse_Price::default_instance_ = NULL;

PriceResponse_Price* PriceResponse_Price::New() const {
  return new PriceResponse_Price;
}

void PriceResponse_Price::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    close_ = 0;
    sumxsb_ = 0;
    sumxeb_ = 0;
    sumxs_ = 0;
    sumxe_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PriceResponse_Price::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float close = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sumxsb;
        break;
      }
      
      // required double sumxsb = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sumxsb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sumxsb_)));
          set_has_sumxsb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_sumxeb;
        break;
      }
      
      // required double sumxeb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sumxeb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sumxeb_)));
          set_has_sumxeb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_sumxs;
        break;
      }
      
      // required double sumxs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sumxs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sumxs_)));
          set_has_sumxs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_sumxe;
        break;
      }
      
      // required double sumxe = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sumxe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sumxe_)));
          set_has_sumxe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PriceResponse_Price::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float close = 1;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->close(), output);
  }
  
  // required double sumxsb = 2;
  if (has_sumxsb()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sumxsb(), output);
  }
  
  // required double sumxeb = 3;
  if (has_sumxeb()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sumxeb(), output);
  }
  
  // required double sumxs = 4;
  if (has_sumxs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sumxs(), output);
  }
  
  // required double sumxe = 5;
  if (has_sumxe()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sumxe(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PriceResponse_Price::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float close = 1;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->close(), target);
  }
  
  // required double sumxsb = 2;
  if (has_sumxsb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sumxsb(), target);
  }
  
  // required double sumxeb = 3;
  if (has_sumxeb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->sumxeb(), target);
  }
  
  // required double sumxs = 4;
  if (has_sumxs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sumxs(), target);
  }
  
  // required double sumxe = 5;
  if (has_sumxe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->sumxe(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PriceResponse_Price::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float close = 1;
    if (has_close()) {
      total_size += 1 + 4;
    }
    
    // required double sumxsb = 2;
    if (has_sumxsb()) {
      total_size += 1 + 8;
    }
    
    // required double sumxeb = 3;
    if (has_sumxeb()) {
      total_size += 1 + 8;
    }
    
    // required double sumxs = 4;
    if (has_sumxs()) {
      total_size += 1 + 8;
    }
    
    // required double sumxe = 5;
    if (has_sumxe()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PriceResponse_Price::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PriceResponse_Price* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PriceResponse_Price*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PriceResponse_Price::MergeFrom(const PriceResponse_Price& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_sumxsb()) {
      set_sumxsb(from.sumxsb());
    }
    if (from.has_sumxeb()) {
      set_sumxeb(from.sumxeb());
    }
    if (from.has_sumxs()) {
      set_sumxs(from.sumxs());
    }
    if (from.has_sumxe()) {
      set_sumxe(from.sumxe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PriceResponse_Price::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceResponse_Price::CopyFrom(const PriceResponse_Price& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceResponse_Price::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void PriceResponse_Price::Swap(PriceResponse_Price* other) {
  if (other != this) {
    std::swap(close_, other->close_);
    std::swap(sumxsb_, other->sumxsb_);
    std::swap(sumxeb_, other->sumxeb_);
    std::swap(sumxs_, other->sumxs_);
    std::swap(sumxe_, other->sumxe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PriceResponse_Price::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PriceResponse_Price_descriptor_;
  metadata.reflection = PriceResponse_Price_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PriceResponse::kMaxsumxsFieldNumber;
const int PriceResponse::kMaxsumxeFieldNumber;
const int PriceResponse::kPriceFieldNumber;
#endif  // !_MSC_VER

PriceResponse::PriceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PriceResponse::InitAsDefaultInstance() {
}

PriceResponse::PriceResponse(const PriceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PriceResponse::SharedCtor() {
  _cached_size_ = 0;
  maxsumxs_ = 0;
  maxsumxe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PriceResponse::~PriceResponse() {
  SharedDtor();
}

void PriceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PriceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PriceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceResponse_descriptor_;
}

const PriceResponse& PriceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

PriceResponse* PriceResponse::default_instance_ = NULL;

PriceResponse* PriceResponse::New() const {
  return new PriceResponse;
}

void PriceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxsumxs_ = 0;
    maxsumxe_ = 0;
  }
  price_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PriceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double maxsumxs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxsumxs_)));
          set_has_maxsumxs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_maxsumxe;
        break;
      }
      
      // required double maxsumxe = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxsumxe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxsumxe_)));
          set_has_maxsumxe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_price;
        break;
      }
      
      // repeated .quote.PriceResponse.Price price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_price;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PriceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double maxsumxs = 1;
  if (has_maxsumxs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->maxsumxs(), output);
  }
  
  // required double maxsumxe = 2;
  if (has_maxsumxe()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->maxsumxe(), output);
  }
  
  // repeated .quote.PriceResponse.Price price = 3;
  for (int i = 0; i < this->price_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->price(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PriceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double maxsumxs = 1;
  if (has_maxsumxs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->maxsumxs(), target);
  }
  
  // required double maxsumxe = 2;
  if (has_maxsumxe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->maxsumxe(), target);
  }
  
  // repeated .quote.PriceResponse.Price price = 3;
  for (int i = 0; i < this->price_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->price(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PriceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double maxsumxs = 1;
    if (has_maxsumxs()) {
      total_size += 1 + 8;
    }
    
    // required double maxsumxe = 2;
    if (has_maxsumxe()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .quote.PriceResponse.Price price = 3;
  total_size += 1 * this->price_size();
  for (int i = 0; i < this->price_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->price(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PriceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PriceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PriceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PriceResponse::MergeFrom(const PriceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  price_.MergeFrom(from.price_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxsumxs()) {
      set_maxsumxs(from.maxsumxs());
    }
    if (from.has_maxsumxe()) {
      set_maxsumxe(from.maxsumxe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PriceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceResponse::CopyFrom(const PriceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < price_size(); i++) {
    if (!this->price(i).IsInitialized()) return false;
  }
  return true;
}

void PriceResponse::Swap(PriceResponse* other) {
  if (other != this) {
    std::swap(maxsumxs_, other->maxsumxs_);
    std::swap(maxsumxe_, other->maxsumxe_);
    price_.Swap(&other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PriceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PriceResponse_descriptor_;
  metadata.reflection = PriceResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace quote

// @@protoc_insertion_point(global_scope)
